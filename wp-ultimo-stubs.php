<?php
/**
 * Generated stub declarations for WP Ultimo.
 * @see https://wpultimo.com
 * @see https://github.com/next-press/wp-ultimo-stubs
 */

namespace WP_Ultimo\Admin_Pages {
    /**
     * Abstract class that makes it easy to create new admin pages.
     */
    abstract class Base_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id;
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'menu';
        /**
         * If this is a submenu, we need a parent menu to attach this to
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'wp-ultimo';
        /**
         * Holds the list of action links.
         * These are the ones displayed next to the title of the page. e.g. Add New.
         *
         * @since 1.8.2
         * @var array
         */
        public $action_links = array();
        /**
         * Holds the page title
         *
         * @since 1.8.2
         * @var string
         */
        protected $title;
        /**
         * Holds the menu label of the page, this is what we effectively use on the menu item
         *
         * @since 1.8.2
         * @var string
         */
        protected $menu_title;
        /**
         * After we create the menu item using WordPress functions, we need to store the generated hook.
         *
         * @since 1.8.2
         * @var string
         */
        protected $page_hook;
        /**
         * Menu position. This is only used for top-level menus
         *
         * @since 1.8.2
         * @var integer
         */
        protected $position;
        /**
         * Dashicon to be used on the menu item. This is only used on top-level menus
         *
         * @since 1.8.2
         * @var string
         */
        protected $menu_icon;
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * If this is a top-level menu, we can need the option to rewrite the sub-menu
         *
         * @since 1.8.2
         * @var boolean|string
         */
        protected $submenu_title = false;
        /**
         * Allows us to highlight another menu page, if this page has no parent page at all.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $highlight_menu_slug = false;
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = false;
        /**
         * Should we force the admin menu into a folded state?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $fold_menu = false;
        /**
         * Should we remove the default WordPress frame?
         *
         * When set to true, this will remove the admin top-bar and the admin menu.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $remove_frame = false;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'manage_network');
        /**
         * Creates the page with the necessary hooks.
         *
         * @since 1.8.2
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Returns the ID of the admin page.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_id()
        {
        }
        // end get_id;
        /**
         * Returns the appropriate capability for a this page, depending on the context.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_capability()
        {
        }
        // end get_capability;
        /**
         * Fix the subdomain name if an option (submenu title) is passed.
         *
         * @since 1.8.2
         * @return void
         */
        public function fix_subdomain_name()
        {
        }
        // end fix_subdomain_name;
        /**
         * Fix the highlight Menu.
         *
         * @since 2.0.0
         * @param string $file Fix the menu highlight for menus without parent.
         * @return string
         */
        public function fix_menu_highlight($file)
        {
        }
        // end fix_menu_highlight;
        /**
         * Install the base hooks for developers
         *
         * @since 1.8.2
         * @return void
         */
        public function install_hooks()
        {
        }
        // end install_hooks;
        /**
         * Get the badge value, to append to the menu item title.
         *
         * @since 1.8.2
         * @return string
         */
        public function get_badge()
        {
        }
        // end get_badge;
        /**
         * Displays the page content.
         *
         * @since 1.8.2
         * @return void
         */
        public final function display()
        {
        }
        // end display;
        /**
         * Get the menu item, with the badge if necessary.
         *
         * @since 1.8.2
         * @return string
         */
        public function get_menu_label()
        {
        }
        // end get_menu_label;
        /**
         * Adds the menu items using default WordPress functions and handles the side-effects
         *
         * @since 1.8.2
         * @return void
         */
        public function add_menu_page()
        {
        }
        // end add_menu_page;
        /**
         * Adds top-level admin page.
         *
         * @since 1.8.2
         * @return string Page hook generated by WordPress.
         */
        public function add_toplevel_menu_page()
        {
        }
        // end add_toplevel_menu_page;
        /**
         * Adds sub-pages.
         *
         * @since 1.8.2
         * @return string Page hook generated by WordPress.
         */
        public function add_submenu_page()
        {
        }
        // end add_submenu_page;
        /**
         * Adds WP Ultimo branding to this page, if that's the case.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_branding()
        {
        }
        // end add_branding;
        /**
         * Adds the Jumper trigger to the admin top pages.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_container_toggle()
        {
        }
        // end add_container_toggle;
        /**
         * Adds the WP Ultimo branding header.
         *
         * @since 2.0.0
         * @return void
         */
        public function brand_header()
        {
        }
        // end brand_header;
        /**
         * Adds the WP Ultimo branding footer.
         *
         * @since 2.0.0
         * @return void
         */
        public function brand_footer()
        {
        }
        // end brand_footer;
        /**
         * Injects our admin classes to the admin body classes.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_admin_body_classes()
        {
        }
        // end add_admin_body_classes;
        /**
         * Register the default hooks.
         *
         * @todo: this does not need to run on every page.
         *
         * @since 1.8.2
         * @return void
         */
        public final function enqueue_default_hooks()
        {
        }
        // end enqueue_default_hooks;
        /**
         * Returns an array with the title links.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_title_links()
        {
        }
        // end get_title_links;
        /**
         * Allows child classes to register their own title links.
         *
         * @since 2.0.0
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Allow child classes to add further initializations.
         *
         * @since 1.8.2
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Allow child classes to add further initializations, but only after the page is loaded.
         *
         * @since 1.8.2
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Allow child classes to add hooks to be run once the page is loaded.
         *
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/load-(page)
         * @since 1.8.2
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Allow child classes to add screen options; Useful for pages that have list tables.
         *
         * @since 1.8.2
         * @return void
         */
        public function screen_options()
        {
        }
        // end screen_options;
        /**
         * Allow child classes to register scripts and styles that can be loaded on the output function, for example.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Allow child classes to register forms, if they need them.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Returns the title of the page. Must be declared on the child classes.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public abstract function get_title();
        /**
         * Returns the title of menu for this page. Must be declared on the child classes.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public abstract function get_menu_title();
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public abstract function output();
    }
    /**
     * WP Ultimo About Admin Page.
     */
    class About_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-about';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo';
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = true;
        /**
         * Should we force the admin menu into a folded state?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $fold_menu = true;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'manage_network');
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Adds the cure bg image here as well.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
    }
    /**
     * Abstract class that makes it easy to create new admin pages.
     */
    abstract class Wizard_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = true;
        /**
         * Should we force the admin menu into a folded state?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $fold_menu = true;
        /**
         * Holds the section slug for the URLs.
         *
         * @since 2.0.0
         * @var string
         */
        protected $section_slug = 'step';
        /**
         * Defines if the step links on the side are clickable or not.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $clickable_navigation = false;
        /**
         * Defined the id to be used on the main form element.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $form_id = '';
        /**
         * Holds the active section for the wizard.
         *
         * @since 2.0.0
         * @var array
         */
        public $current_section;
        /**
         * Register additional hooks to page load such as the action links and the save processing.
         *
         * @since 2.0.0
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Handles saves, after verifying nonces and such. Should not be rewritten by child classes.
         *
         * @since 2.0.0
         * @return void
         */
        public final function process_save()
        {
        }
        // end process_save;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Registers widgets to the edit page.
         *
         * This implementation register the default save widget.
         * Child classes that wish to inherit that widget while registering other,
         * can do such by adding a parent::register_widgets() to their own register_widgets() method.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Outputs the markup for the default Save widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_default_widget_body()
        {
        }
        // end output_default_widget_body;
        /**
         * Returns the logo to be used on the wizard.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
        // end get_logo;
        /**
         * Displays the contents of the edit page.
         *
         * @since 2.0.0
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Returns the first section of the signup process
         *
         * @return string
         */
        public function get_first_section()
        {
        }
        // end get_first_section;
        /**
         * Get the current section
         *
         * @return string
         */
        public function get_current_section()
        {
        }
        // end get_current_section;
        /**
         * Returns the page link for the current section.
         *
         * @since 2.0.0
         *
         * @param string $section Slug of the section. e.g. general.
         * @return string
         */
        public function get_section_link($section)
        {
        }
        // end get_section_link;
        /**
         * Returns the link to the next section on the wizard.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_next_section_link()
        {
        }
        // end get_next_section_link;
        /**
         * Returns the link to the previous section on the wizard.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_prev_section_link()
        {
        }
        // end get_prev_section_link;
        /**
         * Default handler for step submission. Simply redirects to the next step.
         *
         * @since 2.0.0
         * @return void
         */
        public function default_handler()
        {
        }
        // end default_handler;
        /**
         * Default method for views.
         *
         * @since 2.0.0
         * @return void
         */
        public function default_view()
        {
        }
        // end default_view;
        /**
         * Renders the default submit box with action buttons at the bottom of the wizard.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_submit_box()
        {
        }
        // end render_submit_box;
        /**
         * Wizard classes should implement a method that returns an array of sections and subsections.
         *
         * @since 2.0.0
         * @return array
         */
        public abstract function get_sections();
    }
    /**
     * WP Ultimo Dashboard Admin Page.
     */
    class Addons_Admin_Page extends \WP_Ultimo\Admin_Pages\Wizard_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-addons';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_settings');
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = false;
        /**
         * Should we force the admin menu into a folded state?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $fold_menu = false;
        /**
         * Holds the section slug for the URLs.
         *
         * @since 2.0.0
         * @var string
         */
        protected $section_slug = 'tab';
        /**
         * Defines if the step links on the side are clickable or not.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $clickable_navigation = true;
        /**
         * Caches the list of add-ons.
         *
         * @since 2.0.0
         * @var null|array
         */
        protected $addons;
        /**
         * Allow child classes to add hooks to be run once the page is loaded.
         *
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/load-(page)
         * @since 1.8.2
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Register forms
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Displays the more info tab.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_more_info()
        {
        }
        // end display_more_info;
        /**
         * Installs a given add-on.
         *
         * @since 2.0.0
         * @return void
         */
        public function install_addon()
        {
        }
        // end install_addon;
        /**
         * Enqueue the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Fetches the list of add-ons available.
         *
         * @since 2.0.0
         * @return array
         */
        protected function get_addons_list()
        {
        }
        // end get_addons_list;
        /**
         * Checks if a given plugin is installed.
         *
         * @since 2.0.0
         * @param string $plugin_slug The plugin slug to check.
         * @return boolean
         */
        public function is_plugin_installed($plugin_slug)
        {
        }
        // end is_plugin_installed;
        /**
         * Gets the list of addons from the remote server.
         *
         * @since 2.0.0
         * @return void
         */
        public function serve_addons_list()
        {
        }
        // end serve_addons_list;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Returns the list of settings sections.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_sections()
        {
        }
        // end get_sections;
        /**
         * Default handler for step submission. Simply redirects to the next step.
         *
         * @since 2.0.0
         * @return void
         */
        public function default_handler()
        {
        }
    }
    /**
     * Abstract class that adds customizability to customer facing pages.
     */
    abstract class Base_Customer_Facing_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * The capability required to be able to activate the customize mode.
         *
         * @since 2.0.0
         * @var string
         */
        protected $edit_capability = 'manage_network';
        /**
         * The current editing status of this page.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $editing = false;
        /**
         * Holds the original parameters before we change them.
         *
         * @since 2.0.0
         * @var array
         */
        protected $original_parameters = array();
        /**
         * If this customer facing page has menu settings.
         *
         * @since 2.0.9
         * @var boolean
         */
        protected $menu_settings = true;
        /**
         * Allow child classes to add further initializations.
         *
         * @since 1.8.2
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Saves the original parameters and change them with the settings saved.
         *
         * @since 2.0.0
         * @return void
         */
        public function change_parameters()
        {
        }
        // end change_parameters;
        /**
         * Renders the edit page form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_edit_page()
        {
        }
        // end render_edit_page;
        /**
         * Handles the edit page form and saved changes.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_edit_page()
        {
        }
        // end handle_edit_page;
        /**
         * Generates a unique id for each page based on the class name.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_page_unique_id()
        {
        }
        // end get_page_unique_id;
        /**
         * Grabs the original page parameters.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_defaults()
        {
        }
        // end get_defaults;
        /**
         * Register the default setting on the core section.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_page_settings()
        {
        }
        // end register_page_settings;
        /**
         * Get the page settings saved.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_page_settings()
        {
        }
        // end get_page_settings;
        /**
         * Saves the page settings.
         *
         * @since 2.0.0
         *
         * @param array $settings List of page settings.
         * @return boolean
         */
        public function save_page_settings($settings)
        {
        }
        // end save_page_settings;
        /**
         * Adds additional hooks using the right hook on the page lifecycle.
         *
         * @since 2.0.0
         * @return void
         */
        public function additional_hooks()
        {
        }
        // end additional_hooks;
        /**
         * Registers additional hooks for the page load.
         *
         * @since 2.0.0
         * @return void
         */
        public function additional_on_page_load()
        {
        }
        // end additional_on_page_load;
        /**
         * Adds additional body classes for styling control purposes.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_additional_body_classes()
        {
        }
        // end add_additional_body_classes;
        /**
         * Registers and enqueues additional scripts and styles required.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_additional_scripts()
        {
        }
        // end register_additional_scripts;
        /**
         * Filters the order and columns of the widgets to return a globally saved value.
         *
         * @since 2.0.0
         *
         * @param array  $result Original value of the settings being changed.
         * @param string $option The name of the option/setting being fetched.
         * @param int    $user The user ID.
         * @return array
         */
        public function get_settings($result, $option, $user)
        {
        }
        // end get_settings;
        /**
         * Save the settings globally for columns and order of the widgets.
         *
         * @since 2.0.0
         *
         * @param int    $meta_id The id of the user meta being saved.
         * @param int    $user_id The user id.
         * @param string $meta_key The name of the option/setting being saved.
         * @param mixed  $_meta_value The original saved value.
         * @return void
         */
        public function save_settings($meta_id, $user_id, $meta_key, $_meta_value)
        {
        }
        // end save_settings;
        /**
         * Get the value of editing.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_edit_mode()
        {
        }
        // end is_edit_mode;
        /**
         * Adds top-level admin page.
         *
         * @since 1.8.2
         * @return string Page hook generated by WordPress.
         */
        public function add_toplevel_menu_page()
        {
        }
    }
    /**
     * Abstract class that makes it easy to create new admin pages.
     */
    abstract class Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Checks if we are adding a new object or if we are editing one
         *
         * @since 1.8.2
         * @var boolean
         */
        public $edit = false;
        /**
         * The id/name/slug of the object being edited/created. e.g: plan
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id;
        /**
         * The object being edited.
         *
         * @since 1.8.2
         * @var object
         */
        public $object;
        /**
         * Holds validations errors on edition.
         *
         * @since 2.0.0
         * @var null|\WP_Error
         */
        protected $errors;
        /**
         * Returns the errors, if any.
         *
         * @since 2.0.0
         * @return \WP_Error
         */
        public function get_errors()
        {
        }
        // end get_errors;
        /**
         * Register additional hooks to page load such as the action links and the save processing.
         *
         * @since 2.0.0
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Add some other necessary hooks.
         *
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Adds the wu-new-model to the list of removable query args of WordPress.
         *
         * @since 2.0.0
         *
         * @param array $removable_query_args Existing list of removable query args.
         * @return array
         */
        public function removable_query_args($removable_query_args)
        {
        }
        // end removable_query_args;
        /**
         * Displays lock notices, if necessary.
         *
         * @since 2.0.0
         * @return void
         */
        protected function add_lock_notices()
        {
        }
        // end add_lock_notices;
        /**
         * Remove the lock from the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function remove_lock()
        {
        }
        // end remove_lock;
        /**
         * Handles saves, after verifying nonces and such. Should not be rewritten by child classes.
         *
         * @since 2.0.0
         * @return void
         */
        public final function process_save()
        {
        }
        // end process_save;
        /**
         * Handles delete, after verifying nonces and such. Should not be rewritten by child classes.
         *
         * @since 2.0.0
         * @return void
         */
        public final function process_delete()
        {
        }
        // end process_delete;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Allow child classes to register scripts and styles that can be loaded on the output function, for example.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Registers widgets to the edit page.
         *
         * This implementation register the default save widget.
         * Child classes that wish to inherit that widget while registering other,
         * can do such by adding a parent::register_widgets() to their own register_widgets() method.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Adds a basic widget with info (and fields) to be shown.
         *
         * @since 2.0.0
         *
         * @param string $id Unique ID for the widget, since we can have more than one per page.
         * @param array  $atts Array containing the attributes to be passed to the widget.
         * @return void
         */
        protected function add_info_widget($id, $atts = array())
        {
        }
        // end add_info_widget;
        /**
         * Adds a basic widget to display list tables.
         *
         * @since 2.0.0
         *
         * @param string $id Unique ID for the widget, since we can have more than one per page.
         * @param array  $atts Array containing the attributes to be passed to the widget.
         * @return void
         */
        protected function add_list_table_widget($id, $atts = array())
        {
        }
        // end add_list_table_widget;
        /**
         * Adds field widgets to edit pages with the same Form/Field APIs used elsewhere.
         *
         * @see Take a look at /inc/ui/form and inc/ui/field for reference.
         * @since 2.0.0
         *
         * @param string $id ID of the widget.
         * @param array  $atts Array of attributes to pass to the form.
         * @return void
         */
        protected function add_fields_widget($id, $atts = array())
        {
        }
        // end add_fields_widget;
        /**
         * Adds field widgets to edit pages with the same Form/Field APIs used elsewhere.
         *
         * @see Take a look at /inc/ui/form and inc/ui/field for reference.
         * @since 2.0.0
         *
         * @param string $id ID of the widget.
         * @param array  $atts Array of attributes to pass to the form.
         * @return void
         */
        protected function add_tabs_widget($id, $atts = array())
        {
        }
        // end add_tabs_widget;
        /**
         * Adds a generic widget to the admin page.
         *
         * @since 2.0.0
         *
         * @param string $id ID of the widget.
         * @param array  $atts Widget parameters.
         * @return void
         */
        protected function add_widget($id, $atts = array())
        {
        }
        // end add_widget;
        /**
         * Adds a basic save widget.
         *
         * @since 2.0.0
         *
         * @param string $id Unique ID for the widget, since we can have more than one per page.
         * @param array  $atts Array containing the attributes to be passed to the widget.
         * @return void
         */
        protected function add_save_widget($id, $atts = array())
        {
        }
        // end add_save_widget;
        /**
         * Adds a basic delete widget.
         *
         * @since 2.0.0
         *
         * @param string $id Unique ID for the widget, since we can have more than one per page.
         * @param array  $atts Array containing the attributes to be passed to the widget.
         * @return void
         */
        protected function add_delete_widget($id, $atts = array())
        {
        }
        // end add_delete_widget;
        /**
         * Displays the contents of the edit page.
         *
         * @since 2.0.0
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Wether or not this pages should have a title field.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Wether or not this pages should have an editor field.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_editor()
        {
        }
        // end has_editor;
        /**
         * Should return the object being edited, or false.
         *
         * Child classes need to implement this method, returning an object to be edited,
         * such as a WP_Ultimo\Model, or false, in case this is a 'Add New' page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Base_Model
         */
        public abstract function get_object();
        // end get_object;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function handle_save()
        {
        }
        // end handle_save;
        /**
         * Should implement the processes necessary to delete  the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_delete()
        {
        }
    }
    /**
     * WP Ultimo Broadcast Edit/Add New Admin Page.
     */
    class Broadcast_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-broadcast';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'broadcast';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-broadcasts';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_broadcasts');
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Outputs the markup for the customer targets widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_default_widget_customer_targets()
        {
        }
        // end output_default_widget_customer_targets;
        /**
         * Outputs the markup for the products targets widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_default_widget_product_targets()
        {
        }
        // end output_default_widget_product_targets;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function query_filter($args)
        {
        }
        // end query_filter;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Broadcast
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Broadcasts have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Wether or not this pages should have an editor field.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_editor()
        {
        }
        // end has_editor;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function events_query_filter($args)
        {
        }
    }
    /**
     * Abstract class that makes it easy to create new admin pages.
     */
    abstract class List_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * The id/name/slug of the object being edited/created. e.g: plan
         *
         * @since 1.8.2
         * @var object
         */
        protected $object_id;
        /**
         * Keep the labels
         *
         * @since 1.8.2
         * @var array
         */
        protected $labels = array();
        /**
         * Holds the WP_List_Table instance to be used on the list
         *
         * @since 1.8.2
         * @var WP_List_Table
         */
        protected $table;
        /**
         * Sets the default labels and get the object
         *
         * @since 1.8.2
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Initializes the class
         *
         * @since 1.8.2
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Process lins actions of the tables
         *
         * @since 1.8.2
         * @return void
         */
        public function process_single_action()
        {
        }
        // end process_single_action;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Allow child classes to register scripts and styles that can be loaded on the output function, for example.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Sets the default list template
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Child classes can to implement to hide the search field
         *
         * @since 1.8.2
         * @return boolean
         */
        public function has_search()
        {
        }
        // end has_search;
        /**
         * Set the screen options to allow users to set the pagination options of the subscriptions list
         *
         * @since 1.8.2
         * @return void
         */
        public function screen_options()
        {
        }
        // end screen_options;
        /**
         * Tells WordPress we want to save screen options on our pages.
         *
         * @since 2.0.0
         *
         * @param mixed  $value Value being saved.
         * @param string $option Name of the option. This is usually a per_page.
         * @param string $other_value Not sure, haha.
         * @return bool
         */
        public function save_screen_option($value, $option, $other_value)
        {
        }
        // end save_screen_option;
        /**
         * Dumb function. Child classes need to implement this to set the table that WP Ultimo will use
         *
         * @since 1.8.2
         * @return WP_List_Table
         */
        public function get_table()
        {
        }
        // end get_table;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        abstract function table();
    }
    /**
     * WP Ultimo Broadcast Admin Page.
     */
    class Broadcast_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-broadcasts';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_broadcasts');
        /**
         * Register ajax forms that we use for send broadcasts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Enqueue the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Renders the broadcast targets modal, when requested.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_targets_modal()
        {
        }
        // end display_targets_modal;
        /**
         * Renders the broadcast targets modal, when requested.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_product_targets_modal()
        {
        }
        // end display_product_targets_modal;
        /**
         * Renders the add new broadcast message modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_new_broadcast_modal()
        {
        }
        // end render_add_new_broadcast_modal;
        /**
         * Handles the add new broadcast modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_add_new_broadcast_modal()
        {
        }
        // end handle_add_new_broadcast_modal;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo Checkout_Form Edit/Add New Admin Page.
     */
    class Checkout_Form_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-checkout-form';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'checkout-form';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-checkout-forms';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_checkout_forms');
        /**
         * Overrides the init method to add additional hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds the script that controls
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function add_width_control_script()
        {
        }
        // end add_width_control_script;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Renders the preview of a given form being edited.
         *
         * @since 2.0.0
         * @return void
         */
        public function generate_checkout_form_preview()
        {
        }
        // end generate_checkout_form_preview;
        /**
         * Filter the content to render checkout form by settings.
         *
         * @since 2.0.0
         * @return string
         */
        public function content_checkout_form_by_settings()
        {
        }
        // end content_checkout_form_by_settings;
        /**
         * Save the editor session.
         *
         * This is used to edit steps and fields that were not saved.
         *
         * @since 2.0.0
         * @return void
         */
        public function save_editor_session()
        {
        }
        // end save_editor_session;
        /**
         * Adds hooks when the page loads.
         *
         * @since 2.0.0
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        // Forms
        /**
         * Register ajax forms to handle adding new memberships.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Returns the list of available field types.
         *
         * @since 2.0.0
         * @return array
         */
        public function field_types()
        {
        }
        // end field_types;
        /**
         * Returns the list of fields for the add/edit new field screen.
         *
         * @since 2.0.0
         * @param array $attributes The field attributes.
         * @return array
         */
        public function get_create_field_fields($attributes = array())
        {
        }
        // end get_create_field_fields;
        /**
         * Gets the field from the checkout step OR from the session.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Checkout_Form $checkout_form The checkout form.
         * @param string                          $step_name The step name.
         * @param string                          $field_name The field name.
         * @return array
         */
        protected function get_field($checkout_form, $step_name, $field_name)
        {
        }
        // end get_field;
        /**
         * Gets the step from the checkout OR from the session.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Checkout_Form $checkout_form The checkout form.
         * @param string                          $step_name The step name.
         * @return array
         */
        protected function get_step($checkout_form, $step_name)
        {
        }
        // end get_step;
        /**
         * Adds the modal for adding new fields.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_new_form_field_modal()
        {
        }
        // end render_add_new_form_field_modal;
        /**
         * Handles the submission of a new form field modal submission.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_add_new_form_field_modal()
        {
        }
        // end handle_add_new_form_field_modal;
        /**
         * Renders the content of the edit-add section modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_new_form_step_modal()
        {
        }
        // end render_add_new_form_step_modal;
        /**
         * Handles the form used to add a new step to the signup.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_add_new_form_step_modal()
        {
        }
        // end handle_add_new_form_step_modal;
        /**
         * Get the required fields for a given field-type.
         *
         * @since 2.0.0
         *
         * @param string $field_slug Field slug to check.
         * @param string $field_types List of available field type.
         * @return array
         */
        public function get_required_list($field_slug, $field_types)
        {
        }
        // end get_required_list;
        // Render JS Templates
        /**
         * Render the steps to be used by Vue.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_steps()
        {
        }
        // end render_steps;
        /**
         * Renders the Vue JS Templates.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_js_templates()
        {
        }
        // end render_js_templates;
        // Boilerplate
        /**
         * Registers the necessary scripts and styles for this admin page.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Returns the array of thank you page fields, based on the element.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_thank_you_page_fields()
        {
        }
        // end get_thank_you_page_fields;
        /**
         * Returns the values of the thank you page settings.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_thank_you_settings()
        {
        }
        // end get_thank_you_settings;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function query_filter($args)
        {
        }
        // end query_filter;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Checkout_Form
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
        // end handle_save;
        /**
         * Checkout_Forms have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
    }
    /**
     * WP Ultimo Checkout Form Admin Page.
     */
    class Checkout_Form_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-checkout-forms';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_memberships');
        /**
         * Register the list page tour.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Register ajax forms to handle adding new checkout forms.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the add new customer modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_new_checkout_form_modal()
        {
        }
        // end render_add_new_checkout_form_modal;
        /**
         * Handles creation of a new memberships.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_add_new_checkout_form_modal()
        {
        }
        // end handle_add_new_checkout_form_modal;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo Customer Edit/Add New Admin Page.
     */
    class Customer_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-customer';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'customer';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-customers';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_customers');
        /**
         * Allow child classes to add hooks to be run once the page is loaded.
         *
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/load-(page)
         * @since 1.8.2
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Allow child classes to register scripts and styles that can be loaded on the output function, for example.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Register ajax forms that we use for membership.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the transfer confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_transfer_customer_modal()
        {
        }
        // end render_transfer_customer_modal;
        /**
         * Handles the transfer of customer.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_transfer_customer_modal()
        {
        }
        // end handle_transfer_customer_modal;
        /**
         * Adds the extra fields to the customer delete modal.
         *
         * @since 2.0.0
         *
         * @param array  $fields original array of fields.
         * @param object $customer The customer object.
         * @return array
         */
        public function customer_extra_delete_fields($fields, $customer)
        {
        }
        // end customer_extra_delete_fields;
        /**
         * Adds the extra form attributes to the delete modal.
         *
         * @since 2.0.0
         *
         * @param array $form_attributes Form attributes.
         * @return array
         */
        public function customer_extra_form_attributes($form_attributes)
        {
        }
        // end customer_extra_form_attributes;
        /**
         * Enqueues actions to be run after a customer is deleted.
         *
         * @since 2.0.0
         *
         * @param object $customer The customer object.
         * @return void
         */
        public function customer_after_delete_actions($customer)
        {
        }
        // end customer_after_delete_actions;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Render the IP info flag.
         *
         * @since 2.0.0
         * @return string
         */
        public function render_country()
        {
        }
        // end render_country;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function memberships_query_filter($args)
        {
        }
        // end memberships_query_filter;
        /**
         * Filters the list table to return only relevant sites.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function sites_query_filter($args)
        {
        }
        // end sites_query_filter;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function events_query_filter($args)
        {
        }
        // end events_query_filter;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Customer
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Customers have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
        // end handle_save;
        /**
         * Handles the email verification sent notice
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_send_verification_notice()
        {
        }
        // end handle_send_verification_notice;
        /**
         * Adds removable query args to the WP database.
         *
         * @param array $removable_query_args Contains the removable args.
         * @return array
         */
        public function remove_query_args($removable_query_args)
        {
        }
        // end remove_query_args;
        /**
         * Confirms the memberships related to a customer.
         *
         * @since 2.0.0
         * @return void
         */
        protected function confirm_memberships()
        {
        }
    }
    /**
     * WP Ultimo Dashboard Admin Page.
     */
    class Customer_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-customers';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_customers');
        /**
         * Register ajax forms that we use for payments.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the add new customer modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_new_customer_modal()
        {
        }
        // end render_add_new_customer_modal;
        /**
         * Handles creation of a new customer.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_add_new_customer_modal()
        {
        }
        // end handle_add_new_customer_modal;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo Template Previewer Customize/Add New Admin Page.
     */
    abstract class Customizer_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Should we force the admin menu into a folded state?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $fold_menu = true;
        /**
         * The preview area height.
         *
         * @since 2.0.0
         * @var string
         */
        protected $preview_height = '120vh';
        /**
         * Returns the preview URL. This is then added to the iframe.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview_url()
        {
        }
        // end get_preview_url;
        /**
         * Adds hooks when the page loads.
         *
         * @since 2.0.0
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Adds the preview window.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_preview_window()
        {
        }
        // end display_preview_window;
        /**
         * Registers the necessary scripts and styles for this admin page.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Checkout_Forms have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Not needed.
         *
         * @since 2.0.0
         * @return void
         */
        public function get_object()
        {
        }
    }
    /**
     * WP Ultimo Dashboard Admin Page.
     */
    class Dashboard_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo';
        /**
         * Menu position. This is only used for top-level menus
         *
         * @since 1.8.2
         * @var integer
         */
        protected $position = 10101010;
        /**
         * Dashicon to be used on the menu item. This is only used on top-level menus
         *
         * @since 1.8.2
         * @var string
         */
        protected $menu_icon = 'dashicons-wu-wp-ultimo';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_dashboard');
        /**
         * Sets up the global parameters.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Allow child classes to add hooks to be run once the page is loaded.
         *
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/load-(page)
         * @since 1.8.2
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Renders the filter.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Admin_Pages\Base_Admin_Page $page The page object.
         * @return void
         */
        public function render_filter($page)
        {
        }
        // end render_filter;
        /**
         * Returns the views for the filter menu bar.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
        // end get_views;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Register the widgets of the default general tab.
         *
         * @since 2.0.0
         *
         * @param string     $tab Tab slug.
         * @param \WP_Screen $screen The screen object.
         * @return void
         */
        public function register_general_tab_widgets($tab, $screen)
        {
        }
        // end register_general_tab_widgets;
        /**
         * Output the statistics filter widget
         *
         * @return void
         * @since 2.0.0
         */
        public function output_widget_mrr_growth()
        {
        }
        // end output_widget_mrr_growth;
        /**
         * Output the statistics filter widget
         *
         * @return void
         * @since 2.0.0
         */
        public function output_widget_countries()
        {
        }
        // end output_widget_countries;
        /**
         * Output the statistics filter widget
         *
         * @return void
         * @since 2.0.0
         */
        public function output_widget_forms()
        {
        }
        // end output_widget_forms;
        /**
         * Output the statistics filter widget
         *
         * @return void
         * @since 2.0.0
         */
        public function output_widget_most_visited_sites()
        {
        }
        // end output_widget_most_visited_sites;
        /**
         * Outputs the total refunds widget content.
         *
         * @since 2.0.0
         *
         * @param string $unknown Unknown.
         * @param array  $metabox With the metabox arguments passed when registered.
         * @return void.
         */
        public function output_widget_revenues($unknown = null, $metabox = null)
        {
        }
        // end output_widget_revenues;
        /**
         * Outputs the total refunds widget content.
         *
         * @since 2.0.0
         *
         * @param string $unknown Unknown.
         * @param array  $metabox With the metabox arguments passed when registered.
         * @return void.
         */
        public function output_widget_new_accounts($unknown = null, $metabox = array())
        {
        }
        // end output_widget_new_accounts;
        /**
         * Enqueue the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
    }
    /**
     * WP Ultimo Discount_Code Edit/Add New Admin Page.
     */
    class Discount_Code_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-discount-code';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'discount_code';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-discount-codes';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_discount_codes');
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * List of products to apply this coupon to.
         *
         * @since 2.0.0
         * @return array
         */
        protected function get_product_field_list()
        {
        }
        // end get_product_field_list;
        /**
         * Handles legacy advanced options for coupons.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_legacy_options()
        {
        }
        // end handle_legacy_options;
        /**
         * Register ajax forms that we use for discount code.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function query_filter($args)
        {
        }
        // end query_filter;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Discount_Code
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Discount_Codes have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
    }
    /**
     * WP Ultimo Discount Code Admin Page.
     */
    class Discount_Code_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-discount-codes';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_discount_codes');
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo Domain Edit/Add New Admin Page.
     */
    class Domain_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-domain';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'domain';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-domains';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_domains');
        /**
         * Register ajax forms.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Adds the extra delete fields to the delete form.
         *
         * @since 2.0.0
         *
         * @param array  $fields The original fields.
         * @param object $domain The domain object.
         * @return array
         */
        public function domain_extra_delete_fields($fields, $domain)
        {
        }
        // end domain_extra_delete_fields;
        /**
         * Adds the primary domain handling to the domain deletion.
         *
         * @since 2.0.0
         *
         * @param object $domain The domain object.
         * @return void
         */
        public function domain_after_delete_actions($domain)
        {
        }
        // end domain_after_delete_actions;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Renders the DNS widget
         *
         * @since 2.0.0
         * @return void
         */
        public function render_dns_widget()
        {
        }
        // end render_dns_widget;
        /**
         * Renders the DNS widget
         *
         * @since 2.0.0
         * @return void
         */
        public function render_log_widget()
        {
        }
        // end render_log_widget;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function query_filter($args)
        {
        }
        // end query_filter;
        /**
         * Filters the list table to return only relevant sites.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function sites_query_filter($args)
        {
        }
        // end sites_query_filter;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Domain
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Domains have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
    }
    /**
     * WP Ultimo Dashboard Admin Page.
     */
    class Domain_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-domains';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_domains');
        /**
         * Register ajax forms that we use for payments.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the add new customer modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_new_domain_modal()
        {
        }
        // end render_add_new_domain_modal;
        /**
         * Handles creation of a new customer.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_add_new_domain_modal()
        {
        }
        // end handle_add_new_domain_modal;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo Email Edit/Add New Admin Page.
     */
    class Email_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-email';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'system_email';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-broadcasts';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_emails');
        /**
         * Initializes the class
         *
         * @since 1.8.2
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Registers the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Outputs the block that shows the event payload placeholders.
         *
         * @since 2.0.0
         *
         * @param mixed $unused Not sure.
         * @param array $data Arguments passed by add_meta_box.
         * @return void
         */
        public function output_default_widget_placeholders($unused, $data)
        {
        }
        // end output_default_widget_placeholders;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function query_filter($args)
        {
        }
        // end query_filter;
        /**
         * Handles the toggles.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
        // end handle_save;
        /**
         * Handles the redirect notice from sent new test modal.
         *
         * @param WP_Ultimo\Admin_Pages\Base_Admin_Page $page The page object.
         * @return void
         */
        public function handle_page_redirect($page)
        {
        }
        // end handle_page_redirect;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Email
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Emails have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Wether or not this pages should have an editor field.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_editor()
        {
        }
        // end has_editor;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function events_query_filter($args)
        {
        }
    }
    /**
     * WP Ultimo Broadcast Admin Page.
     */
    class Email_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-emails';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-broadcasts';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_emails');
        /**
         * Initializes the class
         *
         * @since 1.8.2
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Register ajax form that we use for system emails.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the modal to send tests with system emails.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_send_new_test_modal()
        {
        }
        // end render_send_new_test_modal;
        /**
         * Handles the modal to send tests with system emails.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function handle_send_new_test_modal()
        {
        }
        // end handle_send_new_test_modal;
        /**
         * Renders the modal to reset or import system emails.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function render_reset_import_modal()
        {
        }
        // end render_reset_import_modal;
        /**
         * Handles the modal to reset or import system emails.
         *
         * @since 2.0.0
         *
         * @return mixed
         */
        public function handle_reset_import_modal()
        {
        }
        // end handle_reset_import_modal;
        /**
         * Handles the redirect notice from sent new test modal.
         *
         * @param WP_Ultimo\Admin_Pages\Base_Admin_Page $page The page object.
         * @return void
         */
        public function handle_page_redirect($page)
        {
        }
        // end handle_page_redirect;
        /**
         * Renders the reset confirmation modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_reset_confirmation_modal()
        {
        }
        // end render_reset_confirmation_modal;
        /**
         * Handles the reset confirmation modal.
         *
         * @since 2.0.0
         *
         * @return mixed
         */
        public function handle_reset_confirmation_modal()
        {
        }
        // end handle_reset_confirmation_modal;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo Email Template Customize/Add New Admin Page.
     */
    class Email_Template_Customize_Admin_Page extends \WP_Ultimo\Admin_Pages\Customizer_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-customize-email-template';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being customizeed.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'email_template';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-broadcasts';
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_customize_email_template');
        /**
         * Overrides the init method to add additional hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Return the page object
         *
         * @since 2.0.0
         *
         * @return object $this The Current Object
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Renders the preview of a given form being customized.
         *
         * @since 2.0.0
         * @return void
         */
        public function email_template_preview()
        {
        }
        // end email_template_preview;
        /**
         * Returns the preview URL. This is then added to the iframe.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview_url()
        {
        }
        // end get_preview_url;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
        // end handle_save;
        /**
         * Get the value of attributes.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_attributes()
        {
        }
        // end get_attributes;
        /**
         * Gets the default email template settings.
         *
         * @since 2.0.0
         * @return array
         */
        public static function get_default_settings()
        {
        }
        // end get_default_settings;
        /**
         * Returns the list of saved settings to customize the email template.
         *
         * @since 2.0.0
         *
         * @return array
         */
        public static function get_settings()
        {
        }
        // end get_settings;
        /**
         * Returns a specitic email template setting.
         *
         * @since 2.0.0
         *
         * @param string $setting The setting name.
         * @param string $default In case there's no option.
         * @return string With the requested setting.
         */
        public function get_setting($setting, $default = false)
        {
        }
        // end get_setting;
        /**
         * Save settings.
         *
         * @since 2.0.0
         *
         * @param array $settings_to_save List of settings to save.
         * @return boolean
         */
        public function save_settings($settings_to_save)
        {
        }
    }
    /**
     * WP Ultimo Event Admin Page.
     */
    class Event_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-events';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = '';
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_events');
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds hooks when the page loads.
         *
         * @since 2.0.0
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Sets events badge notification subtracting the total number of events from the seen events in the user meta.
         *
         * @since 2.0.0
         * @return void
         */
        public function set_badge_count()
        {
        }
        // end set_badge_count;
        /**
         * Sets the seen events in the current user meta.
         *
         * @since 2.0.0
         * @return void
         */
        public function count_seen_events()
        {
        }
        // end count_seen_events;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo Event View Admin Page.
     */
    class Event_View_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-view-event';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'event';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-events';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_events');
        /**
         * Allow child classes to register scripts and styles that can be loaded on the output function, for example.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Register ajax forms that we use for membership.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Outputs the markup for the default Save widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_default_widget_message()
        {
        }
        // end output_default_widget_message;
        /**
         * Outputs the markup for the payload widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_default_widget_payload()
        {
        }
        // end output_default_widget_payload;
        /**
         * Outputs the markup for the initiator widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_default_widget_initiator()
        {
        }
        // end output_default_widget_initiator;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Event
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Events have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Handles the save of this form.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
    }
    /**
     * WP Ultimo Dashboard Admin Page.
     */
    class Hosting_Integration_Wizard_Admin_Page extends \WP_Ultimo\Admin_Pages\Wizard_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-hosting-integration-wizard';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'manage_network');
        /**
         * Current integration being setup.
         *
         * @since 2.0.0
         * @var WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
         */
        protected $integration;
        /**
         * Allow child classes to add further initializations.
         *
         * @since 1.8.2
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the sections for this Wizard.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_sections()
        {
        }
        // end get_sections;
        /**
         * Displays the content of the activation section.
         *
         * @since 2.0.0
         * @return void
         */
        public function section_activation()
        {
        }
        // end section_activation;
        /**
         * Displays the contents of the instructions section.
         *
         * @since 2.0.0
         * @return void
         */
        public function section_instructions()
        {
        }
        // end section_instructions;
        /**
         * Displays the content of the configuration section.
         *
         * @since 2.0.0
         * @return void
         */
        public function section_configuration()
        {
        }
        // end section_configuration;
        /**
         * Displays the content of the final section.
         *
         * @since 2.0.0
         * @return void
         */
        public function section_ready()
        {
        }
        // end section_ready;
        /**
         * Handles the activation of a given integration.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_activation()
        {
        }
        // end handle_activation;
        /**
         * Handles the configuration of a given integration.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_configuration()
        {
        }
        // end handle_configuration;
        /**
         * Handles the testing of a given configuration.
         *
         * @todo Move Vue to a scripts management class.
         * @since 2.0.0
         * @return void
         */
        public function section_test()
        {
        }
    }
    /**
     * WP Ultimo Invoice Template Customize/Add New Admin Page.
     */
    class Invoice_Template_Customize_Admin_Page extends \WP_Ultimo\Admin_Pages\Customizer_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-customize-invoice-template';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being customizeed.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'invoice_template';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_customize_invoice_template');
        /**
         * Overrides the original init to add the required ajax endpoints.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Ajax endpoint to generate the Ajax Preview.
         *
         * @since 2.0.0
         * @return void
         */
        public function generate_invoice_preview()
        {
        }
        // end generate_invoice_preview;
        /**
         * Returns the preview URL. This is then added to the iframe.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview_url()
        {
        }
        // end get_preview_url;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
    }
    /**
     * WP Ultimo Jobs Admin Page.
     */
    class Jobs_List_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-jobs';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this is a submenu, we need a parent menu to attach this to
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * Allows us to highlight another menu page, if this page has no parent page at all.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_jobs');
        /**
         * Overrides the init method to add additional hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Hide the Action Scheduler admin page on sub-sites.
         *
         * @since 2.0.0
         *
         * @param string $admin_view_class Admin View class name.
         * @return string
         */
        public function hide_as_admin_page($admin_view_class)
        {
        }
        // end hide_as_admin_page;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Calls the Action Scheduler renderer.
         *
         * @since 2.0.0
         * @return void
         */
        public function output()
        {
        }
    }
    /**
     * WP Ultimo Membership Edit/Add New Admin Page.
     */
    class Membership_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-membership';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'membership';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-memberships';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Marks the page as a swap preview.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $is_swap_preview = false;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_memberships');
        /**
         * Override the page load.
         *
         * @since 2.0.0
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Displays swap notices, if necessary.
         *
         * @since 2.0.0
         * @return void
         */
        protected function add_swap_notices()
        {
        }
        // end add_swap_notices;
        /**
         * Registers the necessary scripts and styles for this admin page.
         *
         * @since 2.0.4
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Register ajax forms that we use for membership.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the deletion confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        function render_transfer_membership_modal()
        {
        }
        // end render_transfer_membership_modal;
        /**
         * Handles the deletion of line items.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_transfer_membership_modal()
        {
        }
        // end handle_transfer_membership_modal;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Renders the widget used to display the product list.
         *
         * @since 2.0.0
         * @return string
         */
        public function output_widget_products()
        {
        }
        // end output_widget_products;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Filters the list table to return only relevant payments.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function payments_query_filter($args)
        {
        }
        // end payments_query_filter;
        /**
         * Filters the list table to return only relevant sites.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function sites_query_filter($args)
        {
        }
        // end sites_query_filter;
        /**
         * Filters the list table to return only relevant customer.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function customer_query_filter($args)
        {
        }
        // end customer_query_filter;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function events_query_filter($args)
        {
        }
        // end events_query_filter;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Membership
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Memberships have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Handle convert to lifetime.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function handle_convert_to_lifetime()
        {
        }
        // end handle_convert_to_lifetime;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return true
         */
        public function handle_save()
        {
        }
        // end handle_save;
        /**
         * Renders the add/edit line items form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_edit_membership_product_modal()
        {
        }
        // end render_edit_membership_product_modal;
        /**
         * Handles the add/edit of line items.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function handle_edit_membership_product_modal()
        {
        }
        // end handle_edit_membership_product_modal;
        /**
         * Renders the deletion confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_remove_membership_product()
        {
        }
        // end render_remove_membership_product;
        /**
         * Handles the deletion of line items.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_remove_membership_product()
        {
        }
        // end handle_remove_membership_product;
        /**
         * Renders the add/edit line items form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_change_membership_plan_modal()
        {
        }
        // end render_change_membership_plan_modal;
        /**
         * Handles the add/edit of line items.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function handle_change_membership_plan_modal()
        {
        }
    }
    /**
     * WP Ultimo Membership Admin Page.
     */
    class Membership_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-memberships';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_memberships');
        /**
         * Register ajax forms to handle adding new memberships.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the add new customer modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_new_membership_modal()
        {
        }
        // end render_add_new_membership_modal;
        /**
         * Handles creation of a new memberships.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_add_new_membership_modal()
        {
        }
        // end handle_add_new_membership_modal;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo Payment Edit/Add New Admin Page.
     */
    class Payment_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-payment';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'payment';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-payments';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_payments');
        /**
         * Registers the necessary scripts and styles for this admin page.
         *
         * @since 2.0.4
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Register ajax forms that we use for payments.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the deletion confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_delete_line_item_modal()
        {
        }
        // end render_delete_line_item_modal;
        /**
         * Handles the deletion of line items.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_delete_line_item_modal()
        {
        }
        // end handle_delete_line_item_modal;
        /**
         * Renders the refund line item modal.
         *
         * @since 2.0.0
         * @return void
         */
        function render_refund_payment_modal()
        {
        }
        // end render_refund_payment_modal;
        /**
         * Handles the deletion of line items.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_refund_payment_modal()
        {
        }
        // end handle_refund_payment_modal;
        /**
         * Handles the add/edit of line items.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function handle_edit_line_item_modal()
        {
        }
        // end handle_edit_line_item_modal;
        /**
         * Renders the add/edit line items form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_edit_line_item_modal()
        {
        }
        // end render_edit_line_item_modal;
        /**
         * Display the payment actions.
         *
         * @since 2.0.0
         * @return string
         */
        public function display_payment_actions()
        {
        }
        // end display_payment_actions;
        /**
         * Displays the tax tax breakthrough.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_tax_breakthrough()
        {
        }
        // end display_tax_breakthrough;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function events_query_filter($args)
        {
        }
        // end events_query_filter;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function payments_query_filter($args)
        {
        }
        // end payments_query_filter;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Payment
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Payments have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * WIP: Handles saving by recalculating totals for a payment.
         *
         * @todo: This can not be handled here.
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
    }
    /**
     * WP Ultimo Payment Admin Page.
     */
    class Payment_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-payments';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_payments');
        /**
         * Register ajax forms that we use for payments.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the add/edit line items form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_new_payment_modal()
        {
        }
        // end render_add_new_payment_modal;
        /**
         * Handles the add/edit of line items.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function handle_add_new_payment_modal()
        {
        }
        // end handle_add_new_payment_modal;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo About Admin Page.
     */
    class Placeholders_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-template-placeholders';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'manage_network');
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Adds the cure bg image here as well.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
    }
    /**
     * WP Ultimo Product Edit/Add New Admin Page.
     */
    class Product_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-product';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'product';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-products';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_products');
        /**
         * Register ajax forms.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Adds the new product warning.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_new_product_warning_message()
        {
        }
        // end add_new_product_warning_message;
        /**
         * Adds the extra delete fields to the delete form.
         *
         * @since 2.0.0
         *
         * @param array  $fields The original fields.
         * @param object $product The product object.
         * @return array
         */
        public function product_extra_delete_fields($fields, $product)
        {
        }
        // end product_extra_delete_fields;
        /**
         * Adds the primary domain handling to the product deletion.
         *
         * @since 2.0.0
         *
         * @param object $product The product object.
         * @return void
         */
        public function product_after_delete_actions($product)
        {
        }
        // end product_after_delete_actions;
        /**
         * Registers the necessary scripts and styles for this admin page.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Handles legacy advanced options for plans.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_legacy_options()
        {
        }
        // end handle_legacy_options;
        /**
         * Returns the list of sections and its fields for the product page.
         *
         * Can be filtered via 'wu_product_options_sections'.
         *
         * @see inc/managers/class-limitation-manager.php
         *
         * @since 2.0.0
         * @return array
         */
        protected function get_product_option_sections()
        {
        }
        // end get_product_option_sections;
        /**
         * Returns the HTML markup for the plugin selector list.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Product $product The product being edited.
         * @return string
         */
        public function get_site_template_selection_list($product)
        {
        }
        // end get_site_template_selection_list;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function query_filter($args)
        {
        }
        // end query_filter;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Product
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Products have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
    }
    /**
     * WP Ultimo Product Admin Page.
     */
    class Product_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-products';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_products');
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo Rollback Admin Page.
     */
    class Rollback_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-rollback';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = true;
        /**
         * Should we force the admin menu into a folded state?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $fold_menu = false;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'manage_network');
        /**
         * Creates the page with the necessary hooks.
         *
         * @since 1.8.2
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Registers the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
    }
    /**
     * WP Ultimo Dashboard Admin Page.
     */
    class Settings_Admin_Page extends \WP_Ultimo\Admin_Pages\Wizard_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-settings';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Dashicon to be used on the menu item. This is only used on top-level menus
         *
         * @since 1.8.2
         * @var string
         */
        protected $menu_icon = 'dashicons-wu-wp-ultimo';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_settings');
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = false;
        /**
         * Should we force the admin menu into a folded state?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $fold_menu = false;
        /**
         * Holds the section slug for the URLs.
         *
         * @since 2.0.0
         * @var string
         */
        protected $section_slug = 'tab';
        /**
         * Defines if the step links on the side are clickable or not.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $clickable_navigation = true;
        /**
         * Allow child classes to register scripts and styles that can be loaded on the output function, for example.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Registers widgets to the edit page.
         *
         * This implementation register the default save widget.
         * Child classes that wish to inherit that widget while registering other,
         * can do such by adding a parent::register_widgets() to their own register_widgets() method.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        // phpcs:disable
        /**
         * Renders the addons side panel
         *
         * @since 2.0.0
         * @return void
         */
        public function render_addons_side_panel()
        {
        }
        // end render_addons_side_panel;
        /**
         * Renders the account side panel
         *
         * @since 2.0.0
         * @return void
         */
        public function render_account_side_panel()
        {
        }
        // end render_account_side_panel;
        /**
         * Renders the addons side panel
         *
         * @since 2.0.0
         * @return void
         */
        public function render_gateways_addons_side_panel()
        {
        }
        // end render_gateways_addons_side_panel;
        /**
         * Renders the addons side panel
         *
         * @since 2.0.0
         * @return void
         */
        public function render_checkout_forms_side_panel()
        {
        }
        // end render_checkout_forms_side_panel;
        /**
         * Renders the site template side panel
         *
         * @since 2.0.0
         * @return void
         */
        public function render_site_template_side_panel()
        {
        }
        // end render_site_template_side_panel;
        /**
         * Renders the site placeholder side panel
         *
         * @since 2.0.0
         * @return void
         */
        public function render_site_placeholders_side_panel()
        {
        }
        // end render_site_placeholders_side_panel;
        /**
         * Renders the invoice side panel
         *
         * @since 2.0.0
         * @return void
         */
        public function render_invoice_side_panel()
        {
        }
        // end render_invoice_side_panel;
        /**
         * Renders system emails side panel.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_system_emails_side_panel()
        {
        }
        // end render_system_emails_side_panel;
        /**
         * Renders the email template side panel.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_email_template_side_panel()
        {
        }
        // end render_email_template_side_panel;
        // phpcs:enable
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Returns the list of settings sections.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_sections()
        {
        }
        // end get_sections;
        /**
         * Default handler for step submission. Simply redirects to the next step.
         *
         * @since 2.0.0
         * @return void
         */
        public function default_handler()
        {
        }
        // end default_handler;
        /**
         * Default method for views.
         *
         * @since 2.0.0
         * @return void
         */
        public function default_view()
        {
        }
    }
    /**
     * WP Ultimo Dashboard Admin Page.
     */
    class Setup_Wizard_Admin_Page extends \WP_Ultimo\Admin_Pages\Wizard_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-setup';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'manage_network');
        /**
         * The customer license, if it exists.
         *
         * @since 2.0.0
         * @var \FS_License
         */
        public $license;
        /**
         * The customer object, if it exists.
         *
         * @since 2.0.0
         * @var \FS_User
         */
        public $customer;
        /**
         * Is this an old install migrating.
         *
         * @since 2.0.0
         * @var boolean
         */
        private $is_migration;
        /**
         * Overrides original construct method.
         *
         * We need to override the construct method to make sure
         * we make the necessary changes to the Wizard page when it's
         * being run for the first time.
         *
         * @since 2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Download the migration logs.
         *
         * @since 2.0.7
         * @return void
         */
        public function download_migration_logs()
        {
        }
        // end download_migration_logs;
        /**
         * Loads the extra elements we need on the wizard itself.
         *
         * @since 1.8.2
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Checks if this is a migration or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_migration()
        {
        }
        // end is_migration;
        /**
         * Adds missing setup from settings when WP Ultimo is not fully loaded.
         *
         * @since 2.0.0
         * @return void
         */
        public function set_settings()
        {
        }
        // end set_settings;
        /**
         * Redirects to the wizard, if we need to.
         *
         * @since 2.0.0
         * @return void
         */
        public function redirect_to_wizard()
        {
        }
        // end redirect_to_wizard;
        /**
         * Handles the ajax actions for installers and migrators.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_install()
        {
        }
        // end setup_install;
        /**
         * Check if the core was loaded.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_core_loaded()
        {
        }
        // end is_core_loaded;
        /**
         * Returns the logo for the wizard.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
        // end get_logo;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the sections for this Wizard.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_sections()
        {
        }
        // end get_sections;
        /**
         * Returns the general settings to add to the wizard.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_general_settings()
        {
        }
        // end get_general_settings;
        /**
         * Returns the payment settings to add to the setup wizard.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_payment_settings()
        {
        }
        // end get_payment_settings;
        /**
         * Shows the description and possible error.
         *
         * @since 2.0.0
         * @return string
         */
        public function _desc_and_validation_error()
        {
        }
        // end _desc_and_validation_error;
        /**
         * Displays the block about the current license.
         *
         * @since 2.0.0
         * @return string
         */
        public function _current_license()
        {
        }
        // end _current_license;
        /**
         * Render the installation steps table.
         *
         * @since 2.0.0
         *
         * @param array   $steps The list of steps.
         * @param boolean $checks If we should add the checkbox for selection or not.
         * @return string
         */
        public function render_installation_steps($steps, $checks = true)
        {
        }
        // end render_installation_steps;
        /**
         * Renders the terms of support.
         *
         * @since 2.0.0
         * @return string
         */
        public function _terms_of_support()
        {
        }
        // end _terms_of_support;
        /**
         * Renders the requirements tables.
         *
         * @since 2.0.0
         * @return string
         */
        public function renders_requirements_table()
        {
        }
        // end renders_requirements_table;
        /**
         * Displays the content of the final section.
         *
         * @since 2.0.0
         * @return void
         */
        public function section_ready()
        {
        }
        // end section_ready;
        /**
         * Handles the requirements check.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_checks()
        {
        }
        // end handle_checks;
        /**
         * Handles the saving of setting steps.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save_settings()
        {
        }
        // end handle_save_settings;
        /**
         * Handles the migration step and checks for a test run.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_migration()
        {
        }
        // end handle_migration;
        /**
         * Handles the activation of a given integration.
         *
         * @since 2.0.0
         * @return void|WP_Error
         */
        public function handle_activation()
        {
        }
        // end handle_activation;
        /**
         * Handles the configuration of a given integration.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_configuration()
        {
        }
        // end handle_configuration;
        /**
         * Handles the testing of a given configuration.
         *
         * @todo Move Vue to a scripts management class.
         * @since 2.0.0
         * @return void
         */
        public function section_test()
        {
        }
        // end section_test;
        /**
         * Adds the necessary missing scripts if WP Ultimo was not loaded.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
    }
    /**
     * WP Ultimo Site Edit New Admin Page.
     */
    class Site_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-site';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'site';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-sites';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_sites');
        /**
         * Registers the necessary scripts and styles for this admin page.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Register ajax forms that we use for site.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Adds the new site_template warning.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_new_site_template_warning_message()
        {
        }
        // end add_new_site_template_warning_message;
        /**
         * Renders the transfer confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        function render_transfer_site_modal()
        {
        }
        // end render_transfer_site_modal;
        /**
         * Handles the transfer of site.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_transfer_site_modal()
        {
        }
        // end handle_transfer_site_modal;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns the list of sections and its fields for the site page.
         *
         * Can be filtered via 'wu_site_options_sections'.
         *
         * @see inc/managers/class-limitation-manager.php
         *
         * @since 2.0.0
         * @return array
         */
        protected function get_site_option_sections()
        {
        }
        // end get_site_option_sections;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function domain_query_filter($args)
        {
        }
        // end domain_query_filter;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function query_filter($args)
        {
        }
        // end query_filter;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Site
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Sites have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
    }
    /**
     * WP Ultimo Sites Admin Page.
     */
    class Site_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-sites';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_sites');
        /**
         * Register ajax forms that we use for sites.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Handles the screenshot bulk action.
         *
         * @since 2.0.0
         *
         * @param string $action The action.
         * @param string $model The model.
         * @param array  $ids The ids list.
         * @return void
         */
        public function handle_bulk_screenshots($action, $model, $ids)
        {
        }
        // end handle_bulk_screenshots;
        /**
         * Renders the deletion confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_publish_pending_site_modal()
        {
        }
        // end render_publish_pending_site_modal;
        /**
         * Handles the deletion of line items.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_publish_pending_site_modal()
        {
        }
        // end handle_publish_pending_site_modal;
        /**
         * Handles the add/edit of line items.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function handle_add_new_site_modal()
        {
        }
        // end handle_add_new_site_modal;
        /**
         * Renders the add/edit line items form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_new_site_modal()
        {
        }
        // end render_add_new_site_modal;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
    /**
     * WP Ultimo System Info Admin Page.
     */
    class System_Info_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-system-info';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this is a submenu, we need a parent menu to attach this to
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * Allows us to highlight another menu page, if this page has no parent page at all.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'manage_network');
        /**
         * Allow child classes to add further initializations.
         *
         * @since 1.8.2
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Allow child classes to register scripts and styles that can be loaded on the output function, for example.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Display system info Table
         *
         * @since 2.0.0
         *
         * @param array $data Data.
         * @return void
         */
        public function output_table_system_info($data)
        {
        }
        // end output_table_system_info;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Get data for system info
         *
         * @since 2.0.0
         * @return array
         */
        public function get_data()
        {
        }
        // end get_data;
        /**
         * Generate text file of system info data
         *
         * @since 2.0.0
         * @return void
         */
        public function generate_text_file_system_info()
        {
        }
        // end generate_text_file_system_info;
        /**
         * Get browser data
         *
         * @since 1.1.5
         * @return array
         */
        public function get_browser()
        {
        }
        // end get_browser;
        /**
         * Get list of all the plugins
         *
         * @return array
         */
        public function get_all_plugins()
        {
        }
        // end get_all_plugins;
        /**
         * Get only the active plugins
         *
         * @return array
         */
        public function get_active_plugins()
        {
        }
        // end get_active_plugins;
        /**
         * Get only the active plugins on main site
         *
         * @return array
         */
        public function get_active_plugins_on_main_site()
        {
        }
        // end get_active_plugins_on_main_site;
        /**
         * Get memory usage
         *
         * @return int
         */
        public function get_memory_usage()
        {
        }
        // end get_memory_usage;
        /**
         * Get all the ioptions
         *
         * @return array
         */
        public function get_all_options()
        {
        }
        // end get_all_options;
        /**
         * Return all the desired WP Ultimo Settings
         *
         * @since 1.1.5
         * @return array
         */
        public function get_all_wp_ultimo_settings()
        {
        }
        // end get_all_wp_ultimo_settings;
        /**
         * Get the transients om the options
         *
         * @param array $options Options.
         * @return array
         */
        public function get_transients_in_options($options)
        {
        }
    }
    /**
     * WP Ultimo About Admin Page.
     */
    class Tax_Rates_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-tax-rates';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'manage_network');
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Adds the cure bg image here as well.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
    }
    /**
     * WP Ultimo Template Previewer Customize/Add New Admin Page.
     */
    class Template_Previewer_Customize_Admin_Page extends \WP_Ultimo\Admin_Pages\Customizer_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-customize-template-previewer';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_customize_invoice_template');
        /**
         * Returns the preview URL. This is then added to the iframe.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview_url()
        {
        }
        // end get_preview_url;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
    }
    /**
     * This class adds the top bar admin navigation menu
     *
     * @since 2.0.0
     */
    class Top_Admin_Nav_Menu
    {
        /**
         * Adds the hooks and actions
         *
         * @since 1.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Adds the WP Ultimo top-bar shortcut menu
         *
         * @since 1.1.0
         * @param \WP_Admin_Bar $wp_admin_bar The admin bar identifier.
         * @return void
         */
        public function add_top_bar_menus($wp_admin_bar)
        {
        }
    }
    /**
     * WP Ultimo System Info Admin Page.
     */
    class View_Logs_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-view-logs';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this is a submenu, we need a parent menu to attach this to
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * Allows us to highlight another menu page, if this page has no parent page at all.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $highlight_menu_slug = 'wp-ultimo-events';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'manage_network');
        /**
         * Allow child classes to add further initializations.
         *
         * @since 1.8.2
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Registers extra scripts needed for this page.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Handles the actions for the logs and system info.
         *
         * @since 2.0.0
         *
         * @return array
         */
        public function handle_view_logs()
        {
        }
        // end handle_view_logs;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Outputs the pre block that shows the content.
         *
         * @since 2.0.0
         *
         * @param mixed $unused Not sure.
         * @param array $data Arguments passed by add_meta_box.
         * @return void
         */
        public function output_default_widget_payload($unused, $data)
        {
        }
        // end output_default_widget_payload;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Register additional hooks to page load such as the action links and the save processing.
         *
         * @since 2.0.0
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Should implement the processes necessary to save the changes made to the object.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
    }
    /**
     * WP Ultimo Webhook Edit/Add New Admin Page.
     */
    class Webhook_Edit_Admin_Page extends \WP_Ultimo\Admin_Pages\Edit_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-edit-webhook';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Object ID being edited.
         *
         * @since 1.8.2
         * @var string
         */
        public $object_id = 'webhook';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-webhooks';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_edit_webhooks');
        /**
         * Registers the necessary scripts and styles for this admin page.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Register ajax forms that we use for webhook.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Outputs the markup for the payload widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_default_widget_payload()
        {
        }
        // end output_default_widget_payload;
        /**
         * Filters the list table to return only relevant events.
         *
         * @since 2.0.0
         *
         * @param array $args Query args passed to the list table.
         * @return array Modified query args.
         */
        public function query_filter($args)
        {
        }
        // end query_filter;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Returns the labels to be used on the admin page.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the object being edit at the moment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Webhook
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Webhooks have titles.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_title()
        {
        }
        // end has_title;
        /**
         * Handles the save of this form.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_save()
        {
        }
    }
    /**
     * WP Ultimo Webhook Admin Page.
     */
    class Webhook_List_Admin_Page extends \WP_Ultimo\Admin_Pages\List_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-webhooks';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'wu_read_webhooks');
        /**
         * Registers the necessary scripts and styles for this admin page.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Register ajax forms that we use for add new webhooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the add new webhook modal.
         *
         * @since 2.0.0
         * @return void
         */
        function render_add_new_webhook_modal()
        {
        }
        // end render_add_new_webhook_modal;
        /**
         * Handles the add new webhook modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_add_new_webhook_modal()
        {
        }
        // end handle_add_new_webhook_modal;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns an array with the labels for the edit page.
         *
         * @since 1.8.2
         * @return array
         */
        public function get_labels()
        {
        }
        // end get_labels;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Returns the action links for that page.
         *
         * @since 1.8.2
         * @return array
         */
        public function action_links()
        {
        }
        // end action_links;
        /**
         * Loads the list table for this particular page.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\List_Tables\Base_List_Table
         */
        public function table()
        {
        }
    }
}
namespace WP_Ultimo\Admin_Pages\Customer_Panel {
    /**
     * WP Ultimo My_Account Admin Page.
     */
    class Account_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Customer_Facing_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'account';
        /**
         * Menu position. This is only used for top-level menus
         *
         * @since 1.8.2
         * @var integer
         */
        protected $position = 101010101;
        /**
         * Dashicon to be used on the menu item. This is only used on top-level menus
         *
         * @since 1.8.2
         * @var string
         */
        protected $menu_icon = 'dashicons-wu-email';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = true;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('admin_menu' => 'exist', 'user_admin_menu' => 'exist');
        /**
         * The current site instance.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Site
         */
        protected $current_site;
        /**
         * The current membership instance.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Membership
         */
        protected $current_membership;
        /**
         * Checks if we need to add this page.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Register forms
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the delete site modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_delete_site()
        {
        }
        // end render_delete_site;
        /**
         * Handles the delete site modal.
         *
         * @since 2.0.0
         *
         * @return void|WP_Error Void or WP_Error.
         */
        public function handle_delete_site()
        {
        }
        // end handle_delete_site;
        /**
         * Renders the delete account form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_delete_account()
        {
        }
        // end render_delete_account;
        /**
         * Handles the delete account form.
         *
         * @since 2.0.0
         *
         * @return void|WP_Error Void or WP_Error.
         */
        public function handle_delete_account()
        {
        }
        // end handle_delete_account;
        /**
         * Renders the change password modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_change_password()
        {
        }
        // end render_change_password;
        /**
         * Handles the password reset form.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_change_password()
        {
        }
        // end handle_change_password;
        /**
         * Renders the change current site modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_change_default_site()
        {
        }
        // end render_change_default_site;
        /**
         * Handles the change default site form.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_change_default_site()
        {
        }
        // end handle_change_default_site;
        /**
         * Loads the current site and membership.
         *
         * @since 1.8.2
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Adds notices after a membership is changed.
         *
         * @since 2.0.0
         * @return void
         */
        protected function add_notices()
        {
        }
        // end add_notices;
        /**
         * Allow child classes to add hooks to be run once the page is loaded.
         *
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/load-(page)
         * @since 1.8.2
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Allow child classes to add screen options; Useful for pages that have list tables.
         *
         * @since 1.8.2
         * @return void
         */
        public function screen_options()
        {
        }
        // end screen_options;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
    }
    /**
     * WP Ultimo Dashboard Admin Page.
     */
    class Checkout_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Customer_Facing_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wu-checkout';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'account';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('user_admin_menu' => 'read', 'admin_menu' => 'read');
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = true;
        /**
         * Should we force the admin menu into a folded state?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $fold_menu = true;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Registers the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Overrides the page loaded method.
         *
         * @since 2.0.0
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Returns the sections for this Wizard.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_sections()
        {
        }
        // end get_sections;
        /**
         * Displays the content of the activation section.
         *
         * @since 2.0.0
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
    }
    /**
     * WP Ultimo My Sites Admin Page.
     */
    class My_Sites_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Customer_Facing_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'sites';
        /**
         * Menu position. This is only used for top-level menus
         *
         * @since 1.8.2
         * @var integer
         */
        protected $position = 101010101;
        /**
         * Dashicon to be used on the menu item. This is only used on top-level menus
         *
         * @since 1.8.2
         * @var string
         */
        protected $menu_icon = 'dashicons-wu-browser';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = true;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('admin_menu' => 'exist', 'user_admin_menu' => 'exist');
        /**
         * The current customer instance.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Customer
         */
        protected $customer;
        /**
         * Checks if we need to add this page.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Loads the current site and membership.
         *
         * @since 1.8.2
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Allow child classes to add hooks to be run once the page is loaded.
         *
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/load-(page)
         * @since 1.8.2
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Remove the default my sites link.
         *
         * @since 2.0.0
         * @return void
         */
        public function unset_default_my_sites_menu()
        {
        }
        // end unset_default_my_sites_menu;
        /**
         * Update the my sites link on the top-bar.
         *
         * @since 2.0.0
         *
         * @param object $wp_admin_bar The admin bar object.
         * @return void
         */
        public function change_my_sites_link($wp_admin_bar)
        {
        }
        // end change_my_sites_link;
        /**
         * Force the screen options so our customize options show up.
         *
         * @since 2.0.0
         * @return void
         */
        public function force_screen_options()
        {
        }
        // end force_screen_options;
        /**
         * Allow child classes to add screen options; Useful for pages that have list tables.
         *
         * @since 1.8.2
         * @return void
         */
        public function screen_options()
        {
        }
        // end screen_options;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
    }
    /**
     * WP Ultimo Switch Template Admin Page.
     */
    class Template_Switching_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Customer_Facing_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wu-template-switching';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'account';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('user_admin_menu' => 'read', 'admin_menu' => 'read');
        /**
         * Should we hide admin notices on this page?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hide_admin_notices = true;
        /**
         * Should we force the admin menu into a folded state?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $fold_menu = true;
        /**
         * If this customer facing page has menu settings.
         *
         * @since 2.0.9
         * @var boolean
         */
        protected $menu_settings = false;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Registers the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Overrides the page loaded method.
         *
         * @since 2.0.0
         * @return void
         */
        public function page_loaded()
        {
        }
        // end page_loaded;
        /**
         * Displays the content of the activation section.
         *
         * @since 2.0.0
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
    }
}
namespace WP_Ultimo\Admin_Pages\Debug {
    /**
     * WP Ultimo Debug Admin Page.
     */
    class Debug_Admin_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Holds the ID for this page, this is also used as the page slug.
         *
         * @var string
         */
        protected $id = 'wp-ultimo-debug-pages';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $type = 'submenu';
        /**
         * Is this a top-level menu or a submenu?
         *
         * @since 1.8.2
         * @var string
         */
        protected $parent = 'none';
        /**
         * This page has no parent, so we need to highlight another sub-menu.
         *
         * @since 2.0.0
         * @var string
         */
        protected $highlight_menu_slug = 'wp-ultimo-settings';
        /**
         * If this number is greater than 0, a badge with the number will be displayed alongside the menu title
         *
         * @since 1.8.2
         * @var integer
         */
        protected $badge_count = 0;
        /**
         * Holds the admin panels where this page should be displayed, as well as which capability to require.
         *
         * To add a page to the regular admin (wp-admin/), use: 'admin_menu' => 'capability_here'
         * To add a page to the network admin (wp-admin/network), use: 'network_admin_menu' => 'capability_here'
         * To add a page to the user (wp-admin/user) admin, use: 'user_admin_menu' => 'capability_here'
         *
         * @since 2.0.0
         * @var array
         */
        protected $supported_panels = array('network_admin_menu' => 'capability_here');
        /**
         * Allow child classes to register widgets, if they need them.
         *
         * @since 1.8.2
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Renders the list of WP Ultimo registered pages.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_debug_pages()
        {
        }
        // end render_debug_pages;
        /**
         * Returns the title of the page.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Allows admins to rename the sub-menu (first item) for a top-level page.
         *
         * @since 2.0.0
         * @return string False to use the title menu or string with sub-menu title.
         */
        public function get_submenu_title()
        {
        }
        // end get_submenu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
    }
}
namespace WP_Ultimo\Traits {
    /**
     * Singleton trait.
     */
    trait Singleton
    {
        /**
         * Makes sure we are only using one instance of the class
         *
         * @var object
         */
        public static $instance;
        /**
         * Returns the instance of WP_Ultimo
         *
         * @return object
         */
        public static function get_instance()
        {
        }
        // end get_instance;
        /**
         * Runs only once, at the first instantiation of the Singleton.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
    }
}
namespace WP_Ultimo\API {
    /**
     * The Register API endpoint.
     *
     * @since 2.0.0
     */
    class Register_Endpoint
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Loads the initial register route hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds a new route to the wu namespace, for the register endpoint.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\API $api The API main singleton.
         * @return void
         */
        public function register_route($api)
        {
        }
        // end register_route;
        /**
         * Handle the register endpoint get for zapier integration reasons.
         *
         * @since 2.0.0
         *
         * @param \WP_REST_Request $request WP Request Object.
         * @return array
         */
        public function handle_get($request)
        {
        }
        // end handle_get;
        /**
         * Handle the register endpoint logic.
         *
         * @since 2.0.0
         *
         * @param \WP_REST_Request $request WP Request Object.
         * @return array
         */
        public function handle_endpoint($request)
        {
        }
        // end handle_endpoint;
        /**
         * Returns the list of arguments allowed on to the endpoint.
         *
         * This is also used to build the documentation page for the endpoint.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_rest_args()
        {
        }
        // end get_rest_args;
        /**
         * Maybe create a customer, if needed.
         *
         * @since 2.0.0
         *
         * @param array $p The request parameters.
         * @return \WP_Ultimo\Models\Customer|\WP_Error
         */
        public function maybe_create_customer($p)
        {
        }
        // end maybe_create_customer;
        /**
         * Undocumented function
         *
         * @since 2.0.0
         *
         * @param array                        $p The request parameters.
         * @param \WP_Ultimo\Models\Membership $membership The membership created.
         * @return array|\WP_Ultimo\Models\Site\|\WP_Error
         */
        public function maybe_create_site($p, $membership)
        {
        }
        // end maybe_create_site;
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Validates the rules and make sure we only save models when necessary.
         *
         * @since 2.0.0
         * @param array $args The params to validate.
         * @return array|\WP_Error
         */
        public function validate($args)
        {
        }
        // end validate;
        /**
         * Rolls back database changes and returns the error passed.
         *
         * @since 2.0.0
         *
         * @param \WP_Error $error The error to return.
         * @return \WP_Error
         */
        protected function rollback_and_return($error)
        {
        }
    }
}
namespace WP_Ultimo\Apis {
    /**
     * REST API trait.
     */
    trait Rest_Api
    {
        /**
         * The base used in the route right after the namespace: <namespace>/<rest_base>.
         *
         * @since 2.0.0
         * @var string
         */
        protected $rest_base = '';
        /**
         * REST endpoints enabled for this entity.
         *
         * @since 2.0.0
         * @var array
         */
        protected $enabled_rest_endpoints = array('get_item', 'get_items', 'create_item', 'update_item', 'delete_item');
        /**
         * Returns the base used right after the namespace.
         * Uses the `rest_base` attribute if set, `slug` otherwise.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_rest_base()
        {
        }
        // end get_rest_base;
        /**
         * Registers the routes. Should be called by the entity
         * to actually enable the REST API.
         *
         * @since 2.0.0
         */
        public function enable_rest_api()
        {
        }
        // end enable_rest_api;
        /**
         * Register the endpoints that don't need an ID,
         * like creation and lists.
         *
         * @since 2.0.0
         */
        public function register_routes_general()
        {
        }
        // end register_routes_general;
        /**
         * Register the endpoints that need an ID,
         * like get, update and delete of a single element.
         *
         * @since 2.0.0
         */
        public function register_routes_with_id()
        {
        }
        // end register_routes_with_id;
        /**
         * Returns a specific item.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return WP_REST_Response|WP_Error
         */
        public function get_item_rest($request)
        {
        }
        // end get_item_rest;
        /**
         * Returns a list of items.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return WP_REST_Response|WP_Error
         */
        public function get_items_rest($request)
        {
        }
        // end get_items_rest;
        /**
         * Creates an item.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return WP_REST_Response|WP_Error
         */
        public function create_item_rest($request)
        {
        }
        // end create_item_rest;
        /**
         * Updates an item.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return WP_REST_Response|WP_Error
         */
        public function update_item_rest($request)
        {
        }
        // end update_item_rest;
        /**
         * Deletes an item.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return WP_REST_Response|WP_Error
         */
        public function delete_item_rest($request)
        {
        }
        // end delete_item_rest;
        /**
         * Check permissions to list items.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return bool
         */
        public function get_items_permissions_check($request)
        {
        }
        // end get_items_permissions_check;
        /**
         * Check permissions to create an item.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return bool
         */
        public function create_item_permissions_check($request)
        {
        }
        // end create_item_permissions_check;
        /**
         * Check permissions to get an item.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return bool
         */
        public function get_item_permissions_check($request)
        {
        }
        // end get_item_permissions_check;
        /**
         * Check permissions to update an item.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return bool
         */
        public function update_item_permissions_check($request)
        {
        }
        // end update_item_permissions_check;
        /**
         * Check permissions to delete an item.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return bool
         */
        public function delete_item_permissions_check($request)
        {
        }
        // end delete_item_permissions_check;
        /**
         * Checks if a value is not a credential key.
         *
         * @since 2.0.0
         *
         * @param string $value The value that will be checked.
         * @return bool
         */
        private function is_not_credential_key($value)
        {
        }
        // end is_not_credential_key;
        /**
         * Checks if a value is not equal to "id".
         *
         * @since 2.0.0
         *
         * @param string $value The value that will be checked.
         * @return bool
         */
        private function is_not_id_key($value)
        {
        }
        // end is_not_id_key;
        /**
         * Get the arguments for an endpoint
         *
         * @since 2.0.0
         *
         * @param bool $edit Context. In edit, some fields, like ids, are not mandatory.
         * @return array
         */
        public function get_arguments_schema($edit = false)
        {
        }
        // end get_arguments_schema;
        /**
         * Remove some properties from the API schema.
         *
         * @since 2.0.0
         *
         * @param array $args Schema array.
         * @return array
         */
        public function filter_schema_arguments($args)
        {
        }
    }
    /**
     * WP CLI trait.
     */
    trait WP_CLI
    {
        /**
         * The base used in the command right after the root: `wp <root> <command_base> <sub_command>`.
         *
         * @since 2.0.0
         * @var string
         */
        protected $wp_cli_command_base = '';
        /**
         * WP-CLI Sub_command enabled for this entity.
         *
         * @since 2.0.0
         * @var array
         */
        protected $wp_cli_enabled_sub_commands = array();
        /**
         * Returns the base used right after the root.
         * Uses the `wp_cli_command_base` attribute if set, `slug` otherwise.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_wp_cli_command_base()
        {
        }
        // end get_wp_cli_command_base;
        /**
         * Registers the routes. Should be called by the entity
         * to actually enable the REST API.
         *
         * @since 2.0.0
         */
        public function enable_wp_cli()
        {
        }
        // end enable_wp_cli;
        /**
         * Set wP-CLI Sub-command enabled for this entity.
         */
        public function set_wp_cli_enabled_sub_commands()
        {
        }
        // end set_wp_cli_enabled_sub_commands;
        /**
         * Allows the additional of additional parameters.
         *
         * @since 2.0.0
         * @return array
         */
        public function wp_cli_extra_parameters()
        {
        }
        // end wp_cli_extra_parameters;
        /**
         * Returns the list of default fields, based on the table schema.
         *
         * @since 2.0.0
         * @return array List of the schema columns.
         */
        public function wp_cli_get_fields()
        {
        }
        // end wp_cli_get_fields;
        /**
         * Returns a specific item.
         *
         * @since 2.0.0
         *
         * @param array $args        Positional arguments passed. ID expected.
         * @param array $array_assoc Assoc arguments passed.
         */
        public function wp_cli_get_item($args, $array_assoc)
        {
        }
        // end wp_cli_get_item;
        /**
         * Returns a list of items.
         *
         * @since 2.0.0
         *
         * @param array $args        Positional arguments passed. ID expected.
         * @param array $array_assoc Assoc arguments passed.
         */
        public function wp_cli_get_items($args, $array_assoc)
        {
        }
        // end wp_cli_get_items;
        /**
         * Creates an item.
         *
         * @since 2.0.0
         *
         * @param array $args        Positional arguments passed. ID expected.
         * @param array $array_assoc Assoc arguments passed.
         */
        public function wp_cli_create_item($args, $array_assoc)
        {
        }
        // end wp_cli_create_item;
        /**
         * Updates an item.
         *
         * @since 2.0.0
         *
         * @param array $args        Positional arguments passed. ID expected.
         * @param array $array_assoc Assoc arguments passed.
         */
        public function wp_cli_update_item($args, $array_assoc)
        {
        }
        // end wp_cli_update_item;
        /**
         * Deletes an item.
         *
         * @since 2.0.0
         *
         * @param array $args Positional arguments passed. ID expected.
         */
        public function wp_cli_delete_item($args)
        {
        }
    }
}
namespace WP_Ultimo\Builders\Block_Editor {
    /**
     * Handles Block Editor Widget Support.
     *
     * @since 2.0.0
     */
    class Block_Editor_Widget_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Runs when Block_Editor element support is first loaded.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds the required scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Checks if we are inside a block preview render.
         *
         * @since 2.0.0
         * @param boolean $is_preview The previous preview status from the filter.
         * @return boolean
         */
        public function is_block_preview($is_preview)
        {
        }
        // end is_block_preview;
        /**
         * Gets called when a new element is registered
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\UI\Base_Element $element The element being registered.
         * @return void
         */
        public function handle_element($element)
        {
        }
        // end handle_element;
        /**
         * Registers block with WordPress.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\UI\Base_Element $element The element being registered.
         * @return void
         */
        public function register_block($element)
        {
        }
        // end register_block;
        /**
         * Consolidate field attributes that are callables for blocks.
         *
         * @since 2.0.9
         *
         * @param array $fields The list of fields.
         * @return array
         */
        protected function consolidate_callables($fields)
        {
        }
        // end consolidate_callables;
        /**
         * Registers the block so WP Ultimo can add it on the JS side.
         *
         * @since 2.0.0
         *
         * @param array                      $blocks List of blocks registered.
         * @param \WP_Ultimo\UI\Base_Element $element The element being registered.
         * @return array
         */
        public function load_block_settings($blocks, $element)
        {
        }
        // end load_block_settings;
        /**
         * Generates the list of attributes supported based on the fields.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\UI\Base_Element $element The element being registered.
         * @return array
         */
        public function get_attributes_from_fields($element)
        {
        }
    }
}
namespace WP_Ultimo\Checkout {
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Cart implements \JsonSerializable
    {
        /**
         * Holds a list of errors.
         *
         * These errors do not include
         * validation errors, only errors
         * that happen while we try to setup
         * the cart object.
         *
         * @since 2.0.0
         * @var \WP_Error
         */
        public $errors;
        /**
         * Cart Attributes.
         *
         * List of attributes passed to the
         * constructor.
         *
         * @since 2.0.0
         * @var array
         */
        private $attributes;
        /**
         * Type of registration: new, renewal, upgrade, downgrade, retry, and display.
         *
         * The display type is used to create the tables that show the products purchased on a membership
         * and payment screens.
         *
         * @since 2.0.0
         * @var string
         */
        protected $cart_type;
        /**
         * The customer object, if that exists.
         *
         * @since 2.0.0
         * @var null|\WP_Ultimo\Models\Customer
         */
        protected $customer;
        /**
         * The membership object, if that exists.
         *
         * This is used to pre-populate fields such as products
         * and more.
         *
         * @since 2.0.0
         * @var null|\WP_Ultimo\Models\Membership
         */
        protected $membership;
        /**
         * The payment object, if that exists.
         *
         * This is used to pre-populate fields such as products
         * and more.
         *
         * @since 2.0.0
         * @var null|\WP_Ultimo\Models\Payment
         */
        protected $payment;
        /**
         * The discount code object, if any.
         *
         * @since 2.0.0
         * @var null|\WP_Ultimo\Models\Discount_Code
         */
        protected $discount_code;
        /**
         * The country of the customer.
         *
         * @since 2.0.0
         * @var string
         */
        protected $country;
        /**
         * The currency of this purchase.
         *
         * @since 2.0.0
         * @var string
         */
        protected $currency;
        /**
         * The billing cycle duration.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $duration;
        /**
         * The billing cycle duration unit.
         *
         * @since 2.0.0
         * @var string
         */
        protected $duration_unit;
        /**
         * The number of billing cycles.
         *
         * 0 means unlimited cycles (a.k.a until cancelled).
         *
         * @since 2.0.0
         * @var integer
         */
        protected $billing_cycles = 0;
        /**
         * The id of the plan being hired.
         *
         * @since 2.0.0
         * @var int
         */
        protected $plan_id;
        /**
         * The cart products.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Product[]
         */
        protected $products = array();
        /**
         * Line item representation of the products.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Checkout\Line_Item[]
         */
        protected $line_items = array();
        /**
         * If this cart should auto-renew.
         *
         * This flag tells the gateways that support
         * subscriptions to go ahead and try to set up
         * a new one.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $auto_renew = true;
        /**
         * Extra parameters to send to front-end.
         *
         * @since 2.0.0
         * @var array
         */
        protected $extra = array();
        /**
         * Construct our cart/order object.
         *
         * @since 2.0.0
         *
         * @param array $args An array containing the cart arguments.
         */
        public function __construct($args)
        {
        }
        // end __construct;
        /**
         * Get additional parameters set by integrations and add-ons.
         *
         * @since 2.0.0
         *
         * @param string  $key The parameter key.
         * @param boolean $default The default value.
         * @return mixed
         */
        public function get_param($key, $default = false)
        {
        }
        // end get_param;
        /**
         * Set additional parameters set by integrations and add-ons.
         *
         * @since 2.0.0
         *
         * @param string $key The key to set.
         * @param mixed  $value The value to set.
         * @return void
         */
        public function set_param($key, $value)
        {
        }
        // end set_param;
        /**
         * Gets the tax exempt status of the current cart.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_tax_exempt()
        {
        }
        // end is_tax_exempt;
        /**
         * Builds the cart.
         *
         * Here, we try to determine the type of
         * cart so we can properly set it up, based
         * on the payment, membership, and products passed.
         *
         * @since 2.0.0
         * @return void
         */
        protected function build_cart()
        {
        }
        // end build_cart;
        /**
         * Creates a string that describes the cart.
         *
         * Some gateways require a description that you need
         * to match after the payment confirmation.
         *
         * This method generates such a string based on
         * the products on the cart.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_cart_descriptor()
        {
        }
        // end get_cart_descriptor;
        /**
         * Decides if we are trying to recover a payment.
         *
         * @since 2.0.0
         *
         * @param int $payment_id A valid payment ID.
         * @return bool
         */
        protected function build_from_payment($payment_id)
        {
        }
        // end build_from_payment;
        /**
         * Uses the membership to decide if this is a upgrade/downgrade/addon cart.
         *
         * @since 2.0.0
         *
         * @param int $membership_id A valid membership ID.
         * @return bool
         */
        protected function build_from_membership($membership_id)
        {
        }
        // end build_from_membership;
        /**
         * Calculate pro-rate credits.
         *
         * @since 2.0.0
         * @return void
         */
        protected function calculate_prorate_credits()
        {
        }
        // end calculate_prorate_credits;
        /**
         * Adds a discount code to the cart.
         *
         * @since 2.0.0
         *
         * @param int|string $code A valid discount code ID or code.
         * @return void
         */
        protected function set_discount_code($code)
        {
        }
        // end set_discount_code;
        /**
         * Returns the current errors.
         *
         * @since 2.0.0
         * @return \WP_Error
         */
        public function get_errors()
        {
        }
        // end get_errors;
        /**
         * For an order to be valid, all the recurring products must have the same
         * billing intervals and cycle.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_valid()
        {
        }
        // end is_valid;
        /**
         * Checks if this order is free.
         *
         * This is used on the checkout to deal with this separately.
         *
         * @todo handle 100% off coupon codes.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_free()
        {
        }
        // end is_free;
        /**
         * Checks if we need to collect a payment method.
         *
         * Will return false if the order is free or when
         * the order contains a trial and no payment method is required.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function should_collect_payment()
        {
        }
        // end should_collect_payment;
        /**
         * Checks if the cart has a plan.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_plan()
        {
        }
        // end has_plan;
        /**
         * Returns the cart plan.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Product
         */
        public function get_plan()
        {
        }
        // end get_plan;
        /**
         * Returns the recurring products added to the cart.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_recurring_products()
        {
        }
        // end get_recurring_products;
        /**
         * Returns the non-recurring products added to the cart.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_non_recurring_products()
        {
        }
        // end get_non_recurring_products;
        /**
         * Returns an array containing all products added to the cart, recurring or not.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_all_products()
        {
        }
        // end get_all_products;
        /**
         * Returns the duration value for this cart.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_duration()
        {
        }
        // end get_duration;
        /**
         * Returns the duration unit for this cart.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_duration_unit()
        {
        }
        // end get_duration_unit;
        /**
         * Add a new line item.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Line_Item $line_item The line item.
         * @return void
         */
        public function add_line_item($line_item)
        {
        }
        // end add_line_item;
        /**
         * Adds a new product to the cart.
         *
         * @since 2.0.0
         *
         * @param integer $product_id The product id to add.
         * @param integer $quantity The quantity.
         * @return bool
         */
        public function add_product($product_id, $quantity = 1)
        {
        }
        // end add_product;
        /**
         * Returns an array containing the subtotal per tax rate.
         *
         * @since 2.0.0
         * @return array $tax_rate => $tax_total.
         */
        public function get_tax_breakthrough()
        {
        }
        // end get_tax_breakthrough;
        /**
         * Determine whether or not the level being registered for has a trial that the current user is eligible
         * for. This will return false if there is a trial but the user is not eligible for it.
         *
         * @access public
         * @since  2.0.0
         * @return bool
         */
        public function has_trial()
        {
        }
        // end has_trial;
        /**
         * Get the recovered payment object.
         *
         * @since 2.0.0
         * @return object|false Payment object if set, false if not.
         */
        public function get_recovered_payment()
        {
        }
        // end get_recovered_payment;
        /**
         * Add discount to the order.
         *
         * @since 2.0.0
         *
         * @param string $code Coupon code to add.
         * @return bool
         */
        public function add_discount_code($code)
        {
        }
        // end add_discount_code;
        /**
         * Get registration discounts.
         *
         * @since 2.5
         * @return array|bool
         */
        public function get_discounts()
        {
        }
        // end get_discounts;
        /**
         * Checks if the cart has any discounts applied.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_discount()
        {
        }
        // end has_discount;
        /**
         * Returns a list of line items based on the line item type.
         *
         * @since 2.0.0
         *
         * @param string $type The type. Can be 'product', 'fee', 'discount'.
         * @param array  $where_clauses Additional where clauses for search.
         * @return \WP_Ultimo\Checkout\Line_Item[]
         */
        public function get_line_items_by_type($type = 'product', $where_clauses = array())
        {
        }
        // end get_line_items_by_type;
        /**
         * Get registration fees.
         *
         * @since 2.0.0
         * @return array|bool
         */
        public function get_fees()
        {
        }
        // end get_fees;
        /**
         * Calculates the total tax amount.
         *
         * @todo Refactor this.
         * @since 2.0.0
         * @return float
         */
        public function get_total_taxes()
        {
        }
        // end get_total_taxes;
        /**
         * Get the total number of fees.
         *
         * @since 2.0.0
         *
         * @param null $total The total of fees in the order so far.
         * @param bool $only_recurring | set to only get fees that are recurring.
         *
         * @return float
         */
        public function get_total_fees($total = null, $only_recurring = false)
        {
        }
        // end get_total_fees;
        /**
         * Get the total proration amount.
         *
         * @todo Needs to be used and implemented on the checkout flow.
         * @since 2.0.0
         *
         * @return float
         */
        public function get_proration_credits()
        {
        }
        // end get_proration_credits;
        /**
         * Get the total discounts.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_total_discounts()
        {
        }
        // end get_total_discounts;
        /**
         * Gets the subtotal value of the cart.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_subtotal()
        {
        }
        // end get_subtotal;
        /**
         * Get the registration total due today.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_total()
        {
        }
        // end get_total;
        /**
         * Get the registration recurring total.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_recurring_total()
        {
        }
        // end get_recurring_total;
        /**
         * Gets the recurring subtotal, before taxes.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_recurring_subtotal()
        {
        }
        // end get_recurring_subtotal;
        /**
         * Returns the timestamp of the end of the trial period.
         *
         * @since 2.0.0
         * @return string|false
         */
        public function get_billing_start_date()
        {
        }
        // end get_billing_start_date;
        /**
         * Returns the timestamp of the next charge, if recurring.
         *
         * @since 2.0.0
         * @return string|false
         */
        public function get_billing_next_charge_date()
        {
        }
        // end get_billing_next_charge_date;
        /**
         * Checks if the order is recurring or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_recurring()
        {
        }
        // end has_recurring;
        /**
         * Returns an array with all types of line-items of the cart.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_line_items()
        {
        }
        // end get_line_items;
        /**
         * Apply discounts to a line item.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Line_Item $line_item The line item.
         * @return \WP_Ultimo\Checkout\Line_Item
         */
        public function apply_discounts_to_item($line_item)
        {
        }
        // end apply_discounts_to_item;
        /**
         * Apply taxes to a line item.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Line_Item $line_item The line item.
         * @return \WP_Ultimo\Checkout\Line_Item
         */
        public function apply_taxes_to_item($line_item)
        {
        }
        // end apply_taxes_to_item;
        /**
         * Calculates the totals of the cart and return them.
         *
         * @since 2.0.0
         * @return object
         */
        public function calculate_totals()
        {
        }
        // end calculate_totals;
        /**
         * Used for serialization purposes.
         *
         * @since 2.0.0
         * @return array
         */
        public function jsonSerialize()
        {
        }
        // end jsonSerialize;
        /**
         * Get the list of extra parameters.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_params()
        {
        }
        // end get_extra_params;
        /**
         * Implements our on json_decode version of this object. Useful for use in vue.js.
         *
         * @since 2.0.0
         * @return array
         */
        public function done()
        {
        }
        // end done;
        /**
         * Converts the current cart to an array of membership elements.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_membership_data()
        {
        }
        // end to_membership_data;
        /**
         * Converts the current cart to a payment data array.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_payment_data()
        {
        }
        // end to_payment_data;
        /**
         * Get the value of discount_code
         *
         * @since 2.0.0
         * @return null|\WP_Ultimo\Model\Discount_Code
         */
        public function get_discount_code()
        {
        }
        // end get_discount_code;
        /**
         * Get the value of plan_id
         *
         * @since 2.0.0
         * @return int
         */
        public function get_plan_id()
        {
        }
        // end get_plan_id;
        /**
         * Get the currency code.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_currency()
        {
        }
        // end get_currency;
        /**
         * Set the currency.
         *
         * @since 2.0.0
         * @param mixed $currency The currency code.
         * @return void
         */
        public function set_currency($currency)
        {
        }
        // end set_currency;
        /**
         * Get the cart membership.
         *
         * @since 2.0.0
         * @return null|\WP_Ultimo\Models\Membership
         */
        public function get_membership()
        {
        }
        // end get_membership;
        /**
         * Get the cart payment.
         *
         * @since 2.0.0
         * @return null|\WP_Ultimo\Models\Payment
         */
        public function get_payment()
        {
        }
        // end get_payment;
        /**
         * Get the cart customer.
         *
         * @since 2.0.0
         * @return null|\WP_Ultimo\Models\Customer
         */
        public function get_customer()
        {
        }
        // end get_customer;
        /**
         * Set the cart membership.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\Models\Membership $membership A valid membership object.
         * @return void
         */
        public function set_membership($membership)
        {
        }
        // end set_membership;
        /**
         * Set the cart customer.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\Models\Customer $customer A valid customer object.
         * @return void
         */
        public function set_customer($customer)
        {
        }
        // end set_customer;
        /**
         * Set the cart payment.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\Models\Payment $payment A valid payment object.
         * @return void
         */
        public function set_payment($payment)
        {
        }
        // end set_payment;
        /**
         * Get the value of auto_renew.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function should_auto_renew()
        {
        }
        // end should_auto_renew;
        /**
         * Get the cart type.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_cart_type()
        {
        }
        // end get_cart_type;
        /**
         * Get the country of the customer.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_country()
        {
        }
        // end get_country;
        /**
         * Set the country of the customer.
         *
         * @since 2.0.0
         * @param string $country The country of the customer.
         * @return void
         */
        public function set_country($country)
        {
        }
        // end set_country;
        /**
         * Builds a cart URL that we can use with the browser history APIs.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_cart_url()
        {
        }
    }
    /**
     * Handles registration pages and such.
     *
     * @since 2.0.0
     */
    class Checkout_Pages
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Initializes the Checkout_Pages singleton and adds hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Renders the compat mode option for pages and posts.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_compat_mode_setting()
        {
        }
        // end render_compat_mode_setting;
        /**
         * Handles saving the compat mode switch on posts.
         *
         * @since 2.0.0
         *
         * @param int $post_id The id of the post being saved.
         * @return void
         */
        public function handle_compat_mode_setting($post_id)
        {
        }
        // end handle_compat_mode_setting;
        /**
         * Replace wp-login.php in email URLs.
         *
         * @since 2.0.0
         *
         * @param string $url The URL to filter.
         * @return string
         */
        public function maybe_change_wp_login_on_urls($url)
        {
        }
        // end maybe_change_wp_login_on_urls;
        /**
         * Get an error message.
         *
         * @since 2.0.0
         *
         * @param string $error_code The error code.
         * @return string
         */
        public function get_error_message($error_code)
        {
        }
        // end get_error_message;
        /**
         * Handle password reset errors.
         *
         * We redirect users to our custom login URL,
         * so we can add an error message.
         *
         * @since 2.0.0
         *
         * @param \WP_Error $errors The error object.
         * @return void
         */
        public function maybe_handle_password_reset_errors($errors)
        {
        }
        // end maybe_handle_password_reset_errors;
        /**
         * Maybe redirects users to the confirm screen.
         *
         * If we are successful in resetting a password,
         * we need to prevent the user from reaching the empty
         * wp-login.php message, so we redirect them to the passed
         * redirect_to query argument.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_redirect_to_confirm_screen()
        {
        }
        // end maybe_redirect_to_confirm_screen;
        /**
         * Replace the reset password link, if necessary.
         *
         * @since 2.0.0
         *
         * @param string $message The email message.
         * @param string $key The reset key.
         * @param string $user_login The user login.
         * @param array  $user_data The user data array.
         * @return string
         */
        public function replace_reset_password_link($message, $key, $user_login, $user_data)
        {
        }
        // end replace_reset_password_link;
        /**
         * Redirect logged users when they reach the login page.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_redirect_to_admin_panel()
        {
        }
        // end maybe_redirect_to_admin_panel;
        /**
         * Adds the unverified email account error message.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The current payment.
         * @param \WP_Ultimo\Models\Membership $membership the current membership.
         * @param \WP_Ultimo\Models\Customer   $customer the current customer.
         * @return void
         */
        public function add_verify_email_notice($payment, $membership, $customer)
        {
        }
        // end add_verify_email_notice;
        /**
         * Check if we should obfuscate the login URL.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_obfuscate_login_url()
        {
        }
        // end maybe_obfuscate_login_url;
        /**
         * Redirects the customers to the registration page, when one is used.
         *
         * @since 2.0.0
         * @return void
         */
        public function redirect_to_registration_page()
        {
        }
        // end redirect_to_registration_page;
        /**
         * Filters the login URL if necessary.
         *
         * @since 2.0.0
         *
         * @param string $login_url Original login URL.
         * @param string $redirect URL to redirect to after login.
         * @param bool   $force_reauth If we need to force reauth.
         * @return string
         */
        public function filter_login_url($login_url, $redirect, $force_reauth = false)
        {
        }
        // end filter_login_url;
        /**
         * Returns the ID of the pages being used for each WP Ultimo purpose.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_signup_pages()
        {
        }
        // end get_signup_pages;
        /**
         * Returns the WP_Post object for one of the pages.
         *
         * @since 2.0.0
         *
         * @param string $page The slug of the page to retrieve.
         * @return \WP_Post|false
         */
        public function get_signup_page($page)
        {
        }
        // end get_signup_page;
        /**
         * Returns the URL for a particular page type.
         *
         * @since 2.0.0
         *
         * @param array $page Page to return the URL.
         * @return string
         */
        public function get_page_url($page)
        {
        }
        // end get_page_url;
        /**
         * Tags the WP Ultimo pages on the main site.
         *
         * @since 2.0.0
         *
         * @param array    $states The previous states of that page.
         * @param \WP_Post $post The current post.
         * @return array
         */
        public function add_wp_ultimo_status_annotation($states, $post)
        {
        }
        // end add_wp_ultimo_status_annotation;
        /**
         * Renders the confirmation page.
         *
         * @since 2.0.0
         *
         * @param array       $atts Shortcode attributes.
         * @param null|string $content The post content.
         * @return string
         */
        public function render_confirmation_page($atts, $content = null)
        {
        }
    }
    /**
     * Handles the processing of new membership purchases.
     *
     * @since 2.0.0
     */
    class Checkout
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Holds checkout errors.
         *
         * @since 2.0.0
         * @var \WP_Error|null
         */
        public $errors;
        /**
         * Keeps a reference to our order.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Checkout\Cart
         */
        protected $order;
        /*
         * Checkout progress info
         */
        /**
         * Current step of the signup flow.
         *
         * @since 2.0.0
         * @var string
         */
        public $step;
        /**
         * Keeps the name of the step.
         *
         * @since 2.0.0
         * @var string
         */
        public $step_name;
        /**
         * The slug of the current checkout form.
         *
         * @since 2.0.0
         * @var string
         */
        public $checkout_form;
        /**
         * List of steps for the signup flow.
         *
         * @since 2.0.0
         * @var array
         */
        public $steps;
        /**
         * Session object.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Session
         */
        protected $session;
        /**
         * Checkout type.
         *
         * @since 2.0.0
         * @var string
         */
        protected $type = 'new';
        /**
         * Initializes the Checkout singleton and adds hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Add checkout rewrite rules.
         *
         * Adds the following URL structures.
         * For this example, let's use /register as the registration page.
         *
         * It registers:
         * 1. site.com/register/plan_id:         Pre-selects the plan_id;
         * 2. site.com/register/plan_id/3:       Pre-selects the plan_id and 3 months;
         * 3. site.com/register/plan_id/12/year: Pre-selects the plan and the duration unit.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_rewrite_rules()
        {
        }
        // end add_rewrite_rules;
        /**
         * Filters the wu_request with the query vars.
         *
         * @since 2.0.0
         *
         * @param mixed  $value The value from wu_request.
         * @param string $key The key value.
         * @return mixed
         */
        public function get_checkout_from_query_vars($value, $key)
        {
        }
        // end get_checkout_from_query_vars;
        /**
         * Setups the necessary boilerplate code to have checkouts work.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\UI\Checkout_Element $element The checkout element.
         * @return void
         */
        public function setup_checkout($element = null)
        {
        }
        // end setup_checkout;
        /**
         * Checks if a list of fields has an auto-submittable field.
         *
         * @since 2.0.4
         *
         * @param array $fields The list of fields of a step we need to check.
         * @return false|string False if no auto-submittable field is present, the field to watch otherwise.
         */
        public function contains_auto_submittable_field($fields)
        {
        }
        // end contains_auto_submittable_field;
        /**
         * Returns a list of auto-submittable fields.
         *
         * @since 2.0.4
         * @return array
         */
        public function get_auto_submittable_fields()
        {
        }
        // end get_auto_submittable_fields;
        /**
         * Decides if we want to handle a step submission or a full checkout submission.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_handle_order_submission()
        {
        }
        // end maybe_handle_order_submission;
        /**
         * Validates the order submission, and then delegates the processing to the gateway.
         *
         * We use database transactions in here to prevent failed sign-ups from being
         * committed to the database. This means that if a \Throwable or a \WP_Error
         * happens anywhere in the process, we halt it and rollback on writes up to that point.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_order_submission()
        {
        }
        // end handle_order_submission;
        /**
         * Process an order.
         *
         * This method is responsible for
         * creating all the data elements we
         * need in order to actually process a
         * checkout.
         *
         * Those include:
         * - A customer;
         * - A pending payment;
         * - A membership.
         *
         * With those elements, we can then
         * delegate to the gateway to run their
         * own preparations (@see run_preflight).
         *
         * We then return everything to be added
         * to the front-end form. That data then
         * gets submitted with the rest of the form,
         * and eventually handled by process_checkout.
         *
         * @see process_checkout
         *
         * @since 2.0.0
         * @return array|\WP_Error
         */
        public function process_order()
        {
        }
        // end process_order;
        /**
         * Checks if a customer exists, otherwise, creates a new one.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Customer|\WP_Error
         */
        protected function maybe_create_customer()
        {
        }
        // end maybe_create_customer;
        /**
         * Save meta data related to customers.
         *
         * @since 2.0.0
         *
         * @param Customer $customer The created customer.
         * @param string   $form_slug The form slug.
         * @return void
         */
        protected function handle_customer_meta_fields($customer, $form_slug)
        {
        }
        // end handle_customer_meta_fields;
        /**
         * Checks if a membership exists, otherwise, creates a new one.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Membership|\WP_Error
         */
        protected function maybe_create_membership()
        {
        }
        // end maybe_create_membership;
        /**
         * Checks if a pending site exists, otherwise, creates a new one.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Site|\WP_Error
         */
        protected function maybe_create_site()
        {
        }
        // end maybe_create_site;
        /**
         * Gets list of site meta data.
         *
         * @since 2.0.0
         *
         * @param string $form_slug The form slug.
         * @param string $meta_type The meta type. Can be site_meta or site_option.
         * @return array
         */
        protected function get_site_meta_fields($form_slug, $meta_type = 'site_meta')
        {
        }
        // end get_site_meta_fields;
        /**
         * Checks if a pending payment exists, otherwise, creates a new one.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Payment|\WP_Error
         */
        protected function maybe_create_payment()
        {
        }
        // end maybe_create_payment;
        /**
         * Validates the checkout form to see if it's valid por not.
         *
         * @since 2.0.0
         * @return void
         */
        public function validate_form()
        {
        }
        // end validate_form;
        /**
         * Creates an order object to display the order summary tables.
         *
         * @since 2.0.0
         * @return void
         */
        public function create_order()
        {
        }
        // end create_order;
        /**
         * Returns the checkout variables.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_checkout_variables()
        {
        }
        // end get_checkout_variables;
        /**
         * Returns the validation rules for the fields.
         *
         * @todo The fields needs to declare this themselves.
         *
         * @since 2.0.0
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Returns the list of validation rules.
         *
         * If we are dealing with a step submission, we will return
         * only the validation rules that refer to the keys sent via POST.
         *
         * If this is the submission of the last step, though, we return all
         * validation rules so we can validate the entire signup.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_validation_rules()
        {
        }
        // end get_validation_rules;
        /**
         * Validates the rules and make sure we only save models when necessary.
         *
         * @since 2.0.0
         * @return true|\WP_Error
         */
        public function validate()
        {
        }
        // end validate;
        /**
         * Decides if we are to process a checkout.
         *
         * Needs to decide if we are simply putting the customer through the next step
         * or if we need to actually process the checkout.
         * It checks of the current checkout is multi-step;
         * If it is, process info, save into session and send to the next step.
         * Otherwise, we process the checkout.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_process_checkout()
        {
        }
        // end maybe_process_checkout;
        /**
         * Runs pre-checks to see if we should process the checkout.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function should_process_checkout()
        {
        }
        // end should_process_checkout;
        /**
         * Handles the checkout submission.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function process_checkout()
        {
        }
        // end process_checkout;
        /**
         * Handle user display names, if first and last names are available.
         *
         * @since 2.0.4
         *
         * @param string $display_name The current display name.
         * @return string
         */
        public function handle_display_name($display_name)
        {
        }
        // end handle_display_name;
        /*
         * Helper methods
         *
         * These mostly deal with
         * multi-step checkout control
         * and can be mostly ignored!
         */
        /**
         * Get thank you page URL.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_thank_you_page()
        {
        }
        // end get_thank_you_page;
        /**
         * Checks if the user already exists.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_existing_user()
        {
        }
        // end is_existing_user;
        /**
         * Returns the customer email verification status we want to use depending on the type of checkout.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_customer_email_verification_status()
        {
        }
        // end get_customer_email_verification_status;
        /**
         * Adds the checkout scripts.
         *
         * @see $this->get_checkout_variables()
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Gets the info either from the request or session.
         *
         * We try to get the key from the session object, but
         * if that doesn't work or it doesn't exist, we try
         * to get it from the request instead.
         *
         * @since 2.0.0
         *
         * @param string $key Key to retrieve the value for.
         * @param mixed  $default The default value to return, when nothing is found.
         * @return mixed
         */
        public function request_or_session($key, $default = false)
        {
        }
        // end request_or_session;
        /**
         * Returns the name of the next step on the flow.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_next_step_name()
        {
        }
        // end get_next_step_name;
        /**
         * Takes into consideration the visibility of the steps.
         *
         * @since 2.0.0
         *
         * @param array $steps The steps.
         * @return array
         */
        public function maybe_hide_steps($steps)
        {
        }
        // end maybe_hide_steps;
        /**
         * Checks if we are in the first step of the signup.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_first_step()
        {
        }
        // end is_first_step;
        /**
         * Checks if we are in the last step of the signup.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_last_step()
        {
        }
        // end is_last_step;
        /**
         * Decides if we should display errors on the checkout screen.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_display_checkout_errors()
        {
        }
    }
    /**
     * Handles the processing of new membership purchases.
     *
     * @since 2.0.0
     */
    class Legacy_Checkout
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Holds checkout errors.
         *
         * @since 2.0.0
         * @var \WP_Error|null
         */
        public $errors;
        /**
         * Holds checkout errors.
         *
         * @since 2.0.0
         * @var \WP_Error|null
         */
        public $results;
        /**
         * Current step of the signup flow.
         *
         * @since 2.0.0
         * @var string
         */
        public $step;
        /**
         * List of steps for the signup flow.
         *
         * @since 2.0.0
         * @var array
         */
        public $steps;
        /**
         * Product being purchased, if that exists.
         *
         * @since 2.0.0
         * @var null|\WP_Ultimo\Models\Product
         */
        public $product;
        /**
         * Session object.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Session.
         */
        protected $session;
        /**
         * Page templates to add.
         *
         * We use this to inject the legacy-signup.php page template option
         * onto the post/page edit page on the main site.
         *
         * @since 2.0.0
         * @var array
         */
        protected $templates;
        /**
         * Initializes the Checkout singleton and adds hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds our page templates to the page template dropdown.
         *
         * @since 2.0.0
         *
         * @param array $posts_templates Existing page templates.
         * @return array
         */
        public function add_new_template($posts_templates)
        {
        }
        // end add_new_template;
        /**
         * Adds our template to the pages cache in order to trick WordPress
         * into thinking the template file exists where it doesn't really exist.
         *
         * @since 2.0.0
         *
         * @param array $atts Post data.
         * @return array
         */
        public function register_legacy_templates($atts)
        {
        }
        // end register_legacy_templates;
        /**
         * Checks if our custom template is assigned to the page and display it.
         *
         * @since 2.0.0
         *
         * @param string $template The template set to a given page.
         * @return string
         */
        public function view_legacy_template($template)
        {
        }
        // end view_legacy_template;
        /**
         * Loads the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Adds the additional dynamic styles.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_legacy_dynamic_styles()
        {
        }
        // end get_legacy_dynamic_styles;
        /**
         * Checks if we should pre-fill checkout fields based on the request.
         *
         * We do a couple of clever things here:
         * 1. We check for a plan slug right after the checkout/slug of the main page.
         *
         * @since 2.0.0
         *
         * @param array $request WordPress request.
         * @return array
         */
        public function maybe_render_legacy_signup($request)
        {
        }
        // end maybe_render_legacy_signup;
        /**
         * Renders the legacy checkout.
         *
         * @since 2.0.0
         * @return void
         */
        public function legacy_signup()
        {
        }
        // end legacy_signup;
        /**
         * Check Geolocation
         *
         * @return void
         */
        public function check_geolocation()
        {
        }
        // end check_geolocation;
        /**
         * Gets the info for the current step.
         *
         * @since 2.0.0
         * @return array
         */
        protected function get_current_step_info()
        {
        }
        // end get_current_step_info;
        /**
         * Handles a post submission.
         *
         * @since 2.0.0
         * @return void
         */
        protected function handle_post()
        {
        }
        // end handle_post;
        /**
         * The first invisible step, handles the creation of the transient saver
         *
         * @since 1.4.0
         * @return void
         */
        public function begin_signup()
        {
        }
        // end begin_signup;
        /**
         * Check if the current page is a customizer page.
         *
         * @return boolean
         */
        public static function is_customizer()
        {
        }
        // end is_customizer;
        /**
         * Returns the first step of the signup process
         *
         * @return string
         */
        public function get_first_step()
        {
        }
        // end get_first_step;
        /**
         * Get the current step
         *
         * @return string
         */
        public function get_current_step()
        {
        }
        // end get_current_step;
        /**
         * Includes the template for that particular step; If none is set (false), includes the default template
         *
         * @param string $step The current step.
         * @return void
         */
        public function get_step_view($step)
        {
        }
        // end get_step_view;
        /**
         * Set and return the steps and fields of each step.
         *
         * @since 2.0.0
         *
         * @param boolean $include_hidden If we should return hidden steps as well.
         * @param boolean $filtered If we should apply filters.
         * @return array
         */
        public function get_steps($include_hidden = true, $filtered = true)
        {
        }
        // end get_steps;
        /**
         * Check the transient, and if it does not exists, throw fatal
         *
         * @param bool $die If we should die when there's no transient set.
         * @return array The transient information
         */
        public static function get_transient($die = true)
        {
        }
        // end get_transient;
        /**
         * Update the transient data in out database
         *
         * @param array $transient Array containing the transient data.
         */
        public function update_transient($transient)
        {
        }
        // end update_transient;
        /**
         * Checks transient data to see if the plan step is necessary
         *
         * @return boolean
         */
        public function has_plan_step()
        {
        }
        // end has_plan_step;
        /**
         * Get the link for the next step
         *
         * @param array $params The params.
         * @return string The link for the next step
         */
        public function get_next_step_link($params = array())
        {
        }
        // end get_next_step_link;
        /**
         * Redirects the user to the next step on the signup flow
         *
         * @param array $args Arguments to build the URL.
         * @return void
         */
        public function next_step($args = array())
        {
        }
        // end next_step;
        /**
         * Get the link for the previous step
         *
         * @param array $params The params.
         * @return string The link for the previous step
         */
        public function get_prev_step_link($params = array())
        {
        }
        // end get_prev_step_link;
        /**
         * Sorts the steps.
         *
         * @param array $a Value 1.
         * @param array $b Value to compare against.
         * @return boolean
         */
        public function sort_steps_and_fields($a, $b)
        {
        }
        // end sort_steps_and_fields;
        /**
         * Display the necessary fields for the plan template
         *
         * @since 1.5.0 Takes the frequency parameter
         *
         * @param boolean $current_plan The current plan.
         * @param string  $step The step.
         * @param integer $freq The freq.
         * @return void
         */
        public function form_fields($current_plan = false, $step = 'plan', $freq = false)
        {
        }
        // end form_fields;
        /**
         * Get the primary site URL we will use on the URL previewer, during sign-up
         *
         * @since 1.7.2
         * @return string
         */
        public function get_site_url_for_previewer()
        {
        }
        // end get_site_url_for_previewer;
        /**
         * We pass the following info
         */
        public function plans_save()
        {
        }
        // end plans_save;
        /**
         * Personal Info Settings.
         */
        public function domain_save()
        {
        }
        // end domain_save;
        /**
         * Filters the input variables and sanitizes its contents
         *
         * @param array $post The post.
         * @param array $exclude_list The exclude list.
         * @return array
         */
        public function filter_post_array($post, $exclude_list = false)
        {
        }
        // end filter_post_array;
        /**
         * Helper function to filter based on key.
         *
         * @since 2.0.0
         *
         * @param array    $array The array.
         * @param callable $callback The callback.
         * @return array
         */
        public function array_filter_key(array $array, $callback)
        {
        }
        // end array_filter_key;
        /**
         * Get the active until + trial days, to allow for putting subscription on hold
         *
         * @since 1.5.5
         * @param string  $now Time now.
         * @param integer $trial_days Trial days.
         * @return string
         */
        public static function get_active_until_with_trial($now, $trial_days)
        {
        }
        // end get_active_until_with_trial;
        /**
         * Adds a new Step to the sign-up flow
         *
         * @since 1.4.0
         * @param string  $id The field id.
         * @param integer $order The field order.
         * @param array   $step The step info.
         * @return void
         */
        public function add_signup_step($id, $order, $step)
        {
        }
        // end add_signup_step;
        /**
         * Adds a new field to a step the sign-up flow
         *
         * @since 1.4.0
         * @param string  $step The step name.
         * @param string  $id The field id.
         * @param integer $order The field order.
         * @param array   $field The field.
         * @return void
         */
        public function add_signup_field($step, $id, $order, $field)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Line_Item implements \JsonSerializable
    {
        /**
         * The hash to be used as a base to deal with id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $hash;
        /**
         * The id of the line item.
         *
         * It starts with LN_TYPE.
         * E.g. LN_FEE_#HASH.
         * Should not be set manually.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id;
        /**
         * The line item type.
         *
         * @since 2.0.0
         * @var string
         */
        protected $type = 'product';
        // discount, fee, credit, proration
        /**
         * The product id, if any.
         *
         * @since 2.0.0
         * @var null|int
         */
        protected $product_id;
        /**
         * The discount code id, if any.
         *
         * @since 2.0.0
         * @var null|int
         */
        protected $discount_code_id;
        /**
         * The title of the line item.
         *
         * Usually the name of the product.
         *
         * @since 2.0.0
         * @var string
         */
        protected $title = '';
        /**
         * The description of the line item.
         *
         * @since 2.0.0
         * @var string
         */
        protected $description = '';
        /**
         * Should we apply discounts to this line item?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $discountable = false;
        /**
         * Should we apply taxes to this line item?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $taxable = false;
        /**
         * Is this line item recurring?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $recurring = false;
        /**
         * The billing cycle duration, if recurring.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $duration = 1;
        /**
         * The billing cycle duration unit, if recurring.
         *
         * @since 2.0.0
         * @var string
         */
        protected $duration_unit = 'month';
        /**
         * The number of billing cycles, if recurring.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $billing_cycles = 0;
        /**
         * Quantity of the given product.
         *
         * @since 2.0.0
         * @var float
         */
        protected $quantity = 1;
        /**
         * Unit price of the product.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $unit_price = 0;
        /**
         * Value before taxes, discounts, fees and etc.
         *
         * @since 2.0.0
         * @var float
         */
        protected $subtotal = 0;
        /**
         * The value of the discount being applied.
         *
         * @since 2.0.0
         * @var float
         */
        protected $discount_rate = 0;
        /**
         * The discount type.
         *
         * Percentage or absolute (for flat discounts)
         *
         * @since 2.0.0
         * @var string
         */
        protected $discount_type = 'percentage';
        /**
         * Discount Label.
         *
         * @since 2.0.0
         * @var string
         */
        protected $discount_label = '';
        /**
         * If we should apply discount to renewals.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $apply_discount_to_renewals = true;
        /**
         * The total value in discounts.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $discount_total = 0;
        /**
         * The tax category of the line item.
         *
         * @since 2.0.0
         * @var string
         */
        protected $tax_category = '';
        /**
         * Label of the tax applied.
         *
         * @since 2.0.0
         * @var string
         */
        protected $tax_label = '';
        /**
         * Type of the tax, percentage or absolute.
         *
         * @since 2.0.0
         * @var string
         */
        protected $tax_type = 'percentage';
        /**
         * Tax amount, absolute or percentage.
         *
         * @since 2.0.0
         * @var float
         */
        protected $tax_rate = 0;
        /**
         * If tax are included in the price or not.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $tax_inclusive = false;
        /**
         * If the line item is tax exempt ot not.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $tax_exempt = false;
        /**
         * The amount, in currency, of the tax.
         *
         * @since 2.0.0
         * @var float
         */
        protected $tax_total = 0;
        /**
         * The total amount of the line item.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $total = 0;
        /**
         * Instantiate the class.
         *
         * @since 2.0.0
         *
         * @param array $atts Line item attributes.
         */
        public function __construct($atts)
        {
        }
        // end __construct;
        /**
         * Loops through allowed fields and loads them.
         *
         * @since 2.0.0
         *
         * @param array $data Array of key => values billing address fields.
         * @return void
         */
        public function attributes($data)
        {
        }
        // end attributes;
        /**
         * Get the value of id
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_id()
        {
        }
        // end get_id;
        /**
         * Get the value of type
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Set the value of type.
         *
         * Accepted values: product, fee, credit, discount, prorate.
         *
         * @since 2.0.0
         * @param string $type The line item type.
         * @return void
         */
        public function set_type($type)
        {
        }
        // end set_type;
        /**
         * Get product associated with this line item.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Product
         */
        public function get_product()
        {
        }
        // end get_product;
        /**
         * Set product associated with this line item.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\Models\Product $product Product associated with this line item.
         * @return void
         */
        public function set_product($product)
        {
        }
        // end set_product;
        /**
         * Calculate the taxes value based on the tax_amount and tax_type.
         *
         * @since 2.0.0
         * @param float $sub_total Value to apply taxes to.
         * @return float
         */
        public function calculate_taxes($sub_total)
        {
        }
        // end calculate_taxes;
        /**
         * Calculate the discounts value based on the discount_amount and discount_type.
         *
         * @since 2.0.0
         * @param float $sub_total Value to apply discounts to.
         * @return float
         */
        public function calculate_discounts($sub_total)
        {
        }
        // end calculate_discounts;
        /**
         * Recalculate payment totals.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Checkout\Line_Item
         */
        public function recalculate_totals()
        {
        }
        // end recalculate_totals;
        /**
         * Get quantity of the given product.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_quantity()
        {
        }
        // end get_quantity;
        /**
         * Set quantity of the given product.
         *
         * @since 2.0.0
         * @param float $quantity Quantity of the given product.
         * @return void
         */
        public function set_quantity($quantity)
        {
        }
        // end set_quantity;
        /**
         * Get unit price of the product.
         *
         * @since 2.0.0
         * @return integer
         */
        public function get_unit_price()
        {
        }
        // end get_unit_price;
        /**
         * Set unit price of the product.
         *
         * @since 2.0.0
         * @param integer $unit_price Unit price of the product.
         * @return void
         */
        public function set_unit_price($unit_price)
        {
        }
        // end set_unit_price;
        /**
         * Get tax amount, absolute or percentage.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_tax_rate()
        {
        }
        // end get_tax_rate;
        /**
         * Set tax amount, absolute or percentage.
         *
         * @since 2.0.0
         * @param float $tax_rate Tax amount, absolute or percentage.
         * @return void
         */
        public function set_tax_rate($tax_rate)
        {
        }
        // end set_tax_rate;
        /**
         * Get type of the tax, percentage or absolute.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tax_type()
        {
        }
        // end get_tax_type;
        /**
         * Set type of the tax, percentage or absolute.
         *
         * @since 2.0.0
         * @param string $tax_type Type of the tax, percentage or absolute.
         * @return void
         */
        public function set_tax_type($tax_type)
        {
        }
        // end set_tax_type;
        /**
         * Get if tax are included in the price or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function get_tax_inclusive()
        {
        }
        // end get_tax_inclusive;
        /**
         * Set if tax are included in the price or not.
         *
         * @since 2.0.0
         * @param boolean $tax_inclusive If tax are included in the price or not.
         * @return void
         */
        public function set_tax_inclusive($tax_inclusive)
        {
        }
        // end set_tax_inclusive;
        /**
         * Get if the line item is tax exempt ot not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_tax_exempt()
        {
        }
        // end is_tax_exempt;
        /**
         * Set if the line item is tax exempt ot not.
         *
         * @since 2.0.0
         * @param boolean $tax_exempt If the line item is tax exempt ot not.
         * @return void
         */
        public function set_tax_exempt($tax_exempt)
        {
        }
        // end set_tax_exempt;
        /**
         * Get the amount, in currency, of the tax.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_tax_total()
        {
        }
        // end get_tax_total;
        /**
         * Set the amount, in currency, of the tax.
         *
         * @since 2.0.0
         * @param float $tax_total The amount, in currency, of the tax.
         * @return void
         */
        public function set_tax_total($tax_total)
        {
        }
        // end set_tax_total;
        /**
         * Get the value of total
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_total()
        {
        }
        // end get_total;
        /**
         * Set the value of total.
         *
         * @since 2.0.0
         * @param float $total The total value of the line.
         * @return void
         */
        public function set_total($total)
        {
        }
        // end set_total;
        /**
         * Get the value of recurring.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_recurring()
        {
        }
        // end is_recurring;
        /**
         * Set the value of recurring.
         *
         * @since 2.0.0
         * @param boolean $recurring If this item is recurring or not.
         * @return void
         */
        public function set_recurring($recurring)
        {
        }
        // end set_recurring;
        /**
         * Get value before taxes, discounts, fees and etc.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_subtotal()
        {
        }
        // end get_subtotal;
        /**
         * Set value before taxes, discounts, fees and etc.
         *
         * @since 2.0.0
         * @param float $subtotal Value before taxes, discounts, fees and etc.
         * @return void
         */
        public function set_subtotal($subtotal)
        {
        }
        // end set_subtotal;
        /**
         * Get the value of duration
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_duration()
        {
        }
        // end get_duration;
        /**
         * Set the value of duration.
         *
         * @since 2.0.0
         * @param int $duration The billing cycle duration.
         * @return void
         */
        public function set_duration($duration)
        {
        }
        // end set_duration;
        /**
         * Get the value of duration_unit.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_duration_unit()
        {
        }
        // end get_duration_unit;
        /**
         * Set the value of duration_unit.
         *
         * @since 2.0.0
         * @param string $duration_unit The duration unit.
         * @return void
         */
        public function set_duration_unit($duration_unit)
        {
        }
        // end set_duration_unit;
        /**
         * Get the value of billing_cycles.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_billing_cycles()
        {
        }
        // end get_billing_cycles;
        /**
         * Set the value of billing_cycles.
         *
         * @since 2.0.0
         * @param int $billing_cycles The number of billing cycles.
         * @return void
         */
        public function set_billing_cycles($billing_cycles)
        {
        }
        // end set_billing_cycles;
        /**
         * Get the value of discount_total.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_discount_total()
        {
        }
        // end get_discount_total;
        /**
         * Set the value of discount_total.
         *
         * @since 2.0.0
         * @param float $discount_total The total value of discounts.
         * @return void
         */
        public function set_discount_total($discount_total)
        {
        }
        // end set_discount_total;
        /**
         * Get the value of tax_category.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tax_category()
        {
        }
        // end get_tax_category;
        /**
         * Set the value of tax_category.
         *
         * @since 2.0.0
         * @param string $tax_category The tax category.
         * @return void
         */
        public function set_tax_category($tax_category)
        {
        }
        // end set_tax_category;
        /**
         * Get the value of discountable.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_discountable()
        {
        }
        // end is_discountable;
        /**
         * Set the value of discountable.
         *
         * @since 2.0.0
         * @param boolean $discountable If the line is discountable.
         * @return void
         */
        public function set_discountable($discountable)
        {
        }
        // end set_discountable;
        /**
         * Get the value of taxable.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_taxable()
        {
        }
        // end is_taxable;
        /**
         * Set the value of taxable.
         *
         * @since 2.0.0
         * @param boolean $taxable If the item is taxable or not.
         * @return void
         */
        public function set_taxable($taxable)
        {
        }
        // end set_taxable;
        /**
         * Get the value of discount_rate.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_discount_rate()
        {
        }
        // end get_discount_rate;
        /**
         * Set the value of discount_rate.
         *
         * @since 2.0.0
         * @param float $discount_rate The discount amount (flat or percentage).
         * @return void
         */
        public function set_discount_rate($discount_rate)
        {
        }
        // end set_discount_rate;
        /**
         * Get the value of discount_type.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_discount_type()
        {
        }
        // end get_discount_type;
        /**
         * Set the value of discount_type.
         *
         * @since 2.0.0
         * @param string $discount_type The type of discount, percentage or absolute.
         * @return void
         */
        public function set_discount_type($discount_type)
        {
        }
        // end set_discount_type;
        /**
         * Get discount Label.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_discount_label()
        {
        }
        // end get_discount_label;
        /**
         * Set discount Label.
         *
         * @since 2.0.0
         * @param string $discount_label Discount Label.
         * @return void
         */
        public function set_discount_label($discount_label)
        {
        }
        // end set_discount_label;
        /**
         * Get if we should apply discount to renewals.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function should_apply_discount_to_renewals()
        {
        }
        // end should_apply_discount_to_renewals;
        /**
         * Set if we should apply discount to renewals.
         *
         * @since 2.0.0
         * @param boolean $apply_discount_to_renewals If we should apply discount to renewals.
         * @return void
         */
        public function set_apply_discount_to_renewals($apply_discount_to_renewals)
        {
        }
        // end set_apply_discount_to_renewals;
        /**
         * Get the value of product_id.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_product_id()
        {
        }
        // end get_product_id;
        /**
         * Set the value of product_id.
         *
         * @since 2.0.0
         * @param int $product_id The product id.
         * @return void
         */
        public function set_product_id($product_id)
        {
        }
        // end set_product_id;
        /**
         * Get the value of title
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Set the value of title.
         *
         * @since 2.0.0
         * @param string $title The line item title.
         * @return void
         */
        public function set_title($title)
        {
        }
        // end set_title;
        /**
         * Get the value of description.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Set the value of description.
         *
         * @since 2.0.0
         * @param string $description The line item description.
         * @return void
         */
        public function set_description($description)
        {
        }
        // end set_description;
        /**
         * Get label of the tax applied.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tax_label()
        {
        }
        // end get_tax_label;
        /**
         * Set label of the tax applied.
         *
         * @since 2.0.0
         * @param string $tax_label Label of the tax applied.
         * @return void
         */
        public function set_tax_label($tax_label)
        {
        }
        // end set_tax_label;
        /**
         * Returns the amount recurring in a human-friendly way.
         *
         * @since 2.0.8
         * @return string
         */
        public function get_recurring_description()
        {
        }
        // end get_recurring_description;
        /**
         * Converts the line item to an array.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_array()
        {
        }
        // end to_array;
        /**
         * Implements our on json_decode version of this object. Useful for use in vue.js.
         *
         * @since 2.0.0
         * @return array
         */
        public function jsonSerialize()
        {
        }
        // end jsonSerialize;
        /**
         * Queries the database for Line Items across payments.
         *
         * @since 2.0.0
         *
         * @param array $query Query arguments.
         * @return array
         */
        public static function get_line_items($query = array())
        {
        }
    }
}
namespace WP_Ultimo\Checkout\Signup_Fields {
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    abstract class Base_Signup_Field
    {
        /**
         * Holds the field attributes.
         *
         * @since 2.0.0
         * @var array
         */
        protected $attributes;
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public abstract function get_type();
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public abstract function is_required();
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public abstract function get_title();
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public abstract function get_description();
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        abstract function get_tooltip();
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public abstract function get_icon();
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public abstract function get_fields();
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public abstract function to_fields_array($attributes);
        /**
         * Set's if a field should not be available on the form creation.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_hidden()
        {
        }
        // end is_hidden;
        /**
         * Defines if this field/element is related to site creation or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_site_field()
        {
        }
        // end is_site_field;
        /**
         * Defines if this field/element is related to user/customer creation or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_user_field()
        {
        }
        // end is_user_field;
        /**
         * Returns the field as an array that the form builder can understand.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_field_as_type_option()
        {
        }
        // end get_field_as_type_option;
        /**
         * Modifies the HTML attr array before sending it over to the form.
         *
         * @since 2.0.0
         *
         * @param array  $html_attr The current attributes.
         * @param string $field_name Field name.
         * @return array
         */
        public function get_editor_fields_html_attr($html_attr, $field_name)
        {
        }
        // end get_editor_fields_html_attr;
        /**
         * Get the tabs available for this field.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_tabs()
        {
        }
        // end get_tabs;
        /**
         * Gets the pre-filled value for the field.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_value()
        {
        }
        // end get_value;
        /**
         * Calculate the style attributes for the field.
         *
         * @since 2.0.4
         * @return string
         */
        public function calculate_style_attr()
        {
        }
        // end calculate_style_attr;
        /**
         * Sets the config values for the current field.
         *
         * @since 2.0.0
         *
         * @param array $attributes Array containing settings for the field.
         * @return void
         */
        public function set_attributes($attributes)
        {
        }
        // end set_attributes;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Default values for the editor fields.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * Returns the editor fields.
         *
         * @since 2.0.0
         *
         * @param array $attributes The list of attributes of the field.
         * @return array
         */
        public function get_editor_fields($attributes = array())
        {
        }
        // end get_editor_fields;
        /**
         * Returns a list of all the attributes.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_all_attributes()
        {
        }
        // end get_all_attributes;
        /**
         * Treat the attributes array to avoid reaching the input var limits.
         *
         * @since 2.0.0
         *
         * @param array $attributes The attributes.
         * @return array
         */
        public function reduce_attributes($attributes)
        {
        }
        // end reduce_attributes;
        /**
         * List of all the default fields available.
         *
         * @since 2.0.0
         * @return array
         */
        public static function fields_list()
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Billing_Address extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Is this a user-related field?
         *
         * If this is set to true, this field will be hidden
         * when the user is already logged in.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_user_field()
        {
        }
        // end is_user_field;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Checkbox extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Is this a user-related field?
         *
         * If this is set to true, this field will be hidden
         * when the user is already logged in.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_user_field()
        {
        }
        // end is_user_field;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Color extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Discount_Code extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Email extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Is this a user-related field?
         *
         * If this is set to true, this field will be hidden
         * when the user is already logged in.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_user_field()
        {
        }
        // end is_user_field;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
        // end to_fields_array;
        /**
         * Renders the login message for users that are not logged in.
         *
         * @since 2.0.0
         * @return string
         */
        public function render_existing_customer_message()
        {
        }
        // end render_existing_customer_message;
        /**
         * Renders the login message for users that are not logged in.
         *
         * @since 2.0.0
         * @return string
         */
        public function render_not_you_customer_message()
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Hidden extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Gets the pre-filled value for the field.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_value()
        {
        }
        // end get_value;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Order_Bump extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of available pricing table templates.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_templates()
        {
        }
        // end get_templates;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Order_Summary extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of available pricing table templates.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_templates()
        {
        }
        // end get_templates;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Password extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Is this a user-related field?
         *
         * If this is set to true, this field will be hidden
         * when the user is already logged in.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_user_field()
        {
        }
        // end is_user_field;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Payment extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Period_Selection extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of available pricing table templates.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_template_options()
        {
        }
        // end get_template_options;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Pricing_Table extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of available pricing table templates.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_pricing_table_templates()
        {
        }
        // end get_pricing_table_templates;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Products extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Select extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Shortcode extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Site_Title extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Defines if this field/element is related to site creation or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_site_field()
        {
        }
        // end is_site_field;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Site_Url extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Defines if this field/element is related to site creation or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_site_field()
        {
        }
        // end is_site_field;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the list of available pricing table templates.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_url_preview_templates()
        {
        }
        // end get_url_preview_templates;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
        // end to_fields_array;
        /**
         * Get the domain options.
         *
         * @since 2.0.0
         *
         * @param string $domain_options The list of domains, in string format.
         * @return array
         */
        protected function get_domain_options($domain_options)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Steps extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of available pricing table templates.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_templates()
        {
        }
        // end get_templates;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Submit_Button extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Template_Selection extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of available pricing table templates.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_template_selection_templates()
        {
        }
        // end get_template_selection_templates;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Treat the attributes array to avoid reaching the input var limits.
         *
         * @since 2.0.0
         *
         * @param array $attributes The attributes.
         * @return array
         */
        public function reduce_attributes($attributes)
        {
        }
        // end reduce_attributes;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Terms_Of_Use extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Is this a user-related field?
         *
         * If this is set to true, this field will be hidden
         * when the user is already logged in.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_user_field()
        {
        }
        // end is_user_field;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Text extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
    /**
     * Creates an cart with the parameters of the purchase being placed.
     *
     * @package WP_Ultimo
     * @subpackage Checkout
     * @since 2.0.0
     */
    class Signup_Field_Username extends \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
    {
        /**
         * Returns the type of the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Returns if this field should be present on the checkout flow or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_required()
        {
        }
        // end is_required;
        /**
         * Is this a user-related field?
         *
         * If this is set to true, this field will be hidden
         * when the user is already logged in.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_user_field()
        {
        }
        // end is_user_field;
        /**
         * Requires the title of the field/element type.
         *
         * This is used on the Field/Element selection screen.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the description of the field/element.
         *
         * This is used as the title attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the tooltip of the field/element.
         *
         * This is used as the tooltip attribute of the selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tooltip()
        {
        }
        // end get_tooltip;
        /**
         * Returns the icon to be used on the selector.
         *
         * Can be either a dashicon class or a wu-dashicon class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon()
        {
        }
        // end get_icon;
        /**
         * Returns the default values for the field-elements.
         *
         * This is passed through a wp_parse_args before we send the values
         * to the method that returns the actual fields for the checkout form.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * List of keys of the default fields we want to display on the builder.
         *
         * @since 2.0.0
         * @return array
         */
        public function default_fields()
        {
        }
        // end default_fields;
        /**
         * If you want to force a particular attribute to a value, declare it here.
         *
         * @since 2.0.0
         * @return array
         */
        public function force_attributes()
        {
        }
        // end force_attributes;
        /**
         * Returns the list of additional fields specific to this type.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the field/element actual field array to be used on the checkout form.
         *
         * @since 2.0.0
         *
         * @param array $attributes Attributes saved on the editor form.
         * @return array An array of fields, not the field itself.
         */
        public function to_fields_array($attributes)
        {
        }
    }
}
namespace WP_Ultimo\Checkout\Signup_Fields\Field_Templates {
    /**
     * Base Field Template
     *
     * @since 2.0.0
     */
    class Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id;
        /**
         * Field template attributes.
         *
         * @since 2.0.0
         * @var array
         */
        protected $attributes;
        /**
         * Field Template Constructor
         *
         * @since 2.0.0
         *
         * @param array $attributes The attributes passed to the field.
         */
        public function __construct($attributes = array())
        {
        }
        // end __construct;
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview image of the field template.
         *
         * The URL of the image preview.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
        // end output;
        /**
         * Renders the content.
         *
         * This method should not be override.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return string
         */
        public function render($attributes)
        {
        }
        // end render;
        /**
         * Displays the content on the checkout form as a wrapper.
         *
         * This method should not be override.
         *
         * @since 2.0.0
         *
         * @param array  $attributes The field template attributes.
         * @param object $signup_field The base field.
         * @return string
         */
        public function render_container($attributes, $signup_field = false)
        {
        }
    }
}
namespace WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Order_Bump {
    /**
     * Template Selection Simple
     *
     * @since 2.0.0
     */
    class Simple_Order_Bump_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'order-bump/simple';
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview of the field template.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
}
namespace WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Order_Summary {
    /**
     * Order Summary Clean
     *
     * @since 2.0.0
     */
    class Clean_Order_Summary_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'order-summary/simple';
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview of the field template.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
}
namespace WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Period_Selection {
    /**
     * Template Selection Clean
     *
     * @since 2.0.0
     */
    class Clean_Period_Selection_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'period-selection/clean';
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview image of the field template.
         *
         * The URL of the image preview.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
    /**
     * Template Selection Clean
     *
     * @since 2.0.0
     */
    class Legacy_Period_Selection_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'period-selection/legacy';
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview image of the field template.
         *
         * The URL of the image preview.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
}
namespace WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Pricing_Table {
    /**
     * Template Selection Clean
     *
     * @since 2.0.0
     */
    class Legacy_Pricing_Table_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'pricing-table/legacy';
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview image of the field template.
         *
         * The URL of the image preview.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
    /**
     * Base Field Template
     *
     * @since 2.0.0
     */
    class List_Pricing_Table_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'pricing-table/list';
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview image of the field template.
         *
         * The URL of the image preview.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
}
namespace WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Steps {
    /**
     * Template Selection Clean
     *
     * @since 2.0.0
     */
    class Clean_Steps_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'steps/clean';
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview of the field template.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
    /**
     * Template Selection Clean
     *
     * @since 2.0.0
     */
    class Legacy_Steps_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'steps/legacy';
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview of the field template.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
    /**
     * Template Selection Clean
     *
     * @since 2.0.0
     */
    class Minimal_Steps_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'steps/minimal';
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview of the field template.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
}
namespace WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Template_Selection {
    /**
     * Template Selection Clean
     *
     * @since 2.0.0
     */
    class Clean_Template_Selection_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'template-selection/clean';
        /**
         * The render type for the template.
         *
         * Field templates can have two different render types, ajax and dynamic.
         * If ajax is selected, when we detect a change in the billing period and other
         * sensitive info, an ajax request is made to fetch the new pricing table HTML
         * markup.
         *
         * If dynamic is selected, nothing is done as the template can handle
         * reactive updates natively (using Vue.js)
         *
         * In terms of performance, dynamic is preferred, but ajax should
         * work just fine.
         *
         * @since 2.0.0
         * @return string Either ajax or dynamic
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview of the field template.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
    /**
     * Legacy Field Template Selector
     *
     * @since 2.0.0
     */
    class Legacy_Template_Selection_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'template-selection/legacy';
        /**
         * Get render type for the template.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview image of the field template.
         *
         * The URL of the image preview.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
    /**
     * Template Selection Minimal
     *
     * @since 2.0.0
     */
    class Minimal_Template_Selection_Field_Template extends \WP_Ultimo\Checkout\Signup_Fields\Field_Templates\Base_Field_Template
    {
        /**
         * Field template id.
         *
         * Needs to take the following format: field-type/id.
         * e.g. pricing-table/clean.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'template-selection/minimal';
        /**
         * Get render type for the template.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_render_type()
        {
        }
        // end get_render_type;
        /**
         * The title of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the field template.
         *
         * This is used on the template selector.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The preview of the field template.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview()
        {
        }
        // end get_preview;
        /**
         * The content of the template.
         *
         * @since 2.0.0
         *
         * @param array $attributes The field template attributes.
         * @return void
         */
        public function output($attributes)
        {
        }
    }
}
namespace WP_Ultimo {
    /**
     * Handles Admin Notices.
     *
     * @since 2.0.0
     */
    class Admin_Notices
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Holds the notices added by WP Ultimo.
         *
         * @since 2.0.0
         * @var array
         */
        protected $notices = array('admin' => array(), 'network-admin' => array(), 'user' => array());
        /**
         * Loads the hooks we need for dismissing notices
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Get the notices the current user has dismissed
         *
         * @since 2.0.0
         * @return array
         */
        public function get_dismissed_notices()
        {
        }
        // end get_dismissed_notices;
        /**
         * Adds a new admin notice
         *
         * An Admin Notice is a massage displayed at the top of the admin panel, alerting
         * users of something wrong, successful or informational.
         *
         * @since 2.0.0
         *
         * @param string  $notice The message to display on the notice block. Supports HTML.
         * @param string  $type Type of notice. Can be info, warning, error or success.
         * @param string  $panel Panel on which to show this notice. Can be network-admin, admin or user.
         * @param boolean $dismissible_key Key to keep track if this notice was already displayed and dismissed.
         * @param array   $actions List of buttons to add to the notification block.
         * @return void
         */
        public function add($notice, $type = 'success', $panel = 'admin', $dismissible_key = false, $actions = array())
        {
        }
        // end add;
        /**
         * Returns the list of notices added for a particular panel.
         *
         * @since 2.0.0
         *
         * @param string  $panel Panel to retrieve the notices. Defaults to admin.
         * @param boolean $filter Wether or not to removed notices already dismissed or not. Defaults to true.
         * @return array
         */
        public function get_notices($panel = 'admin', $filter = true)
        {
        }
        // end get_notices;
        /**
         * Enqueues the JavaScript code that sends the dismiss call to the ajax endpoint.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        // end enqueue_scripts;
        /**
         * Gets the current panel the user is viewing
         *
         * @since 2.0.0
         * @return string
         */
        public function get_current_panel()
        {
        }
        // end get_current_panel;
        /**
         * Retrieves the admin notices for the current panel and displays them.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_notices()
        {
        }
        // end display_notices;
        /**
         * Adds an ajax endpoint to dismiss admin notices
         *
         * @since 2.0.0
         * @return void
         */
        public function ajax_dismiss_admin_notices()
        {
        }
    }
    /**
     * Adds a Admin Themes Compatibility for WP Ultimo.
     *
     * @since 1.9.14
     */
    class Admin_Themes_Compatibility
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Sets up the listeners.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Body tag classes. Fired by `body_class` filter.
         *
         * @since 2.0.0
         *
         * @param array $classes Body Classes.
         * @return array
         */
        public function add_body_classes($classes)
        {
        }
        // end add_body_classes;
        /**
         * Get list of Admin Themes
         *
         * @since 2.0.0
         * @return array
         */
        public static function get_admin_themes()
        {
        }
    }
    /**
     * Adds a lighter ajax option to WP Ultimo.
     *
     * @since 1.9.14
     */
    class Ajax
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Sets up the listeners.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Reverts the name of the table being processed.
         *
         * @since 2.0.0
         *
         * @param string $table_id The ID of the table in the format "line_item_list_table".
         * @return string
         */
        private function get_table_class_name($table_id)
        {
        }
        // end get_table_class_name;
        /**
         * Serves the pagination and search results of a list table ajax query.
         *
         * @since 2.0.0
         * @return void
         */
        public function refresh_list_table()
        {
        }
        // end refresh_list_table;
        /**
         * Search models using our ajax endpoint.
         *
         * @since 2.0.0
         * @return void
         */
        public function search_models()
        {
        }
        // end search_models;
        /**
         * Search all models for Jumper.
         *
         * @since 2.0.0
         * @return void
         */
        public function search_all_models()
        {
        }
        // end search_all_models;
        /**
         * Search for WP Ultimo settings to help customers find them.
         *
         * @since 2.0.0
         *
         * @param array $query Query arguments.
         * @return array
         */
        public function search_wp_ultimo_setting($query)
        {
        }
        // end search_wp_ultimo_setting;
        /**
         * Handles the special case of searching native WP users.
         *
         * @since 2.0.0
         *
         * @param array $query Query arguments.
         * @return array
         */
        public function search_wordpress_users($query)
        {
        }
        // end search_wordpress_users;
        /**
         * Adds the selectize templates to the admin footer.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_selectize_templates()
        {
        }
    }
    /**
     * Adds a lighter ajax option to WP Ultimo.
     *
     * @since 1.9.14
     */
    class API
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Namespace of our API endpoints
         *
         * @since 1.7.4
         * @var string
         */
        private $namespace = 'wu';
        /**
         * Version fo the API, this is used to build the API URL
         *
         * @since 1.7.4
         * @var string
         */
        private $api_version = 'v2';
        /**
         * Initiates the API hooks
         *
         * @since 1.7.4
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Allow admins to refresh their API credentials.
         *
         * @since 1.7.4
         * @return void
         */
        public function refresh_API_credentials()
        {
        }
        // end refresh_API_credentials;
        /**
         * Add the admin interface to create new webhooks
         *
         * @since 1.7.4
         */
        public function add_settings()
        {
        }
        // end add_settings;
        /**
         * Returns the namespace of our API endpoints.
         *
         * @since 1.7.4
         * @return string
         */
        public function get_namespace()
        {
        }
        // end get_namespace;
        /**
         * Returns the credentials.
         *
         * @since 1.7.4
         * @return array
         */
        public function get_auth()
        {
        }
        // end get_auth;
        /**
         * Validate a pair of API credentials
         *
         * @since 1.7.4
         * @param string $api_key The API key.
         * @param string $api_secret The API secret.
         * @return boolean
         */
        public function validate_credentials($api_key, $api_secret)
        {
        }
        // end validate_credentials;
        /**
         * Check if we can log api calls.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function should_log_api_calls()
        {
        }
        // end should_log_api_calls;
        /**
         * Checks if we should log api calls or not, and if we should, log them.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         */
        public function maybe_log_api_call($request)
        {
        }
        // end maybe_log_api_call;
        /**
         * Log api errors.
         *
         * @since 2.0.0
         *
         * @param mixed            $result The result of the REST API call.
         * @param string|array     $handler The callback.
         * @param \WP_REST_Request $request The request object.
         * @return mixed
         */
        public function log_api_errors($result, $handler, $request)
        {
        }
        // end log_api_errors;
        /**
         * Tries to validate the API key and secret from the request
         *
         * @since 1.7.4
         * @param \WP_REST_Request $request WP Request Object.
         * @return boolean
         */
        public function check_authorization($request)
        {
        }
        // end check_authorization;
        /**
         * Checks if the API routes are available or not, via the settings.
         *
         * @since 1.7.4
         * @return boolean
         */
        public function is_api_enabled()
        {
        }
        // end is_api_enabled;
        /**
         * Register the API routes.
         *
         * @since 1.7.4
         * @return void
         */
        public function register_routes()
        {
        }
        // end register_routes;
        /**
         * Dummy endpoint to low services to test the authentication method being used.
         *
         * @since 1.7.4
         *
         * @param \WP_REST_Request $request WP Request Object.
         * @return void
         */
        public function auth($request)
        {
        }
    }
    /**
     * WP Ultimo Async Calls implementation.
     *
     * @since 2.0.7
     */
    class Async_Calls
    {
        /**
         * Keeps a registry of the listeners.
         *
         * @var array
         */
        static $registry = array();
        /**
         * Registers a new listener.
         *
         * @since 2.0.7
         *
         * @param string   $id The id of the listener.
         * @param callable $callable A callback to be run.
         * @param mixed    ...$args Arguments to be passed to the callback.
         * @return void
         */
        public static function register_listener($id, $callable, ...$args)
        {
        }
        // end register_listener;
        /**
         * Install the registered listeners.
         *
         * @since 2.0.7
         * @return void
         */
        public static function install_listeners()
        {
        }
        // end install_listeners;
        /**
         * Build the base URL for the listener calls.
         *
         * @since 2.0.7
         *
         * @param string $id The listener id.
         * @param array  $args The additional args passed to the URL.
         * @return string
         */
        public static function build_base_url($id, $args)
        {
        }
        // end build_base_url;
        /**
         * Build the final URL to be called.
         *
         * @since 2.0.7
         *
         * @param string $id The listener id.
         * @param int    $total The total number of records.
         * @param int    $chunk_size The chunk size.
         * @param array  $args Additional arguments to be passed.
         * @return array The list of paginates URLs to call.
         */
        public static function build_url_list($id, $total, $chunk_size, $args = array())
        {
        }
        // end build_url_list;
        /**
         * Builds and returns the client that will handle the calls.
         *
         * @since 2.0.7
         * @return \WP_Ultimo\Dependencies\Amp\Http\Client\HttpClient;
         */
        public static function get_client()
        {
        }
        // end get_client;
        /**
         * Run the parallel queue after everything is correctly enqueued.
         *
         * @since 2.0.7
         *
         * @param string  $id The listener id.
         * @param array   $args Additional arguments to be passed.
         * @param int     $total The total number of records.
         * @param integer $chunk_size The chunk size to use.
         * @param integer $parallel_threads The number of parallel threads to be run.
         * @return true|\WP_Error
         */
        public static function run($id, $args, $total, $chunk_size = 10, $parallel_threads = 3)
        {
        }
        // end run;
        /**
         * Condense multiple results into one single result.
         *
         * @since 2.0.7
         *
         * @param array $results The different results returned by multiple calls.
         * @return true|\WP_Error
         */
        public static function condense_results($results)
        {
        }
    }
    /**
     * Auto-loads class files inside the inc folder.
     *
     * @since 2.0.0
     */
    class Autoloader
    {
        /**
         * Makes sure we are only using one instance of the class
         *
         * @var object
         */
        public static $instance;
        /**
         * Static-only class.
         */
        private function __construct()
        {
        }
        // end __construct;
        /**
         * Initializes our custom autoloader
         *
         * @since 2.0.0
         * @return void
         */
        public static function init()
        {
        }
        // end init;
        /**
         * Checks for unit tests and WP_ULTIMO_DEBUG.
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function is_debug()
        {
        }
    }
    /**
     * Manages WP Ultimo Core Updates.
     *
     * @since 2.0.0
     */
    class Core_Updates
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Initializes the class.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Checks if a WP Ultimo core update is being performed and triggers an action if that's the case.
         *
         * @since 2.0.0
         *
         * @param \WP_Upgrader $u The upgrader instance.
         * @param array        $i Upgrade info.
         * @return void
         */
        public function maybe_add_core_update_hooks($u, $i)
        {
        }
    }
    /**
     * Adds the recurring events we use to
     * check if memberships should be manually
     * renewed, marked as expired, etc.
     *
     * @since 2.0.0
     */
    class Cron
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Creates the recurring schedules for WP Ultimo.
         *
         * By default, we create a hourly, daily, and monthly schedules.
         *
         * @since 2.0.0
         * @return void
         */
        public function create_schedules()
        {
        }
        // end create_schedules;
        /**
         * Creates the default membership checking schedule.
         *
         * By default, checks every hour.
         *
         * @see wu_schedule_membership_check_interval
         *
         * @since 2.0.0
         * @return void
         */
        public function schedule_membership_check()
        {
        }
        // end schedule_membership_check;
        /**
         * Checks if non-auto-renewable memberships need work.
         *
         * This creates pending payments, emails the link to pay
         * and marks the membership as on-hold.
         *
         * @since 2.0.0
         * @return void
         */
        public function membership_renewal_check()
        {
        }
        // end membership_renewal_check;
        /**
         * Checks if trialing memberships need work.
         *
         * This creates pending payments, emails the link to pay
         * and marks the membership as on-hold.
         *
         * @since 2.0.0
         * @return void
         */
        public function membership_trial_check()
        {
        }
        // end membership_trial_check;
        /**
         * Creates the pending payment for a renewing membership.
         *
         * @since 2.0.0
         *
         * @param int  $membership_id The membership id.
         * @param bool $trial If the membership was in a trial state before.
         * @return \WP_Error|true
         */
        public function async_create_renewal_payment($membership_id, $trial = false)
        {
        }
        // end async_create_renewal_payment;
        /**
         * Checks if any memberships need to be marked as expired.
         *
         * @since 2.0.0
         * @return void
         */
        public function membership_expired_check()
        {
        }
        // end membership_expired_check;
        /**
         * Marks expired memberships as such.
         *
         * @since 2.0.0
         *
         * @param int $membership_id The membership ID.
         * @return \WP_Error|true
         */
        public function async_mark_membership_as_expired($membership_id)
        {
        }
    }
    /**
     * WP Ultimo class to hold current objects
     *
     * @since 2.0.0
     */
    class Current
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * The current site instance.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Site
         */
        protected $site;
        /**
         * The current customer instance.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Customer
         */
        protected $customer;
        /**
         * Wether or not the site was set via request.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $site_set_via_request = false;
        /**
         * Wether or not the customer was set via request.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $customer_set_via_request = false;
        /**
         * Called when the singleton is first initialized.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Flush rewrite rules to make sure any newly added ones get installed on update.
         *
         * @since 2.0.0
         * @return void
         */
        public function flush_rewrite_rules_on_update()
        {
        }
        // end flush_rewrite_rules_on_update;
        /**
         * Adds a new rewrite rule to allow for pretty links.
         *
         * Managing a site would be done via /account/site/{$id}, for example.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_rewrite_rules()
        {
        }
        // end add_rewrite_rules;
        /**
         * Adds the necessary query vars to support pretty links.
         *
         * @since 2.0.0
         *
         * @param array $query_vars The WP_Query object.
         * @return \WP_Query
         */
        public function add_query_vars($query_vars)
        {
        }
        // end add_query_vars;
        /**
         * List of URL keys to set the current objects.
         *
         * @since 2.0.0
         * @param string $type The type of object to get.
         * @return string
         */
        public static function param_key($type = 'site')
        {
        }
        // end param_key;
        /**
         * Returns the URL to manage a site/customer on the front-end or back end.
         *
         * @since 2.0.0
         *
         * @param int    $id The site ID.
         * @param string $type The type. Can be either site or customer.
         * @return string
         */
        public static function get_manage_url($id, $type = 'site')
        {
        }
        // end get_manage_url;
        /**
         * Loads the current site and makes it available.
         *
         * @since 2.0.0
         * @return void
         */
        public function load_currents()
        {
        }
        // end load_currents;
        /**
         * Get the current site instance.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Site
         */
        public function get_site()
        {
        }
        // end get_site;
        /**
         * Set the current site instance.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\Models\Site $site The current site instance.
         * @return void
         */
        public function set_site($site)
        {
        }
        // end set_site;
        /**
         * Get wether or not the site was set via request.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_site_set_via_request()
        {
        }
        // end is_site_set_via_request;
        /**
         * Get the current customer instance.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Customer
         */
        public function get_customer()
        {
        }
        // end get_customer;
        /**
         * Set the current customer instance.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\Models\Customer $customer The current customer instance.
         * @return void
         */
        public function set_customer($customer)
        {
        }
    }
    /**
     * WP Ultimo Dashboard Statistics
     *
     * @since 2.0.0
     */
    class Dashboard_Statistics
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * The initial date of the statistics.
         *
         * @var string
         */
        protected $start_date;
        /**
         * The final date of the statistics.
         *
         * @var string
         */
        protected $end_date;
        /**
         * What kind of information you need.
         *
         * @var array
         */
        protected $types = array();
        /**
         * Loads the hooks we need for dismissing notices
         *
         * @since 2.0.0
         *
         * @param array $args With the start_date, end_date and the data type functions.
         * @return void.
         */
        public function __construct($args = array())
        {
        }
        // end __construct;
        /**
         * Runs on singleton instantiation.
         *
         * @since 2.0.0
         * @return void.
         */
        public function init()
        {
        }
        // end init;
        /**
         * Main function to call the get data functions based on the array of types.
         *
         * @since 2.0.0
         * @return array With all the data requested.
         */
        public function statistics_data()
        {
        }
        // end statistics_data;
        /**
         * Get data of all completed and refunded payments to show in the main graph.
         *
         * @since 2.0.0
         * @return array With total gross data.
         */
        public function get_data_mrr_growth()
        {
        }
    }
    /**
     * WP Ultimo Dashboard Widgets
     *
     * @since 2.0.0
     */
    class Dashboard_Widgets
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Network Dashboard Screen Id
         *
         * @since 2.0.0
         * @var string
         */
        public $screen_id = 'dashboard-network';
        /**
         * Undocumented variable
         *
         * @since 2.0.0
         * @var array
         */
        public $core_metaboxes = array();
        /**
         * Runs on singleton instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Enqueues the JavaScript code that sends the dismiss call to the ajax endpoint.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        // end enqueue_scripts;
        /**
         * Register the widgets
         *
         * @since 2.0.0
         * @return void
         */
        public function register_network_widgets()
        {
        }
        // end register_network_widgets;
        /**
         * Adds the customer's site's dashboard widgets.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_widgets()
        {
        }
        // end register_widgets;
        /**
         * Widget First Steps Output.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function output_widget_first_steps()
        {
        }
        // end output_widget_first_steps;
        /**
         * Widget News Output.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function output_widget_news()
        {
        }
        // end output_widget_news;
        /**
         * Widget Activity Stream Output.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function output_widget_activity_stream()
        {
        }
        // end output_widget_activity_stream;
        /**
         * Widget Summary Output
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function output_widget_summary()
        {
        }
        // end output_widget_summary;
        /**
         * Process Ajax Filters for rss.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_ajax_fetch_rss()
        {
        }
        // end process_ajax_fetch_rss;
        /**
         * Process Ajax Filters for rss.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_ajax_fetch_events()
        {
        }
        // end process_ajax_fetch_events;
        /**
         * Handle ajax endpoint to generate table CSV.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_table_csv()
        {
        }
        // end handle_table_csv;
        /**
         * Get the registered widgets.
         *
         * @since 2.0.0
         * @return array
         */
        public static function get_registered_dashboard_widgets()
        {
        }
    }
    /**
     * This helper class allow us to keep our external link references
     * in one place for better control; Links are also filterable;
     *
     * @since 2.0.0
     */
    class Documentation
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Holds the links so we can retrieve them later
         *
         * @var array
         */
        protected $links;
        /**
         * Holds the default link
         *
         * @var string
         */
        protected $default_link = 'https://help.wpultimo.com/';
        /**
         * Set the default links.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Checks if a link exists.
         *
         * @since 2.0.0
         *
         * @param  string $slug The slug of the link to be returned.
         * @return boolean
         */
        public function has_link($slug)
        {
        }
        // end has_link;
        /**
         * Retrieves a link registered
         *
         * @since 1.7.0
         * @param  string $slug The slug of the link to be returned.
         * @param  bool   $return_default If we should return a default value.
         * @return string
         */
        public function get_link($slug, $return_default = true)
        {
        }
        // end get_link;
        /**
         * Add a new link to the list of links available for reference
         *
         * @since 2.0.0
         * @param string $slug The slug of a new link.
         * @param string $link The documentation link.
         * @return void
         */
        public function register_link($slug, $link)
        {
        }
    }
    /**
     * Handles Domain Mapping in WP Ultimo.
     *
     * @since 2.0.0
     */
    class Domain_Mapping
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Keeps a copy of the current mapping.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Domain
         */
        public $current_mapping = null;
        /**
         * Keeps a copy of the original URL.
         *
         * @since 2.0.0
         * @var string
         */
        public $original_url = null;
        /**
         * Runs on singleton instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Check if we should skip checks before running mapping functions.
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function should_skip_checks()
        {
        }
        // end should_skip_checks;
        /**
         * Run the checks to make sure the requirements for Domain mapping are in place and execute it.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_startup()
        {
        }
        // end maybe_startup;
        /**
         * Actual handles domain mapping functionality.
         *
         * @since 2.0.0
         * @return void
         */
        public function startup()
        {
        }
        // end startup;
        /**
         * Checks if an origin is a mapped domain.
         *
         * If that's the case, we should always allow that origin.
         *
         * @since 2.0.0
         *
         * @param string $origin The origin passed.
         * @return string
         */
        public function add_mapped_domains_as_allowed_origins($origin)
        {
        }
        // end add_mapped_domains_as_allowed_origins;
        /**
         * Fixes the SSO target site in cases of domain mapping.
         *
         * @since 2.0.0
         *
         * @param \WP_Site $target_site The current target site.
         * @param string   $domain The domain being searched.
         * @return \WP_Site
         */
        public function fix_sso_target_site($target_site, $domain)
        {
        }
        // end fix_sso_target_site;
        /**
         * Returns both the naked and www. version of the given domain
         *
         * @since 2.0.0
         *
         * @param string $domain Domain to get the naked and www. versions to.
         * @return array
         */
        public function get_www_and_nowww_versions($domain)
        {
        }
        // end get_www_and_nowww_versions;
        /**
         * Checks if we have a site associated with the domain being accessed
         *
         * This method tries to find a site on the network that has a mapping related to the current
         * domain being accessed. This uses the default WordPress mapping functionality, added on 4.5.
         *
         * @since 2.0.0
         *
         * @param WP_Site|false $site Site object being searched by path.
         * @param string        $domain Domain to search for.
         * @return WP_Site|false
         */
        public function check_domain_mapping($site, $domain)
        {
        }
        // end check_domain_mapping;
        /**
         * Clear mappings for a site when it's deleted
         *
         * @param WP_Site $site Site being deleted.
         */
        public function clear_mappings_on_delete($site)
        {
        }
        // end clear_mappings_on_delete;
        /**
         * Register filters for URLs, if we've mapped
         *
         * @since 2.0.0
         * @return void
         */
        public function register_mapped_filters()
        {
        }
        // end register_mapped_filters;
        /**
         * Apply the replace URL to URL filters provided by other plugins.
         *
         * @since 2.0.0
         *
         * @param string|array $hooks List of hooks to apply the callback to.
         * @return void
         */
        public static function apply_mapping_to_url($hooks)
        {
        }
        // end apply_mapping_to_url;
        /**
         * Replaces the URL.
         *
         * @since 2.0.0
         *
         * @param string                        $url URL to replace.
         * @param null|\WP_Ultimo\Models\Domain $current_mapping The current mapping.
         * @return string
         */
        public function replace_url($url, $current_mapping = null)
        {
        }
        // end replace_url;
        /**
         * Mangle the home URL to give our primary domain
         *
         * @param string      $url The complete home URL including scheme and path.
         * @param string      $path Path relative to the home URL. Blank string if no path is specified.
         * @param string|null $orig_scheme Scheme to give the home URL context. Accepts 'http', 'https', 'relative' or null.
         * @param int|null    $site_id Blog ID, or null for the current blog.
         * @return string Mangled URL
         */
        public function mangle_url($url, $path = '/', $orig_scheme = '', $site_id = 0)
        {
        }
        // end mangle_url;
        /**
         * Adds a fix to the srcset URLs when we need that domain mapped
         *
         * @since 1.5.5
         * @param array $sources Image source URLs.
         * @return array
         */
        public function fix_srcset($sources)
        {
        }
    }
    /**
     * WP Ultimo faker
     *
     * @since 2.0.0
     */
    class Faker
    {
        /**
         * Hold the fake data
         *
         * @since 2.0.0
         * @var array
         */
        private $fake_data_generated;
        /**
         * Constructor
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Get the faker generator.
         *
         * @since 2.0.0
         * @return Faker faker object.
         */
        private function get_faker()
        {
        }
        // end get_faker;
        /**
         * Get the faker generator.
         *
         * @since 2.0.0
         * @return Faker faker object.
         */
        public function generate()
        {
        }
        // end generate;
        /**
         * Get the fake data generated.
         *
         * @since 2.0.0
         * @param string $model The model name to get.
         * @return array The fake data generated.
         */
        public function get_fake_data_generated($model = '')
        {
        }
        // end get_fake_data_generated;
        /**
         * Set the fake data generated.
         *
         * @since 2.0.0
         * @param string $model The model name.
         * @param string $value The value to identify the fake data generated.
         */
        public function set_fake_data_generated($model, $value)
        {
        }
        // end set_fake_data_generated;
        /**
         * Get the option "debug_faker" with the data generated by faker.
         *
         * @since 2.0.0
         * @return array The ids of the fake data generated.
         */
        public function get_option_debug_faker()
        {
        }
        // end get_option_debug_faker;
        /**
         * Get random data.
         *
         * @since 2.0.0
         * @param string $model The name of model.
         * @return number The id of the data.
         */
        private function get_random_data($model)
        {
        }
        // end get_random_data;
        /**
         * Get random customer.
         *
         * @since 2.0.0
         * @param boolean $create_if_not_exist Create the data if there's none.
         * @return object The customer object.
         */
        private function get_random_customer($create_if_not_exist = false)
        {
        }
        // end get_random_customer;
        /**
         * Get random product.
         *
         * @since 2.0.0
         * @param boolean $create_if_not_exist Create the data if there's none.
         * @return object The product object.
         */
        private function get_random_product($create_if_not_exist = false)
        {
        }
        // end get_random_product;
        /**
         * Get random membership.
         *
         * @since 2.0.0
         * @return object The membership object.
         */
        private function get_random_membership()
        {
        }
        // end get_random_membership;
        /**
         * Get random site.
         *
         * @since 2.0.0
         * @return object The site object.
         */
        private function get_random_site()
        {
        }
        // end get_random_site;
        /**
         * Get random payment.
         *
         * @since 2.0.0
         * @return object The payment object.
         */
        private function get_random_payment()
        {
        }
        // end get_random_payment;
        /**
         * Generate a faker customer.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_customers($number = 1)
        {
        }
        // end generate_fake_customers;
        /**
         * Generate a faker product.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_products($number = 1)
        {
        }
        // end generate_fake_products;
        /**
         * Generate a faker membership.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_memberships($number = 1)
        {
        }
        // end generate_fake_memberships;
        /**
         * Generate a fake domain.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_domain($number = 1)
        {
        }
        // end generate_fake_domain;
        /**
         * Generate a fake event.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_events($number = 1)
        {
        }
        // end generate_fake_events;
        /**
         * Generate a fake discount code.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_discount_code($number = 1)
        {
        }
        // end generate_fake_discount_code;
        /**
         * Generate a fake checkout form.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_checkout_form($number = 1)
        {
        }
        // end generate_fake_checkout_form;
        /**
         * Generate a fake email.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_email($number = 1)
        {
        }
        // end generate_fake_email;
        /**
         * Generate a fake broadcast.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_broadcast($number = 1)
        {
        }
        // end generate_fake_broadcast;
        /**
         * Generate a fake webhook.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_webhook($number = 1)
        {
        }
        // end generate_fake_webhook;
        /**
         * Generate a fake payment.
         *
         * @since 2.0.0
         * @param int $number The number of fake data that will be generated.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_payment($number = 1)
        {
        }
        // end generate_fake_payment;
        /**
         * Generate a faker site.
         *
         * @since 2.0.0
         * @param int    $number The number of fake data that will be generated.
         * @param string $type The type of site to favor.
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function generate_fake_site($number = 1, $type = 'customer_owned')
        {
        }
    }
    /**
     * Geolocation Class.
     */
    class Geolocation
    {
        /**
         * GeoLite IPv4 DB.
         *
         * @deprecated 3.4.0
         */
        const GEOLITE_DB = 'http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz';
        /**
         * GeoLite IPv6 DB.
         *
         * @deprecated 3.4.0
         */
        const GEOLITE_IPV6_DB = 'http://geolite.maxmind.com/download/geoip/database/GeoIPv6.dat.gz';
        /**
         * GeoLite2 DB.
         *
         * @since 3.4.0
         */
        const GEOLITE2_DB = 'http://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz';
        /**
         * API endpoints for looking up user IP address.
         *
         * @var array
         */
        private static $ip_lookup_apis = array('ipify' => 'http://api.ipify.org/', 'ipecho' => 'http://ipecho.net/plain', 'ident' => 'http://ident.me', 'whatismyipaddress' => 'http://bot.whatismyipaddress.com');
        /**
         * API endpoints for geolocating an IP address
         *
         * @var array
         */
        private static $geoip_apis = array('ipinfo.io' => 'https://ipinfo.io/%s/json', 'ip-api.com' => 'http://ip-api.com/json/%s');
        /**
         * Check if server supports MaxMind GeoLite2 Reader.
         *
         * @todo reactivate this.
         * @since 3.4.0
         * @return bool
         */
        private static function supports_geolite2()
        {
        }
        // end supports_geolite2;
        /**
         * Check if geolocation is enabled.
         *
         * @since 3.4.0
         * @param string $current_settings Current geolocation settings.
         * @return bool
         */
        private static function is_geolocation_enabled($current_settings)
        {
        }
        // end is_geolocation_enabled;
        /**
         * Prevent geolocation via MaxMind when using legacy versions of php.
         *
         * @since 3.4.0
         * @param string $default_customer_address current value.
         * @return string
         */
        public static function disable_geolocation_on_legacy_php($default_customer_address)
        {
        }
        // end disable_geolocation_on_legacy_php;
        /**
         * Hook in geolocation functionality.
         */
        public static function init()
        {
        }
        // end init;
        /**
         * Maybe trigger a DB update for the first time.
         *
         * @param  string $new_value New value.
         * @param  string $old_value Old value.
         * @return string
         */
        public static function maybe_update_database($new_value, $old_value)
        {
        }
        // end maybe_update_database;
        /**
         * Get current user IP Address.
         *
         * @return string
         */
        public static function get_ip_address()
        {
        }
        // end get_ip_address;
        /**
         * Get user IP Address using an external service.
         * This can be used as a fallback for users on localhost where
         * get_ip_address() will be a local IP and non-geolocatable.
         *
         * @return string
         */
        public static function get_external_ip_address()
        {
        }
        // end get_external_ip_address;
        /**
         * Geolocate an IP address.
         *
         * @param  string $ip_address   IP Address.
         * @param  bool   $fallback     If true, fallbacks to alternative IP detection (can be slower).
         * @param  bool   $api_fallback If true, uses geolocation APIs if the database file doesn't exist (can be slower).
         * @return array
         */
        public static function geolocate_ip($ip_address = '', $fallback = false, $api_fallback = true)
        {
        }
        // end geolocate_ip;
        /**
         * Path to our local db.
         *
         * @param  string $deprecated Deprecated since 3.4.0.
         * @return string
         */
        public static function get_local_database_path($deprecated = '2')
        {
        }
        // end get_local_database_path;
        /**
         * Update geoip database.
         *
         * Extract files with PharData. Tool built into PHP since 5.3.
         */
        public static function update_database()
        {
        }
        // end update_database;
        /**
         * Use MAXMIND GeoLite database to geolocation the user.
         *
         * @param  string $ip_address IP address.
         * @param  string $database   Database path.
         * @return string
         */
        private static function geolocate_via_db($ip_address, $database)
        {
        }
        // end geolocate_via_db;
        /**
         * Use APIs to Geolocate the user.
         *
         * Geolocation APIs can be added through the use of the wu_geolocation_geoip_apis filter.
         * Provide a name=>value pair for service-slug=>endpoint.
         *
         * If APIs are defined, one will be chosen at random to fulfil the request. After completing, the result
         * will be cached in a transient.
         *
         * @param  string $ip_address IP address.
         * @return string
         */
        private static function geolocate_via_api($ip_address)
        {
        }
    }
    /**
     * WP Ultimo helper methods for including and rendering files, assets, etc
     *
     * @since 2.0.0
     */
    class Helper
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * List of view types that are subject to view overriding
         *
         * @since 2.0.0
         * @var array
         */
        protected $replaceable_views = array('signup', 'emails', 'forms');
        /**
         * Adds hooks to be added at the original instantiation.
         *
         * @since 1.9.0
         */
        public function init()
        {
        }
        // end init;
        /**
         * Returns the full path to the plugin folder
         *
         * @since 0.0.1
         * @param string $dir Path relative to the plugin root you want to access.
         * @return string
         */
        public function path($dir)
        {
        }
        // end path;
        /**
         * Returns the URL to the plugin folder.
         *
         * @since 0.0.1
         * @param string $dir Path relative to the plugin root you want to access.
         * @return string
         */
        public function url($dir)
        {
        }
        // end url;
        /**
         * Shorthand for url('assets/img'). Returns the URL for assets inside the assets folder.
         *
         * @since 0.0.1
         * @param string $asset Asset file name with the extension.
         * @param string $assets_dir Assets sub-directory. Defaults to 'img'.
         * @param string $base_dir   Base dir. Defaults to 'assets'.
         * @return string
         */
        public function get_asset($asset, $assets_dir = 'img', $base_dir = 'assets')
        {
        }
        // end get_asset;
        /**
         * Renders a view file from the view folder.
         *
         * @since 0.0.1
         * @param string       $view View file to render. Do not include the .php extension.
         * @param boolean      $vars Key => Value pairs to be made available as local variables inside the view scope.
         * @param string|false $default_view View to be used if the view passed is not found. Used as fallback.
         * @return void
         */
        public function render($view, $vars = false, $default_view = false)
        {
        }
        // end render;
        /**
         * Allows us to search templates when we are not in the main site environment
         *
         * @todo Can this be improved? Do we need to re-check the Template Path in here? Not sure...
         *
         * @since 1.9.0
         * @param string|array $template_names Template file(s) to search for, in order.
         * @param bool         $load           If true the template file will be loaded if it is found.
         * @param bool         $require_once   Whether to require_once or require. Default true. Has no effect if $load is false.
         * @return string The template filename if one is located.
         */
        public function custom_locate_template($template_names, $load = false, $require_once = true)
        {
        }
        // end custom_locate_template;
        /**
         * Check if an alternative view exists and override
         *
         * @param  string $original_path The original path of the view.
         * @param  string $view          View path.
         * @return string  The new path.
         */
        public function view_override($original_path, $view)
        {
        }
        // end view_override;
        /**
         * This function return 'slugfied' options terms to be used as options ids.
         *
         * @since 0.0.1
         * @param string $term Returns a string based on the term and this plugin slug.
         * @return string
         */
        public function slugfy($term)
        {
        }
        // end slugfy;
        /**
         * Get the value of a slugfied network option
         *
         * @since 1.9.6
         * @param string $option_name Option name.
         * @param mixed  $default The default value.
         * @return mixed
         */
        public function get_option($option_name = 'settings', $default = array())
        {
        }
        // end get_option;
        /**
         * Save slugfied network option
         *
         * @since 1.9.6
         * @param string $option_name The option name to save.
         * @param mixed  $value       The new value of the option.
         * @return boolean
         */
        public function save_option($option_name = 'settings', $value = false)
        {
        }
        // end save_option;
        /**
         * Delete slugfied network option
         *
         * @since 1.9.6
         * @param string $option_name The option name to delete.
         * @return boolean
         */
        public function delete_option($option_name)
        {
        }
        // end delete_option;
        /**
         * Gets the URL for the folders created with maybe_create_folder().
         *
         * @see $this->maybe_create_folder()
         * @since 2.0.0
         *
         * @param string $folder The name of the folder.
         * @return string
         */
        public function get_folder_url($folder)
        {
        }
        // end get_folder_url;
        /**
         * Creates a WP Ultimo folder inside the uploads folder. Returns the path to the folder.
         *
         * @since 2.0.0
         *
         * @param string $folder Name of the folder.
         * @return string
         */
        public function maybe_create_folder($folder)
        {
        }
        // end maybe_create_folder;
        /**
         * Drop our custom tables.
         *
         * @since 2.0.0
         * @return void
         * @throws \Exception In case of failures, an exception is thrown.
         */
        public function drop_tables()
        {
        }
    }
    /**
     * WP Ultimo activation and deactivation hooks
     *
     * @since 2.0.0
     */
    class Hooks
    {
        /**
         * Static-only class.
         */
        private function __construct()
        {
        }
        // end __construct;
        /**
         * Register the activation and deactivation hooks
         *
         * @since 2.0.0
         * @return void
         */
        public static function init()
        {
        }
        // end init;
        /**
         *  Runs when WP Ultimo is activated
         *
         * @since 1.9.6 It now uses hook-based approach, it is up to each sub-class to attach their own routines.
         * @since 1.2.0
         */
        public static function on_activation()
        {
        }
        // end on_activation;
        /**
         * Runs whenever the activation flag is set.
         *
         * @since 2.0.0
         * @return void
         */
        public static function on_activation_do()
        {
        }
        // end on_activation_do;
        /**
         * Runs when WP Ultimo is deactivated
         *
         * @since 1.9.6 It now uses hook-based approach, it is up to each sub-class to attach their own routines.
         * @since 1.2.0
         */
        public static function on_deactivation()
        {
        }
    }
    /**
     * Handles WP Ultimo activation and compat layer with Freemius.
     *
     * @since 2.0.0
     */
    class License
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * The activator instance, in our case a Freemius instance.
         *
         * @since 2.0.0
         * @var \Freemius
         */
        protected $activator;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Request a support signature to the API.
         *
         * This confirms ownership of the license and allows us
         * to display past conversations with confidence that the
         * customer is who they say they is.
         *
         * @since 2.0.7
         * @return string
         */
        public function request_support_signature()
        {
        }
        // end request_support_signature;
        /**
         * Display the widget window for support.
         *
         * @since 2.0.7
         *
         * @param string $subject The subject of the new chat.
         * @param string $message The message for the new chat.
         * @return void
         */
        public function maybe_add_support_window($subject = '', $message = '')
        {
        }
        // end maybe_add_support_window;
        /**
         * Maybe force the active state of WP Ultimo if being used as must-use.
         *
         * @since 2.0.0
         *
         * @param bool   $is_active The current active value.
         * @param string $plugin The plugin name/slug.
         * @return bool
         */
        public function maybe_force_active_state($is_active, $plugin)
        {
        }
        // end maybe_force_active_state;
        /**
         * Fix plugin path is being used as must use.
         *
         * @since 2.0.0
         *
         * @param string $final_path The plugin file absolute path.
         * @param string $slug The plugin slug.
         * @param string $path The plugin file relative path.
         * @return string
         */
        public function fix_mu_plugin_path($final_path, $slug, $path)
        {
        }
        // end fix_mu_plugin_path;
        /**
         * Registers the form and handler to license activation.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Adds our query arg to the removable list.
         *
         * @since 2.0.0
         *
         * @param array $args The current list of removable query args.
         * @return array
         */
        public function add_activation_to_removable_query_list($args)
        {
        }
        // end add_activation_to_removable_query_list;
        /**
         * Adds a successful message when activation is successful.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_successful_activation_message()
        {
        }
        // end add_successful_activation_message;
        /**
         * Render the license activation form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_activation_form()
        {
        }
        // end render_activation_form;
        /**
         * Handle license activation form submission.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_activation_form()
        {
        }
        // end handle_activation_form;
        /**
         * Check permissions before accessing.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_prevent_access()
        {
        }
        // end maybe_prevent_access;
        /**
         * We only load the Freemius SDK if we really, really need it.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function check_request()
        {
        }
        // end check_request;
        /**
         * Gets the activator instance.
         *
         * @since 2.0.0
         * @return null|\Freemius
         */
        public function get_activator()
        {
        }
        // end get_activator;
        /**
         * Sets up the activator instance.
         *
         * @since 2.0.0
         * @return void
         */
        protected function setup_activator()
        {
        }
        // end setup_activator;
        /**
         * Tries to perform a license activation.
         *
         * @since 2.0.0
         *
         * @param string  $license_key The customer license key.
         * @param boolean $email The customer email address.
         * @return string|WP_Error
         */
        public function activate($license_key, $email = false)
        {
        }
        // end activate;
        /**
         * Checks if this copy of the plugin was activated.
         *
         * @since 2.0.0
         *
         * @param string $plan Plan to check against.
         * @return bool
         */
        public function allowed($plan = 'wpultimo')
        {
        }
        // end allowed;
        /**
         * Returns the customer of the current license.
         *
         * @since 2.0.0
         * @param bool $force_load Force the activator to be loaded.
         * @return FS_User|false
         */
        public function get_customer($force_load = false)
        {
        }
        // end get_customer;
        /**
         * Returns the current install.
         *
         * @since 2.0.0
         * @return FS_Site|false
         */
        public function get_install()
        {
        }
        // end get_install;
        /**
         * Returns the current plan the customer subscribes to.
         *
         * @since 2.0.0
         * @return FS_Plan|false
         */
        public function get_plan()
        {
        }
        // end get_plan;
        /**
         * Returns the license object.
         *
         * @since 2.0.0
         * @param bool $force_load Force the activator to be loaded.
         * @return FS_Plugin_License|false
         */
        public function get_license($force_load = false)
        {
        }
        // end get_license;
        /**
         * Returns the license key used to activate this copy.
         *
         * @since 2.0.0
         * @param bool $force_load Force the activator to be loaded.
         * @return string|false
         */
        public function get_license_key($force_load = false)
        {
        }
        // end get_license_key;
        /**
         * Checks if the whitelabel mode was activated.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_whitelabel()
        {
        }
        // end is_whitelabel;
        /**
         * Inverse of the is_whitelabel. Used in callbacks.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_not_whitelabel()
        {
        }
        // end is_not_whitelabel;
        /**
         * Returns the license key set as constant if it exists.
         *
         * @since 2.0.0
         * @return false|string
         */
        public function has_license_key_defined_as_constant()
        {
        }
    }
    /**
     * Adds a lighter ajax option to WP Ultimo.
     *
     * @since 1.9.14
     */
    class Light_Ajax
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Sets up the listener
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Actions that can ignore the referer check.
         *
         * @since 2.0.4
         * @return array
         */
        protected function should_skip_referer_check()
        {
        }
        // end should_skip_referer_check;
        /**
         * Gets the hook we should use to attach the light ajax runner to.
         *
         * By default, we use plugins_loaded to make sure we run as early
         * as possible. This allows us to shave off almost 50% of the
         * TTFB delay with these requests when compared with the regular
         * WordPress admin-ajax.php.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_when_to_run()
        {
        }
        // end get_when_to_run;
        /**
         * Adds an wu_ajax handler.
         *
         * @since 1.9.14
         * @return void
         */
        public function process_light_ajax()
        {
        }
    }
    /**
     * WP Ultimo Logger
     *
     * @since 2.0.0
     */
    class Logger
    {
        /**
         * Stores open file _handles.
         *
         * @var array
         * @access private
         */
        static $_handles;
        /**
         * Constructor for the logger.
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Destructor.
         */
        public function __destruct()
        {
        }
        // end __destruct;
        /**
         * Returns the logs folder
         *
         * @return string
         */
        public static function get_logs_folder()
        {
        }
        // end get_logs_folder;
        /**
         * Get the log contents
         *
         * @since  1.6.0
         *
         * @param  string  $handle File name to read.
         * @param  integer $lines Number of lines to retrieve, defaults to 10.
         * @return array
         */
        public static function read_lines($handle, $lines = 10)
        {
        }
        // end read_lines;
        /**
         * Open log file for writing.
         *
         * @since  1.2.0 Checks if the directory exists.
         * @since  0.0.1
         *
         * @access private
         * @param string $handle Name of the log file to open.
         * @param string $permission Permission to open the file with.
         * @return bool success
         */
        private static function open($handle, $permission = 'a')
        {
        }
        // end open;
        /**
         * Add a log entry to chosen file.
         *
         * @param string           $handle Name of the log file to write to.
         * @param string|\WP_Error $message Log message to write.
         */
        public static function add($handle, $message)
        {
        }
        // end add;
        /**
         * Clear entries from chosen file.
         *
         * @param mixed $handle Name of the log file to clear.
         */
        public static function clear($handle)
        {
        }
        // end clear;
        /**
         * Takes a callable as a parameter and logs how much time it took to execute it.
         *
         * @since 2.0.0
         *
         * @param string   $handle Name of the log file to write to.
         * @param string   $message  Log message to write.
         * @param callable $callback Function to track the execution time.
         * @return array
         */
        public static function track_time($handle, $message, $callback)
        {
        }
    }
    /**
     * Adds the Maintenance Mode.
     *
     * @since 2.0.0
     */
    class Maintenance_Mode
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Initializes
         *
         * @since 2.0.0
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds the additional hooks, when necessary.
         *
         * @since 2.0.0
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Add maintenance mode Notice to Admin Bar
         *
         * @since 2.0.0
         * @param WP_Admin_Bar $wp_admin_bar The Admin Bar class.
         * @return void
         */
        public function add_notice_to_admin_bar($wp_admin_bar)
        {
        }
        // end add_notice_to_admin_bar;
        /**
         * Render page - html filtrable
         *
         * @since 2.0.0
         * @return void
         */
        public function render_page()
        {
        }
        // end render_page;
        /**
         * Check should display maintenance mode
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function check_maintenance_mode()
        {
        }
        // end check_maintenance_mode;
        /**
         * Callback button admin toggle maintenance mode.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function toggle_maintenance_mode()
        {
        }
        // end toggle_maintenance_mode;
        /**
         * Filter the WP Ultimo settings to add Jumper options
         *
         * @since 2.0.0
         * @return void
         */
        public function add_settings()
        {
        }
    }
    /**
     * Check if all the pre-requisites to run WP Ultimo are in place.
     *
     * @since 2.0.0
     */
    class Requirements
    {
        /**
         * Caches the result of the requirement check.
         *
         * @since 2.0.0
         * @var bool
         */
        public static $met;
        /**
         * Minimum PHP version required to run WP Ultimo.
         *
         * @since 2.0.0
         * @var string
         */
        public static $php_version = '7.3';
        /**
         * Recommended PHP Version
         *
         * @since 2.0.0
         * @var string
         */
        public static $php_recommended_version = '7.4.1';
        /**
         * Minimum WordPress version required to run WP Ultimo.
         *
         * @since 2.0.0
         * @var string
         */
        public static $wp_version = '5.1.2';
        /**
         * Recommended WP Version.
         *
         * @since 2.0.0
         * @var string
         */
        public static $wp_recommended_version = '5.4.2';
        /**
         * Static-only class.
         */
        private function __construct()
        {
        }
        // end __construct;
        /**
         * Check if the minimum pre-requisites to run WP Ultimo are present.
         *
         * - Check if the PHP version requirements are met;
         * - Check if the WordPress version requirements are met;
         * - Check if the install is a Multisite install;
         * - Check if WP Ultimo is network active.
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function met()
        {
        }
        // end met;
        /**
         * Checks if we have ran through the setup already.
         *
         * @since 2.0.0
         * @return bool
         */
        public static function run_setup()
        {
        }
        // end run_setup;
        /**
         * Checks for a test environment.
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function is_unit_test()
        {
        }
        // end is_unit_test;
        /**
         * Check if the PHP version requirements are met
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function check_php_version()
        {
        }
        // end check_php_version;
        /**
         * Check if the WordPress version requirements are met
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function check_wp_version()
        {
        }
        // end check_wp_version;
        /**
         * Check Cron Status
         *
         * Gets the current cron status by performing a test spawn.
         * Cached for one hour when all is well.
         *
         * Heavily inspired on Astra's test_cron check:
         *
         * @see astra/inc/theme-update/class-astra-theme-background-updater.php
         *
         * @since 2.0.0
         * @return false if there is a problem spawning a call to WP-Cron system.
         */
        public static function check_wp_cron()
        {
        }
        // end check_wp_cron;
        /**
         * Check if the install is a Multisite install
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function is_multisite()
        {
        }
        // end is_multisite;
        /**
         * Check if WP Ultimo is network active.
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function is_network_active()
        {
        }
        // end is_network_active;
        /**
         * Adds a network admin notice about the PHP requirements not being met
         *
         * @since 2.0.0
         * @return void
         */
        public static function notice_unsupported_php_version()
        {
        }
        // end notice_unsupported_php_version;
        /**
         * Adds a network admin notice about the WordPress requirements not being met
         *
         * @since 2.0.0
         * @return void
         */
        public static function notice_unsupported_wp_version()
        {
        }
        // end notice_unsupported_wp_version;
        /**
         * Adds a network admin notice about the install not being a multisite install
         *
         * @since 2.0.0
         * @return void
         */
        public static function notice_not_multisite()
        {
        }
        // end notice_not_multisite;
        /**
         * Adds a network admin notice about the WP Ultimo not being network-active
         *
         * @since 2.0.0
         * @return void
         */
        public static function notice_not_network_active()
        {
        }
    }
    /**
     * WP Ultimo helper class to handle global registering of scripts and styles.
     *
     * @since 2.0.0
     */
    class Scripts
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Runs when the instantiation first occurs.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Wrapper for the register scripts function.
         *
         * @since 2.0.0
         *
         * @param string $handle The script handle. Used to enqueue the script.
         * @param string $src URL to the file.
         * @param array  $deps List of dependency scripts.
         * @return void
         */
        public function register_script($handle, $src, $deps = array())
        {
        }
        // end register_script;
        /**
         * Wrapper for the register styles function.
         *
         * @since 2.0.0
         *
         * @param string $handle The script handle. Used to enqueue the script.
         * @param string $src URL to the file.
         * @param array  $deps List of dependency scripts.
         * @return void
         */
        public function register_style($handle, $src, $deps = array())
        {
        }
        // end register_style;
        /**
         * Registers the default WP Ultimo scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_default_scripts()
        {
        }
        // end register_default_scripts;
        /**
         * Localize moment.js relative times.
         *
         * @since 2.0.8
         * @return bool
         */
        public function localize_moment()
        {
        }
        // end localize_moment;
        /**
         * Registers the default WP Ultimo styles.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_default_styles()
        {
        }
        // end register_default_styles;
        /**
         * Loads the default admin styles.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_default_admin_styles()
        {
        }
        // end enqueue_default_admin_styles;
        /**
         * Loads the default admin scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_default_admin_scripts()
        {
        }
        // end enqueue_default_admin_scripts;
        /**
         * Update the use container setting.
         *
         * @since 2.0.0
         * @return void
         */
        public function update_use_container()
        {
        }
        // end update_use_container;
        /**
         * Add body classes of container boxed if user has setting.
         *
         * @since 2.0.0
         *
         * @param string $classes Body classes.
         * @return string
         */
        public function add_body_class_container_boxed($classes)
        {
        }
    }
    /**
     * Session Class.
     */
    class Session
    {
        /**
         * The instance of the session manager.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Dependencies\Aura\Session\Session
         */
        protected $session_manager;
        /**
         * The instance of the current segment of the session.
         *
         * For practical terms, this is the same as a key under the session manager.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Dependencies\Aura\Session\Segment
         */
        protected $segment;
        /**
         * Constructs the manager and returns a section using the real name.
         *
         * @since 2.0.0
         *
         * @param string $realm_name The segment to add elements to.
         */
        public function __construct($realm_name)
        {
        }
        // end __construct;
        /**
         * Checks if headers were sent already.
         *
         * @since 2.0.0
         * @return boolean
         */
        protected function can_use_sessions()
        {
        }
        // end can_use_sessions;
        /**
         * Gets the value of a session key.
         *
         * @since 2.0.0
         *
         * @param string $key The key to retrieve.
         * @return mixed
         */
        public function get($key)
        {
        }
        // end get;
        /**
         * Set the value of a session key.
         *
         * @since 2.0.0
         *
         * @param string $key The value of the key to set.
         * @param mixed  $value The value.
         * @return bool
         */
        public function set($key, $value)
        {
        }
        // end set;
        /**
         * Appends values to a given key, instead of replacing it.
         *
         * @since 2.0.0
         *
         * @param string $key The value of the key to set.
         * @param array  $values Additional array values.
         * @return bool
         */
        public function add_values($key, $values)
        {
        }
        // end add_values;
        /**
         * Set a flash message.
         *
         * Flash messages are persistent messages that are only valid for the next
         * request. This is useful for displaying error messages and such.
         *
         * @since 2.0.0
         *
         * @param string $key The value of the key to set.
         * @param mixed  $value The value.
         * @return bool
         */
        public function set_flash($key, $value)
        {
        }
        // end set_flash;
        /**
         * Returns the content of a flash message.
         *
         * @since 2.0.0
         * @param string $key The key to retrieve.
         * @return mixed
         */
        public function get_flash($key)
        {
        }
        // end get_flash;
        /**
         * Forces the start of the session.
         *
         * @since 2.0.0
         * @return bool
         */
        public function start()
        {
        }
        // end start;
        /**
         * Writes to the session and closes the connection.
         *
         * @since 2.0.0
         * @return null
         */
        public function commit()
        {
        }
        // end commit;
        /**
         * Clears the current session.
         *
         * @since 2.0.0
         * @return null
         */
        public function clear()
        {
        }
        // end clear;
        /**
         * Destroys the session. Equivalent to session_destroy();
         *
         * @since 2.0.0
         * @return bool
         */
        public function destroy()
        {
        }
    }
}
namespace WP_Ultimo\Traits {
    /**
     * WP_Ultimo_Settings_Deprecated trait.
     */
    trait WP_Ultimo_Settings_Deprecated
    {
        /**
         * Adds the legacy scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_legacy_scripts()
        {
        }
        // end handle_legacy_scripts;
        /**
         * Handle legacy hooks to support old versions of our add-ons.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_legacy_filters()
        {
        }
    }
}
namespace WP_Ultimo {
    /**
     * WP Ultimo settings helper class.
     *
     * @since 2.0.0
     */
    class Settings
    {
        use \WP_Ultimo\Traits\Singleton, \WP_Ultimo\Traits\WP_Ultimo_Settings_Deprecated;
        /**
         * Keeps the key used to access settings.
         *
         * @since 2.0.0
         * @var string
         */
        const KEY = 'v2_settings';
        /**
         * Holds the array containing all the saved settings.
         *
         * @since 2.0.0
         * @var array|null
         */
        private $settings = null;
        /**
         * Holds the sections of the settings page.
         *
         * @since 2.0.0
         * @var array
         */
        private $sections = null;
        /**
         * Runs on singleton instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Change the current status of the registration on WordPress MS.
         *
         * @since 2.0.0
         *
         * @param string $status The registration status.
         * @param string $option Option name, in this case, 'registration'.
         * @param int    $network_id The id of the network being accessed.
         * @return string
         */
        public function force_registration_status($status, $option, $network_id)
        {
        }
        // end force_registration_status;
        /**
         * Change the current status of the add_new network option.
         *
         * @since 2.0.0
         *
         * @param string $status The add_new_users status.
         * @param string $option Option name, in this case, 'add_new_user'.
         * @param int    $network_id The id of the network being accessed.
         * @return string
         */
        public function force_add_new_users($status, $option, $network_id)
        {
        }
        // end force_add_new_users;
        /**
         * Change the current status of the add_new network option.
         *
         * @since 2.0.0
         *
         * @param array  $status The add_new_users status.
         * @param string $option Option name, in this case, 'add_new_user'.
         * @param int    $network_id The id of the network being accessed.
         * @return string
         */
        public function force_plugins_menu($status, $option, $network_id)
        {
        }
        // end force_plugins_menu;
        /**
         * Get all the settings from WP Ultimo
         *
         * @param bool $check_caps If we should remove the settings the user does not have rights to see.
         * @return array Array containing all the settings
         */
        public function get_all($check_caps = false)
        {
        }
        // end get_all;
        /**
         * Get a specific settings from the plugin
         *
         * @since  1.1.5 Let's we pass default values in case nothing is found.
         * @since  1.4.0 Now we can filter settings we get.
         *
         * @param  string $setting Settings name to return.
         * @param  string $default Default value for the setting if it doesn't exist.
         * @return string The value of that setting
         */
        public function get_setting($setting, $default = false)
        {
        }
        // end get_setting;
        /**
         * Saves a specific setting into the database
         *
         * @param string $setting Option key to save.
         * @param mixed  $value   New value of the option.
         * @return boolean
         */
        public function save_setting($setting, $value)
        {
        }
        // end save_setting;
        /**
         * Save WP Ultimo Settings
         *
         * This function loops through the settings sections and saves the settings
         * after validating them.
         *
         * @since 2.0.0
         *
         * @param array   $settings_to_save Array containing the settings to save.
         * @param boolean $reset If true, WP Ultimo will override the saved settings with the default values.
         * @return array
         */
        public function save_settings($settings_to_save = array(), $reset = false)
        {
        }
        // end save_settings;
        /**
         * Returns the list of sections and their respective fields.
         *
         * @since 1.1.0
         * @todo Order sections by the order parameter.
         * @todo Order fields by the order parameter.
         * @return array
         */
        public function get_sections()
        {
        }
        // end get_sections;
        /**
         * Returns a particular settings section.
         *
         * @since 2.0.0
         *
         * @param string $section_name The slug of the section to return.
         * @return array
         */
        public function get_section($section_name = 'general')
        {
        }
        // end get_section;
        /**
         * Adds a new settings section.
         *
         * Sections are a way to organize correlated settings into one cohesive unit.
         * Developers should be able to add their own sections, if they need to.
         * This is the purpose of this APIs.
         *
         * @since 2.0.0
         *
         * @param string $section_slug ID of the Section. This is used to register fields to this section later.
         * @param array  $atts Section attributes such as title, description and so on.
         * @return void
         */
        public function add_section($section_slug, $atts)
        {
        }
        // end add_section;
        /**
         * Adds a new field to a settings section.
         *
         * Fields are settings that admins can actually change.
         * This API allows developers to add new fields to a given settings section.
         *
         * @since 2.0.0
         *
         * @param string $section_slug Section to which this field will be added to.
         * @param string $field_slug ID of the field. This is used to later retrieve the value saved on this setting.
         * @param array  $atts Field attributes such as title, description, tooltip, default value, etc.
         * @return void
         */
        public function add_field($section_slug, $field_slug, $atts)
        {
        }
        // end add_field;
        /**
         * Register the WP Ultimo default sections and fields.
         *
         * @since 2.0.0
         * @return void
         */
        public function default_sections()
        {
        }
        // end default_sections;
        /**
         * Tries to determine the location of the company based on the admin IP.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_default_company_country()
        {
        }
    }
    /**
     * WP Ultimo activation and deactivation hooks
     *
     * @since 2.0.0
     */
    class Sunrise
    {
        /**
         * Keeps the current sunrise.php version.
         *
         * @var string
         */
        static $version = '2.0.0.6';
        /**
         * Static-only class.
         */
        private function __construct()
        {
        }
        // end __construct;
        /**
         * Register the activation and deactivation hooks
         *
         * @since 2.0.0
         * @return void
         */
        public static function init()
        {
        }
        // end init;
        /**
         * Checks if we need to upgrade the sunrise version on wp-content
         *
         * @since 2.0.0
         * @return void
         */
        public static function manage_sunrise_updates()
        {
        }
        // end manage_sunrise_updates;
        /**
         * Upgrades the sunrise file, if necessary.
         *
         * @todo: lots of logic needs to be here to deal with other plugins' code on sunrise.php
         * @since 2.0.0
         * @return true|\WP_Error
         */
        public static function try_upgrade()
        {
        }
        // end try_upgrade;
        /**
         * Adds whoops for better debugging.
         *
         * @since 2.0.0
         * @return void
         */
        public static function setup_whoops()
        {
        }
    }
    /**
     * Manages WP Ultimo v1 Unsupported notices and other checks.
     *
     * @since 2.0.5
     */
    class Unsupported
    {
        /**
         * Keeps track of add-ons that if left activated would cause WP Ultimo to crash.
         *
         * @var array
         */
        protected static $unloaded = array();
        /**
         * Keeps track of add-ons that although supported, can be upgraded.
         *
         * @var array
         */
        protected static $upgradeable = array();
        /**
         * Keeps track of add-ons that need a upgrader check install created for them.
         *
         * @var array
         */
        protected static $to_upgrade = array();
        /**
         * Initializes the checks and warning messages.
         *
         * @since 2.0.5
         * @return void
         */
        public static function init()
        {
        }
        // end init;
        /**
         * Unloads add-ons that are no longer supported, when possible.
         *
         * @since 2.0.5
         * @return void
         */
        public static function unload_unsupported_addons()
        {
        }
        // end unload_unsupported_addons;
        /**
         * Install the ner version of the plugin updater for add-ons that can already be updated.
         *
         * @since 2.0.5
         * @return void
         */
        public static function force_updater()
        {
        }
        // end force_updater;
        /**
         * Maybe add necessary admin notices about installing WP Ultimo version 2.
         *
         * @since 2.0.5
         * @return void
         */
        public static function maybe_add_notices()
        {
        }
        // end maybe_add_notices;
        /**
         * A fallback way to display admin notices when WP Ultimo is not fully loaded yet.
         *
         * @since 2.0.5
         *
         * @param string $message The message to display.
         * @param string $type The type of notice. Defaults to warning.
         * @return void
         */
        public static function fallback_admin_notice_display($message, $type = 'warning')
        {
        }
        // end fallback_admin_notice_display;
        /**
         * Keeps a list of useful info for the add-ons that needed change.
         *
         * @since 2.0.5
         *
         * @param string $addon The addon to get the info for.
         * @return array
         */
        public static function replace_with($addon)
        {
        }
    }
    /**
     * WP Ultimo User_Switching
     *
     * @since 2.0.0
     */
    class User_Switching
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Constructor for the User_Switching.
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Check if Plugin User Switching is activated
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function check_user_switching_is_activated()
        {
        }
        // end check_user_switching_is_activated;
        /**
         * Register forms
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Create Install Form of User Switching
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function render_install_user_switching()
        {
        }
        // end render_install_user_switching;
        /**
         * This function return should return the correct url
         *
         * @since 2.0.0
         *
         * @param int $user_id User Id.
         *
         * @return string
         */
        public function render($user_id)
        {
        }
    }
    /**
     * Handles the basic white-labeling of the WordPress admin interface.
     *
     * @since 2.0.0
     */
    class Whitelabel
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Checks if the cache was initiated.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $init = false;
        /**
         * Cached allowed domains.
         *
         * @since 2.0.0
         * @var array
         */
        protected $allowed_domains;
        /**
         * Array of terms to search for.
         *
         * @since 2.0.0
         * @var array
         */
        protected $search = array();
        /**
         * Array of terms to replace with. Must be a 1 to 1 relationship with the search array.
         *
         * @since 2.0.0
         * @var array
         */
        protected $replace = array();
        /**
         * Adds the hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Add the necessary hooks when the feature is enabled.
         *
         * @since 2.0.0
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Loads the custom css file.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_styles()
        {
        }
        // end enqueue_styles;
        /**
         * Replaces the terms on the translated strings.
         *
         * @since 2.0.0
         *
         * @param string $translation The translation.
         * @param string $text The original text before translation.
         * @param string $domain The gettext domain.
         * @return string
         */
        public function replace_text($translation, $text, $domain)
        {
        }
        // end replace_text;
        /**
         * Adds the whitelabel options.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function add_settings()
        {
        }
        // end add_settings;
        /**
         * Removes the WordPress original logo from the top-bar.
         *
         * @since 2.0.0
         * @return void
         */
        public function wp_logo_admin_bar_remove()
        {
        }
        // end wp_logo_admin_bar_remove;
        /**
         * Remove the default widgets from the user panel.
         *
         * @since 2.0.0
         * @return void
         */
        public function remove_dashboard_widgets()
        {
        }
        // end remove_dashboard_widgets;
        /**
         * Removes the WordPress credits from the admin footer.
         *
         * @since 2.0.0
         * @return void
         */
        public function clear_footer_texts()
        {
        }
        // end clear_footer_texts;
        /**
         * Remove the sites admin menu, if the option is selected.
         *
         * @since 2.0.0
         * @return void
         */
        public function remove_sites_admin_menu()
        {
        }
    }
}
namespace WP_Ultimo\Traits {
    /**
     * WP_Ultimo_Deprecated trait.
     */
    trait WP_Ultimo_Deprecated
    {
        /**
         * Deprecated: WP_Ultimo->slugfy().
         *
         * @since 2.0.0
         * @param string $term Returns a string based on the term and this plugin slug.
         * @return void
         */
        public function slugfy($term)
        {
        }
        // end slugfy;
        /**
         * Deprecated: WP_Ultimo->add_page_to_branding()
         *
         * @since 2.0.0
         * @return void
         */
        public function add_page_to_branding()
        {
        }
        // end add_page_to_branding;
        /**
         * Renders a view file from the view folder.
         *
         * @deprecated 2.0.0
         *
         * @since 0.0.1
         * @param string  $view View file to render. Do not include the .php extension.
         * @param boolean $vars Key => Value pairs to be made available as local variables inside the view scope.
         * @return void
         */
        public function render($view, $vars = false)
        {
        }
        // end render;
        /**
         * Returns the full path to the plugin folder
         *
         * @deprecated 2.0.0
         *
         * @since 0.0.1
         * @param string $dir Path relative to the plugin root you want to access.
         * @return string
         */
        public function path($dir)
        {
        }
        // end path;
        /**
         * Deprecated: Add messages to be displayed as notices
         *
         * @deprecated 2.0.0
         *
         * @param string  $message Message to be displayed.
         * @param string  $type    Success, error, warning or info.
         * @param boolean $network Where to display, network admin or normal admin.
         * @return void
         */
        public function add_message($message, $type = 'success', $network = false)
        {
        }
        // end add_message;
        /**
         * Deprecated: This function is here to make sure that the plugin is network active
         * and that this is a multisite install.
         *
         * @deprecated 2.0.0
         *
         * @since 1.0.0
         * @return boolean
         */
        public function check_before_run()
        {
        }
        // end check_before_run;
        /**
         * Deprecated: enqueue_select2.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_select2()
        {
        }
    }
}
namespace {
    /**
     * WP Ultimo main class
     *
     * This class instantiates our dependencies and load the things
     * our plugin needs to run.
     *
     * @package WP_Ultimo
     * @since 2.0.0
     */
    final class WP_Ultimo
    {
        use \WP_Ultimo\Traits\Singleton, \WP_Ultimo\Traits\WP_Ultimo_Deprecated;
        /**
         * Checks if WP Ultimo was loaded or not.
         *
         * This is set to true when all the WP Ultimo requirements are met.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $loaded = \false;
        /**
         * Version of the Plugin
         *
         * @var string
         */
        public $version = '2.0.9';
        /**
         * Holds an instance of the helper functions layer.
         *
         * @since 2.0.0
         * @var WP_Ultimo\Helper
         */
        public $helper;
        /**
         * Holds an instance of the notices functions layer.
         *
         * @since 2.0.0
         * @var WP_Ultimo\Admin_Notices
         */
        public $notices;
        /**
         * Holds an instance of the settings layer.
         *
         * @since 2.0.0
         * @var WP_Ultimo\Settings
         */
        public $settings;
        /**
         * Loads the necessary components into the main class
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Returns true if all the requirements are met.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_loaded()
        {
        }
        // end is_loaded;
        /**
         * Setup the plugin text domain to be used in translations.
         *
         * @since 0.0.1
         * @return void
         */
        public function setup_textdomain()
        {
        }
        // end setup_textdomain;
        /**
         * Loads the table objects for our custom tables.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_tables()
        {
        }
        // end setup_tables;
        /**
         * Loads public apis that should be on the global scope
         *
         * This method is responsible for loading and exposing public apis that
         * plugin developers will use when creating extensions for WP Ultimo.
         * Things like render functions, helper methods, etc.
         *
         * @since 2.0.0
         * @return void
         */
        protected function load_public_apis()
        {
        }
        // end load_public_apis;
        /**
         * Load extra the WP Ultimo elements
         *
         * @since 2.0.0
         * @return void
         */
        protected function load_extra_components()
        {
        }
        // end load_extra_components;
        /**
         * Load the WP Ultimo Admin Pages.
         *
         * @since 2.0.0
         * @return void
         */
        protected function load_admin_pages()
        {
        }
        // end load_admin_pages;
        /**
         * Load extra the WP Ultimo managers.
         *
         * @since 2.0.0
         * @return void
         */
        protected function load_managers()
        {
        }
    }
}
namespace WP_Ultimo\Compat {
    /**
     * Replaces the admin view class with an empty shell.
     *
     * @since 2.0.0
     */
    class AS_Admin_View
    {
        /**
         * Empty initialization.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
    }
    /**
     * Handles discount code compatibility back-ports to WP Ultimo 1.X builds.
     *
     * @since 2.0.0
     */
    class Discount_Code_Compat
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Saves meta data from old plugins on the new plugin.
         *
         * @since 2.0.0
         *
         * @param null   $null Short-circuit control.
         * @param int    $object_id Object ID, in this case, of the Post object.
         * @param string $meta_key The meta key being saved.
         * @param mixed  $meta_value The meta value.
         * @param mixed  $prev_value The previous value.
         * @return null
         */
        public function check_update_coupon($null, $object_id, $meta_key, $meta_value, $prev_value)
        {
        }
    }
    /**
     * Handles General Support
     *
     * @since 2.0.0
     */
    class Domain_Mapping_Compat
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
    }
    /**
     * Handles Elementor Support
     *
     * @since 2.0.0
     */
    class Elementor_Compat
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Makes sure we force elementor to regenerate the styles when necessary.
         *
         * @since 1.10.10
         * @param array $site Info about the duplicated site.
         * @return void
         */
        public function regenerate_css($site)
        {
        }
        // end regenerate_css;
        /**
         * Prevents redirection to primary domain when in Elementor preview mode.
         *
         * @since 2.0.0
         *
         * @param bool $should_redirect If we should redirect or not.
         * @return bool
         */
        public function maybe_prevent_redirection($should_redirect)
        {
        }
        // end maybe_prevent_redirection;
        /**
         * Maybe adds the setup preview for elements inside elementor.
         *
         * @since 2.0.5
         * @return void
         */
        public function maybe_setup_preview()
        {
        }
    }
    /**
     * Handles General Support
     *
     * @since 2.0.0
     */
    class General_Compat
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Fixes incompatibility with the plugin WP Typography.
         *
         * This plugin has a setting that replaces quotes on the content.
         * This breaks our moment configuration strings, and is generally
         * not compatible with WP Ultimo vue templates.
         *
         * Here on this filter, we manually disable the smart quotes
         * settings to prevent that kind of processing, as well as add
         * an admin message telling admins that this is not supported.
         *
         * @see https://de.wordpress.org/plugins/wp-typography/
         * @since 2.0.0
         *
         * @param array $settings The wp-typography settings.
         * @return array
         */
        public function fix_wp_typography($settings)
        {
        }
        // end fix_wp_typography;
        /**
         * Adds a warning message to let customers know why smart quotes are not working.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_wp_typography_warning_message()
        {
        }
        // end add_wp_typography_warning_message;
        /**
         * Fixes brizy media URLs while on Ultimo's template preview
         *
         * In pages created with Brizy, the URLs break when
         * we add the preview=1 parameter to urls.
         *
         * This fix prevent that addition.
         * It is far from an optimal solution, but it will do
         * for now.
         *
         * @todo Find a better way to exclude only Brizy urls.
         *
         * @since 2.0.0
         * @return bool
         */
        public function fix_brizy_preview_url()
        {
        }
        // end fix_brizy_preview_url;
        /**
         * Fix the load URL for WP Frontend Admin
         *
         * @since 2.0.0
         *
         * @param string $final_url The URL WFA wants to load.
         * @param string $page_path_only The page path.
         * @param int    $blog_id The blog ID.
         * @return string
         */
        public function fix_frontend_admin_loading_url($final_url, $page_path_only, $blog_id)
        {
        }
        // end fix_frontend_admin_loading_url;
        /**
         * Oxygen renders things very strangely, so we need to handle it separately.
         *
         * @since 2.0.0
         *
         * @param bool     $should_enqueue If we should include the elements scripts.
         * @param \WP_Post $post The post object.
         * @param string   $shortcode_tag The shortcode.
         * @return bool
         */
        public function maybe_parse_oxygen_content($should_enqueue, $post, $shortcode_tag)
        {
        }
        // end maybe_parse_oxygen_content;
        /**
         * Prevent Oxygen from removing the real wp_head hook from the template
         * previewer page.
         *
         * @since 2.0.4
         * @return void
         */
        public function prevent_oxygen_cleanup_on_template_previewer()
        {
        }
        // end prevent_oxygen_cleanup_on_template_previewer;
        /**
         * Adds SSO to WP Maintenance Mode.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Domain_Mapping\SSO $sso The SSO class instance.
         * @return void
         */
        public function add_sso_to_maintenance_mode($sso)
        {
        }
    }
    /**
     * Adds support to Gutenberg filters.
     *
     * @since 2.0.0
     */
    class Gutenberg_Support
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Filterable function that let users decide if they want to remove
         * Gutenberg support and modifications by Ultimo.
         *
         * @since 1.9.14
         * @return bool
         */
        public function should_load()
        {
        }
        // end should_load;
        /**
         * Initializes the Class, if we need it.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds the Gutenberg Filters scripts.
         *
         * @since 1.9.14
         * @return void
         */
        public function add_scripts()
        {
        }
    }
    /**
     * Handles WP Ultimo 1.X Legacy Shortcodes
     *
     * @since 2.0.0
     */
    class Legacy_Shortcodes
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Control array for the template list shortcode
         *
         * @since 1.7.4
         * @var array|boolean
         */
        public $templates = false;
        /**
         * Defines all the legacy shortcodes.
         *
         * @since 1.0.0 Adds Pricing Table and Paying customers.
         * @since 1.2.1 Adds Plan Link Shortcode.
         * @since 1.2.2 Adds Template Display.
         * @since 1.4.0 Adds User meta getter.
         * @since 1.5.0 Adds Restricted content.
         *
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Return the value of a user meta on the database.
         * This is useful to fetch data saved from custom sign-up fields during sign-up.
         *
         * @since 1.4.0
         * @since 2.0.0 Search customer meta first before trying to fetch the info from the user table.
         *
         * @param array $atts Shortcode attributes.
         * @return string
         */
        public function user_meta($atts)
        {
        }
        // end user_meta;
        /**
         * Returns the number of paying users on the platform.
         *
         * @since 1.X
         *
         * @param array $atts Shortcode attributes.
         * @return string
         */
        public function paying_users($atts)
        {
        }
        // end paying_users;
        /**
         * Plan Link shortcode.
         *
         * @since 2.0.0
         *
         * @param array $atts Shortcode attributes.
         * @return string
         */
        public function plan_link($atts)
        {
        }
        // end plan_link;
        /**
         * Renders the restrict content shortcode.
         *
         * @since 2.0.0
         *
         * @param array  $atts Shortcode attributes.
         * @param string $content The content inside the shortcode.
         * @return string
         */
        public function restricted_content($atts, $content)
        {
        }
        // end restricted_content;
        /**
         * Adds the pricing table shortcode.
         *
         * This method is intended to be able to support both legacy shortcodes, as well
         * as display new layouts.
         *
         * @since 2.0.0
         *
         * @param array  $atts Parsed shortcode attributes.
         * @param string $content Shortcode content.
         * @return string
         */
        public function pricing_table($atts, $content)
        {
        }
        // end pricing_table;
        /**
         * Adds the template sites shortcode.
         *
         * This method is intended to be able to support both legacy shortcodes, as well
         * as display new layouts.
         *
         * @since 2.0.0
         *
         * @param array  $atts Parsed shortcode attributes.
         * @param string $content Shortcode content.
         * @return string
         */
        public function templates_list($atts, $content)
        {
        }
        // end templates_list;
        /**
         * Makes sure we don't return any invalid values.
         *
         * @since  1.7.4
         * @param  string $templates The template list as a string.
         * @return array
         */
        protected function treat_template_list($templates)
        {
        }
    }
    /**
     * Adds support to multiple accounts for plugins such as WooCommerce.
     *
     * @since 2.0.0
     */
    class Multiple_Accounts_Compat
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Backs up the original email.
         *
         * @since 2.0.0
         * @var string
         */
        public $original_email = '';
        /**
         * Holds the fake email generated for later reference.
         *
         * @since 2.0.0
         * @var string
         */
        public $fake_email = '';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Prevent WooCommerce from adding users to site without us knowing.
         *
         * We only use the filter 'woocommerce_process_login_errors', because
         * that's it guaranteed to only run inside the login handler.
         *
         * @since 2.0.0
         *
         * @param mixed $results Arbitrary item being return by the filter chosen.
         * @return mixed
         */
        public function prevent_woo_from_adding_to_blog($results)
        {
        }
        // end prevent_woo_from_adding_to_blog;
        /**
         * Checks if the user belongs to a site they are currently viewing and unset them if they don't.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_unset_current_user()
        {
        }
        // end maybe_unset_current_user;
        /**
         * Allow plugin developers to disable this functionality to prevent compatibility issues.
         *
         * @since 2.0.0
         *
         * @return boolean
         */
        public function should_load()
        {
        }
        // end should_load;
        // Methods
        /**
         * Add multiple accounts setting to enable or disable this feature.
         *
         * @since 2.0.0
         *
         * @return void.
         */
        public function add_settings()
        {
        }
        // end add_settings;
        /**
         * Fixes the email on the WooCommerce Orders.
         *
         * @since 2.0.0
         *
         * @param int   $order_id The WooCommerce order.
         * @param mixed $posted No idea.
         * @return void
         */
        public function fix_billing_email_in_wc_order($order_id, $posted)
        {
        }
        // end fix_billing_email_in_wc_order;
        /**
         * Adds the Multiple accounts column to the users table.
         *
         * @since 2.0.0
         *
         * @param array $columns Original columns.
         * @return array
         */
        public function add_multiple_account_column($columns)
        {
        }
        // end add_multiple_account_column;
        /**
         * Renders the content of our custom column.
         *
         * @since 2.0.0
         *
         * @param null   $null No idea.
         * @param string $column The name of the column.
         * @param int    $user_id The ID of the user.
         * @return void
         */
        public function add_column_content($null, $column, $user_id)
        {
        }
        // end add_column_content;
        /**
         * Handles password resetting.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_reset_password()
        {
        }
        // end handle_reset_password;
        /**
         * Checks if a given user is a member in the site.
         *
         * @since 2.0.0
         *
         * @param string $email The user email address.
         * @return bool
         */
        public function check_for_user_in_site($email)
        {
        }
        // end check_for_user_in_site;
        /**
         * Gets the right user when loggin-in.
         *
         * @since 2.0.0
         *
         * @param WP_User $user The current user object. Usually false.
         * @param string  $username The username to search for.
         * @param string  $password The user password.
         * @return WP_User
         */
        public function fix_login($user, $username, $password)
        {
        }
        // end fix_login;
        /**
         * Skip the email check in WordPress
         *
         * @since 2.0.0
         *
         * @param array $result Array containing signup errors.
         * @return array
         */
        public function skip_email_exist($result)
        {
        }
        // end skip_email_exist;
        /**
         * Skip email existing while importing.
         *
         * @since 2.0.0
         *
         * @param string $user_email Email address.
         * @return string
         */
        public function skip_email_exist_single($user_email)
        {
        }
        // end skip_email_exist_single;
        /**
         * We check the POST variable to change the email, preventing the block from WordPress.
         *
         * @since 2.0.0
         * @return void
         */
        public function check_post_for_register()
        {
        }
        // end check_post_for_register;
        /**
         * We change the email back to the original.
         *
         * @since 2.0.0
         *
         * @param array $user_data The user data.
         * @return array
         */
        public function new_costumer_original_email($user_data)
        {
        }
        // end new_costumer_original_email;
        /**
         * Check if user can do something in a specific blog.
         *
         * @since 2.0.0
         *
         * @param WP_User $user The user object.
         * @param int     $blog_id The blog id.
         * @param string  $capability Capability to check against.
         * @return boolean
         */
        public function user_can_for_blog($user, $blog_id, $capability)
        {
        }
        // end user_can_for_blog;
        /**
         * Gets the right user for a given domain.
         *
         * @since 2.0.0
         *
         * @param string  $email User email address.
         * @param boolean $password User password.
         * @return WP_User|false
         */
        protected function get_right_user($email, $password = false)
        {
        }
    }
    /**
     * Handles product compatibility back-ports to WP Ultimo 1.X builds.
     *
     * @since 2.0.0
     */
    class Product_Compat
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Saves meta data from old plugins on the new plugin.
         *
         * @since 2.0.0
         *
         * @param null   $null Short-circuit control.
         * @param int    $object_id Object ID, in this case, of the Post object.
         * @param string $meta_key The meta key being saved.
         * @param mixed  $meta_value The meta value.
         * @param mixed  $prev_value The previous value.
         * @return null
         */
        public function check_update_plan($null, $object_id, $meta_key, $meta_value, $prev_value)
        {
        }
        // end check_update_plan;
        /**
         * Injects the compatibility panels to products Advanced Options.
         *
         * @since 2.0.0
         *
         * @param array                     $sections List of tabbed widget sections.
         * @param \WP_Ultimo\Models\Product $object The model being edited.
         * @return array
         */
        public function add_legacy_section($sections, $object)
        {
        }
    }
}
namespace WP_Ultimo\Database\Engine {
    /**
     * The base class that all other database base classes extend.
     *
     * This class attempts to provide some universal immutability to all other
     * classes that extend it, starting with a magic getter, but likely expanding
     * into a magic call handler and others.
     *
     * @since 1.0.0
     */
    class Query extends \WP_Ultimo\Dependencies\BerlinDB\Database\Query
    {
        /**
         * The prefix for the custom table.
         *
         * @since 2.0.0
         * @var string
         */
        protected $prefix = 'wu';
        /**
         * Get the plural name.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_plural_name()
        {
        }
    }
}
namespace WP_Ultimo\Database\Posts {
    /**
     * Class used for querying posts.
     *
     * @since 2.0.0
     */
    class Post_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'posts';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'po';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Posts\\Posts_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'post';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'posts';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Post_Base_Model';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'posts';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function query($query = array())
        {
        }
    }
}
namespace WP_Ultimo\Database\Broadcasts {
    /**
     * Class used for querying broadcasts.
     *
     * @since 2.0.0
     */
    class Broadcast_Query extends \WP_Ultimo\Database\Posts\Post_Query
    {
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'post';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'posts';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Broadcast';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'posts';
        /**
         * Modifies the query call to add our types.
         *
         * @since 2.0.0
         *
         * @param array $query Query parameters being passed.
         * @return array
         */
        public function query($query = array())
        {
        }
    }
}
namespace WP_Ultimo\Database\Checkout_Forms {
    /**
     * Class used for querying forms.
     *
     * @since 2.0.0
     */
    class Checkout_Form_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'forms';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'f';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Checkout_Forms\\Checkout_Forms_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'form';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'forms';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Checkout_Form';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'forms';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
}
namespace WP_Ultimo\Database\Engine {
    /**
     * The base class that all other database base classes extend.
     *
     * This class attempts to provide some universal immutability to all other
     * classes that extend it, starting with a magic getter, but likely expanding
     * into a magic call handler and others.
     *
     * @since 1.0.0
     */
    abstract class Table extends \WP_Ultimo\Dependencies\BerlinDB\Database\Table
    {
        /**
         * Table prefix.
         *
         * @since 2.0.0
         * @var string
         */
        protected $prefix = 'wu';
        /**
         * Caches the SHOW TABLES result.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $_exists;
        /**
         * Overrides the is_upgradeable method.
         *
         * We need to do this because we are using the table object
         * early in the lifecycle, which means that upgrade.php is not
         * available.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_upgradeable()
        {
        }
        // end is_upgradeable;
        /**
         * Adds a caching layer to the parent exists method.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function exists()
        {
        }
    }
}
namespace WP_Ultimo\Database\Checkout_Forms {
    /**
     * Setup the "wu_formmeta" database table
     *
     * @since 2.0.0
     */
    final class Checkout_Forms_Meta_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'formmeta';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Posts constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
}
namespace WP_Ultimo\Database\Engine {
    /**
     * The base class that all other database base classes extend.
     *
     * This class attempts to provide some universal immutability to all other
     * classes that extend it, starting with a magic getter, but likely expanding
     * into a magic call handler and others.
     *
     * @since 1.0.0
     */
    class Schema extends \WP_Ultimo\Dependencies\BerlinDB\Database\Schema
    {
        protected $prefix = 'wu';
    }
}
namespace WP_Ultimo\Database\Checkout_Forms {
    /**
     * Checkout_Forms Schema Class.
     *
     * @since 2.0.0
     */
    class Checkout_Forms_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true), array('name' => 'name', 'type' => 'varchar', 'searchable' => true, 'sortable' => true, 'transition' => true), array('name' => 'slug', 'type' => 'tinytext', 'default' => '', 'searchable' => true, 'sortable' => true, 'transition' => true), array('name' => 'active', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 1, 'transition' => true, 'sortable' => true), array('name' => 'settings', 'type' => 'longtext', 'default' => '', 'transition' => true), array('name' => 'custom_css', 'type' => 'longtext', 'default' => ''), array('name' => 'allowed_countries', 'type' => 'text', 'default' => ''), array('name' => 'date_created', 'type' => 'datetime', 'default' => null, 'created' => true, 'date_query' => true, 'sortable' => true), array('name' => 'date_modified', 'type' => 'datetime', 'default' => null, 'modified' => true, 'date_query' => true, 'sortable' => true));
    }
    /**
     * Setup the "wu_events" database table
     *
     * @since 2.0.0
     */
    final class Checkout_Forms_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'forms';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Event constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
}
namespace WP_Ultimo\Database\Customers {
    /**
     * Class used for querying webhooks.
     *
     * @since 2.0.0
     */
    class Customer_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'customers';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'c';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Customers\\Customers_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'customer';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'customers';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Customer';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'customers';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
    /**
     * Setup the "wu_customermeta" database table
     *
     * @since 2.0.0
     */
    final class Customers_Meta_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'customermeta';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Customers constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
    /**
     * Customers Schema Class.
     *
     * @since 2.0.0
     */
    class Customers_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(
            // id
            array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true, 'searchable' => true),
            // user_id
            array('name' => 'user_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'searchable' => true),
            array('name' => 'type', 'type' => 'varchar', 'default' => 'customer', 'searchable' => true, 'sortable' => true),
            // date_registered
            array('name' => 'date_registered', 'type' => 'datetime', 'default' => null, 'created' => true, 'date_query' => true, 'sortable' => true),
            // email_verification
            array('name' => 'email_verification', 'type' => 'enum(\'verified\', \'pending\', \'none\')', 'default' => 'none', 'transition' => true),
            // last_login
            array('name' => 'last_login', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true),
            // has_trialed
            array('name' => 'has_trialed', 'type' => 'smallint', 'length' => '', 'unsigned' => true, 'default' => null, 'transition' => true),
            // vip
            array('name' => 'vip', 'type' => 'smallint', 'length' => '', 'unsigned' => true, 'default' => 0, 'transition' => true, 'sortable' => true),
            // ips
            array('name' => 'ips', 'type' => 'longtext', 'default' => '', 'searchable' => true),
            // Added on 2.0 beta 7
            array('name' => 'signup_form', 'type' => 'varchar', 'default' => 'by-admin', 'searchable' => true, 'sortable' => true),
        );
    }
    /**
     * Setup the "wu_customers" database table
     *
     * @since 2.0.0
     */
    final class Customers_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'customers';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.1-revision.20210607';
        /**
         * List of table upgrades.
         *
         * @var array
         */
        protected $upgrades = array('2.0.1-revision.20210508' => 20210508, '2.0.1-revision.20210607' => 20210607);
        /**
         * Customer constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
        // end set_schema;
        /**
         * Adds the signup_form column.
         *
         * This does not work on older versions of MySQl, so we needed
         * the other migration below.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function __20210508()
        {
        }
        // end __20210508;
        /**
         * Adds the signup_form column.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function __20210607()
        {
        }
    }
}
namespace WP_Ultimo\Database\Discount_Codes {
    /**
     * Class used for querying discount codes.
     *
     * @since 2.0.0
     */
    class Discount_Code_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'discount_codes';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'dc';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Discount_Codes\\Discount_Codes_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'discount_code';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'discount_codes';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Discount_Code';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'discount_codes';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
    /**
     * Setup the "wu_discount_codemeta" database table
     *
     * @since 2.0.0
     */
    final class Discount_Codes_Meta_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'discount_codemeta';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Products constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
    /**
     * Discount Codes Schema Class.
     *
     * @since 2.0.0
     */
    class Discount_Codes_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true), array('name' => 'name', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'code', 'type' => 'varchar', 'length' => '20', 'sortable' => true, 'searchable' => true, 'transition' => true), array('name' => 'description', 'type' => 'longtext', 'default' => '', 'searchable' => true), array('name' => 'uses', 'type' => 'int', 'unsigned' => true, 'sortable' => true, 'transition' => true), array('name' => 'max_uses', 'type' => 'int', 'unsigned' => true, 'sortable' => true, 'transition' => true), array('name' => 'apply_to_renewals', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 0, 'transition' => true, 'sortable' => true), array('name' => 'type', 'type' => 'enum(\'percentage\', \'absolute\')', 'default' => 'percentage', 'transition' => true), array('name' => 'value', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true), array('name' => 'setup_fee_type', 'type' => 'enum(\'percentage\', \'absolute\')', 'default' => 'percentage', 'transition' => true), array('name' => 'setup_fee_value', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true), array('name' => 'active', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 1, 'transition' => true, 'sortable' => true), array('name' => 'date_start', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true, 'transition' => true), array('name' => 'date_expiration', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true, 'transition' => true), array('name' => 'date_created', 'type' => 'datetime', 'default' => null, 'created' => true, 'date_query' => true, 'sortable' => true), array('name' => 'date_modified', 'type' => 'datetime', 'default' => null, 'modified' => true, 'date_query' => true, 'sortable' => true));
    }
    /**
     * Setup the "wu_discount_codes" database table
     *
     * @since 2.0.0
     */
    final class Discount_Codes_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'discount_codes';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Discount_Code constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
}
namespace WP_Ultimo\Database\Domains {
    /**
     * Class used for querying domain mappings.
     *
     * @since 2.0.0
     */
    class Domain_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'domain_mappings';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'd';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Domains\\Domains_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'domain';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'domains';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Domain';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'domains';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
}
namespace WP_Ultimo\Database\Engine {
    /**
     * WP Ultimo ENUM base class.
     *
     * @since 2.0.0
     */
    abstract class Enum
    {
        /**
         * The default value.
         */
        const __default = false;
        // phpcs:ignore
        /**
         * The options available.
         *
         * @since 2.0.0
         * @var array
         */
        static $options = array();
        /**
         * The value.
         *
         * @since 2.0.0
         * @var string
         */
        private $value;
        /**
         * Constructor method. Takes the value you want to set.
         *
         * @since 2.0.0
         *
         * @param string $value The value to be set.
         */
        public function __construct($value = '')
        {
        }
        // end __construct;
        // Needs to be Implemented
        /**
         * Returns an array with values => CSS Classes.
         *
         * @since 2.0.0
         * @return array
         */
        protected abstract function classes();
        /**
         * Returns an array with values => labels.
         *
         * @since 2.0.0
         * @return void
         */
        protected abstract function labels();
        /**
         * Returns an array with values => labels.
         *
         * @since 2.0.0
         * @return void
         */
        protected function icon_classes()
        {
        }
        // end icon_classes;
        /**
         * Returns the options available as constants.
         *
         * @since 2.0.0
         * @return array
         */
        public static function get_options()
        {
        }
        // end get_options;
        public static function get_allowed_list($string = false)
        {
        }
        // end get_allowed_list;
        /**
         * Returns the value loaded here.
         *
         * This runs through is_valid and returns the
         * default value if a invalid value is passed on.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_value()
        {
        }
        // end get_value;
        /**
         * Check for the the validity of the value passed.
         *
         * @since 2.0.0
         *
         * @param string $value The string.
         * @return boolean
         */
        public function is_valid($value)
        {
        }
        // end is_valid;
        /**
         * Returns the label of a given value.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_label()
        {
        }
        // end get_label;
        /**
         * Returns the classes of a given value.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_classes()
        {
        }
        // end get_classes;
        /**
         * Returns the classes of a given value.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_icon_classes()
        {
        }
        // end get_icon_classes;
        /**
         * Returns an array of options.
         *
         * @since 2.0.0
         * @return void
         */
        public static function to_array()
        {
        }
        // end to_array;
        /**
         * Get the hook name for this class, so we can add filters.
         *
         * @since 2.0.0
         * @return string
         */
        public static function get_hook_name()
        {
        }
        // end get_hook_name;
        /**
         * Checks if a key exists on an array, otherwise returns a default value.
         *
         * @since 2.0.0
         *
         * @param array  $array The array to check.
         * @param string $key The key to check.
         * @param string $default The default value.
         * @return string
         */
        public function exists_or_default($array, $key, $default = '')
        {
        }
        // end exists_or_default;
        /**
         * Converts this to string.
         *
         * @since 2.0.0
         * @return string
         */
        public function __toString()
        {
        }
        // end __toString;
        /**
         * Magic method to allow for constants to be called.
         *
         * @since 2.0.0
         *
         * @param string $name The name of the constants.
         * @param array  $arguments The list of arguments. Not really needed here.
         * @return string
         */
        public static function __callStatic($name, $arguments)
        {
        }
    }
}
namespace WP_Ultimo\Database\Domains {
    /**
     * Domain Stage.
     *
     * @since 2.0.0
     */
    class Domain_Stage extends \WP_Ultimo\Database\Engine\Enum
    {
        /**
         * Default product type.
         */
        const __default = 'checking-dns';
        // phpcs:ignore
        const FAILED = 'failed';
        const CHECKING_DNS = 'checking-dns';
        const CHECKING_SSL = 'checking-ssl-cert';
        const DONE_WITHOUT_SSL = 'done-without-ssl';
        const DONE = 'done';
        /**
         * Returns an array with values => CSS Classes.
         *
         * @since 2.0.0
         * @return array
         */
        protected function classes()
        {
        }
        // end classes;
        /**
         * Returns an array with values => labels.
         *
         * @since 2.0.0
         * @return array
         */
        protected function labels()
        {
        }
    }
    /**
     * Domains Schema Class.
     *
     * @since 2.0.0
     */
    class Domains_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true), array('name' => 'blog_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'aliases' => array('site_id', 'site'), 'searchable' => true, 'sortable' => true), array('name' => 'domain', 'type' => 'varchar', 'searchable' => true, 'sortable' => true, 'transition' => true), array('name' => 'active', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 1, 'transition' => true, 'sortable' => true), array('name' => 'primary_domain', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 0, 'transition' => true, 'sortable' => true), array('name' => 'secure', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 0, 'transition' => true, 'sortable' => true), array('name' => 'stage', 'type' => 'enum(\'checking-dns\', \'checking-ssl-cert\', \'done-without-ssl\', \'done\', \'failed\')', 'default' => 'checking-dns', 'transition' => true, 'sortable' => true), array('name' => 'date_created', 'type' => 'datetime', 'default' => null, 'created' => true, 'date_query' => true, 'sortable' => true), array('name' => 'date_modified', 'type' => 'datetime', 'default' => null, 'modified' => true, 'date_query' => true, 'sortable' => true));
    }
    /**
     * Setup the "wu_domain_mapping" database table
     *
     * @since 2.0.0
     */
    final class Domains_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'domain_mappings';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Domains constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
}
namespace WP_Ultimo\Database\Emails {
    /**
     * Class used for querying emails.
     *
     * @since 2.0.0
     */
    class Email_Query extends \WP_Ultimo\Database\Posts\Post_Query
    {
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'post';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'posts';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Email';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'posts';
        /**
         * Modifies the query call to add our types.
         *
         * @since 2.0.0
         *
         * @param array $query Query parameters being passed.
         * @return array
         */
        public function query($query = array())
        {
        }
    }
}
namespace WP_Ultimo\Database\Engine {
    /**
     * The base class that all other database base classes extend.
     *
     * This class attempts to provide some universal immutability to all other
     * classes that extend it, starting with a magic getter, but likely expanding
     * into a magic call handler and others.
     *
     * @since 1.0.0
     */
    class Base extends \WP_Ultimo\Dependencies\BerlinDB\Database\Base
    {
        protected $prefix = 'wu';
    }
    /**
     * The base class that all other database base classes extend.
     *
     * This class attempts to provide some universal immutability to all other
     * classes that extend it, starting with a magic getter, but likely expanding
     * into a magic call handler and others.
     *
     * @since 1.0.0
     */
    class Column extends \WP_Ultimo\Dependencies\BerlinDB\Database\Column
    {
        protected $prefix = 'wu';
    }
    /**
     * The base class that all other database base classes extend.
     *
     * This class attempts to provide some universal immutability to all other
     * classes that extend it, starting with a magic getter, but likely expanding
     * into a magic call handler and others.
     *
     * @since 1.0.0
     */
    class Compare extends \WP_Ultimo\Dependencies\BerlinDB\Database\Compare
    {
    }
    /**
     * The base class that all other database base classes extend.
     *
     * This class attempts to provide some universal immutability to all other
     * classes that extend it, starting with a magic getter, but likely expanding
     * into a magic call handler and others.
     *
     * @since 1.0.0
     */
    class Date extends \WP_Ultimo\Dependencies\BerlinDB\Database\Date
    {
    }
    /**
     * The base class that all other database base classes extend.
     *
     * This class attempts to provide some universal immutability to all other
     * classes that extend it, starting with a magic getter, but likely expanding
     * into a magic call handler and others.
     *
     * @since 1.0.0
     */
    class Meta extends \WP_Ultimo\Dependencies\BerlinDB\Database\Meta
    {
    }
    /**
     * The base class that all other database base classes extend.
     *
     * This class attempts to provide some universal immutability to all other
     * classes that extend it, starting with a magic getter, but likely expanding
     * into a magic call handler and others.
     *
     * @since 1.0.0
     */
    class Row extends \WP_Ultimo\Dependencies\BerlinDB\Database\Row
    {
        protected $prefix = 'wu';
    }
}
namespace WP_Ultimo\Database\Events {
    /**
     * Class used for querying events.
     *
     * @since 2.0.0
     */
    class Event_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'events';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'e';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Events\\Events_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'event';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'events';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Event';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'events';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
    /**
     * Events Schema Class.
     *
     * @since 2.0.0
     */
    class Events_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true), array('name' => 'severity', 'type' => 'tinyint', 'length' => '1', 'unsigned' => true, 'sortable' => true), array('name' => 'initiator', 'type' => 'enum(\'system\', \'manual\')', 'default' => 'none'), array('name' => 'author_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true, 'transition' => true), array('name' => 'object_type', 'type' => 'varchar', 'length' => 20, 'default' => 'network', 'sortable' => true, 'searchable' => true), array('name' => 'object_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true, 'transition' => true), array('name' => 'slug', 'type' => 'longtext', 'default' => ''), array('name' => 'payload', 'type' => 'longtext', 'default' => ''), array('name' => 'date_created', 'type' => 'datetime', 'default' => null, 'created' => true, 'date_query' => true, 'sortable' => true));
    }
    /**
     * Setup the "wu_events" database table
     *
     * @since 2.0.0
     */
    final class Events_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'events';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Event constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
}
namespace WP_Ultimo\Database\Memberships {
    /**
     * Class used for querying memberships.
     *
     * @since 2.0.0
     */
    class Membership_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'memberships';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'm';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Memberships\\Memberships_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'membership';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'memberships';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Membership';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'memberships';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
    /**
     * Membership Status.
     *
     * @since 2.0.0
     */
    class Membership_Status extends \WP_Ultimo\Database\Engine\Enum
    {
        /**
         * Default product type.
         */
        const __default = 'pending';
        // phpcs:ignore
        const PENDING = 'pending';
        const ACTIVE = 'active';
        const TRIALING = 'trialing';
        const EXPIRED = 'expired';
        const ON_HOLD = 'on-hold';
        const CANCELLED = 'cancelled';
        /**
         * Returns an array with values => CSS Classes.
         *
         * @since 2.0.0
         * @return array
         */
        protected function classes()
        {
        }
        // end classes;
        /**
         * Returns an array with values => labels.
         *
         * @since 2.0.0
         * @return array
         */
        protected function labels()
        {
        }
    }
    /**
     * Setup the "wu_membershipmeta" database table
     *
     * @since 2.0.0
     */
    final class Memberships_Meta_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'membershipmeta';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Memberships constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
    /**
     * Memberships Schema Class.
     *
     * @since 2.0.0
     */
    class Memberships_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(
            // id
            array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true, 'searchable' => true),
            // customer_id
            array('name' => 'customer_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true),
            // user_id
            array('name' => 'user_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'default' => null, 'allow_null' => true),
            array('name' => 'migrated_from_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true),
            // object_id
            array('name' => 'plan_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true, 'transition' => true),
            // addons
            array('name' => 'addon_products', 'type' => 'longtext'),
            // currency
            array('name' => 'currency', 'type' => 'varchar', 'length' => '20', 'default' => 'USD', 'sortable' => true),
            array('name' => 'initial_amount', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true),
            array('name' => 'recurring', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 1, 'transition' => true, 'sortable' => true),
            array('name' => 'auto_renew', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 0, 'transition' => true, 'sortable' => true),
            array('name' => 'duration', 'type' => 'smallint', 'unsigned' => true, 'default' => '0', 'sortable' => true, 'transition' => true),
            array('name' => 'duration_unit', 'type' => 'enum(\'day\', \'month\', \'week\', \'year\')', 'default' => 'none'),
            array('name' => 'amount', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true),
            // date_created
            array('name' => 'date_created', 'type' => 'datetime', 'default' => null, 'created' => true, 'date_query' => true, 'sortable' => true),
            // date_activated
            array('name' => 'date_activated', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true),
            // date_trial_end
            array('name' => 'date_trial_end', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true),
            // date_renewed
            array('name' => 'date_renewed', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true),
            // date_cancellation
            array('name' => 'date_cancellation', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true),
            // date_expiration
            array('name' => 'date_expiration', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true, 'transition' => true),
            // date_payment_plan_completed
            array('name' => 'date_payment_plan_completed', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true, 'transition' => true),
            // auto_renew
            array('name' => 'auto_renew', 'type' => 'smallint', 'unsigned' => true, 'default' => '0', 'transition' => true),
            // times_billed
            array('name' => 'times_billed', 'type' => 'smallint', 'unsigned' => true, 'default' => '0', 'sortable' => true, 'transition' => true),
            // billing_cycles
            array('name' => 'billing_cycles', 'type' => 'smallint', 'unsigned' => true, 'default' => '0', 'sortable' => true),
            // status
            array('name' => 'status', 'type' => 'varchar', 'length' => '12', 'default' => 'pending', 'sortable' => true, 'transition' => true),
            // gateway_customer_id
            array('name' => 'gateway_customer_id', 'type' => 'tinytext', 'default' => '', 'searchable' => true, 'sortable' => true, 'transition' => true),
            // gateway_subscription_id
            array('name' => 'gateway_subscription_id', 'type' => 'tinytext', 'default' => '', 'searchable' => true, 'sortable' => true, 'transition' => true),
            // gateway
            array('name' => 'gateway', 'type' => 'tinytext', 'default' => '', 'searchable' => true),
            // signup_method
            array('name' => 'signup_method', 'type' => 'tinytext', 'default' => ''),
            // subscription_key
            array('name' => 'subscription_key', 'type' => 'varchar', 'length' => '32', 'default' => '', 'searchable' => true, 'sortable' => true),
            // upgraded_from
            array('name' => 'upgraded_from', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'default' => ''),
            // date_modified
            array('name' => 'date_modified', 'type' => 'datetime', 'default' => null, 'modified' => true, 'date_query' => true, 'sortable' => true),
            // disabled
            array('name' => 'disabled', 'type' => 'smallint', 'unsigned' => true, 'default' => '', 'pattern' => '%d'),
        );
    }
    /**
     * Setup the "wu_membership" database table
     *
     * @since 2.0.0
     */
    final class Memberships_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'memberships';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Memberships constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema.
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
}
namespace WP_Ultimo\Database\Payments {
    /**
     * Class used for querying payments.
     *
     * @since 2.0.0
     */
    class Payment_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'payments';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'pay';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Payments\\Payments_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'payment';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'payments';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Payment';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'payments';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
    /**
     * Payment Status.
     *
     * @since 2.0.0
     */
    class Payment_Status extends \WP_Ultimo\Database\Engine\Enum
    {
        /**
         * Default product type.
         */
        const __default = 'pending';
        // phpcs:ignore
        const PENDING = 'pending';
        const COMPLETED = 'completed';
        const REFUND = 'refunded';
        const PARTIAL_REFUND = 'partially-refunded';
        const PARTIAL = 'partially-paid';
        const FAILED = 'failed';
        const CANCELLED = 'cancelled';
        /**
         * Returns an array with values => CSS Classes.
         *
         * @since 2.0.0
         * @return array
         */
        protected function classes()
        {
        }
        // end classes;
        /**
         * Returns an array with values => CSS Classes.
         *
         * @since 2.0.0
         * @return array
         */
        protected function icon_classes()
        {
        }
        // end icon_classes;
        /**
         * Returns an array with values => labels.
         *
         * @since 2.0.0
         * @return array
         */
        protected function labels()
        {
        }
    }
    /**
     * Setup the "wu_paymentmeta" database table
     *
     * @since 2.0.0
     */
    final class Payments_Meta_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'paymentmeta';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Payments constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
    /**
     * Payments Schema Class.
     *
     * @since 2.0.0
     */
    class Payments_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(
            // id
            array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true, 'searchable' => true),
            array('name' => 'status', 'type' => 'varchar', 'length' => '12', 'default' => 'pending', 'sortable' => true, 'transition' => true),
            // customer_id
            array('name' => 'customer_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'transition' => true),
            array('name' => 'membership_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'transition' => true),
            array('name' => 'parent_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'transition' => true, 'sortable' => true),
            array('name' => 'product_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true, 'transition' => true),
            array('name' => 'migrated_from_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true),
            // currency
            array('name' => 'currency', 'type' => 'varchar', 'length' => '20', 'default' => 'USD', 'sortable' => true),
            array('name' => 'discount_code', 'type' => 'tinytext', 'default' => '', 'searchable' => true, 'sortable' => true),
            array('name' => 'discount_total', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true),
            array('name' => 'subtotal', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true),
            array('name' => 'refund_total', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true),
            array('name' => 'tax_total', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true),
            array('name' => 'total', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true),
            // gateway
            array('name' => 'gateway', 'type' => 'tinytext', 'default' => '', 'searchable' => true),
            // gateway
            array('name' => 'gateway_payment_id', 'type' => 'tinytext', 'default' => '', 'searchable' => true),
            // date_created
            array('name' => 'date_created', 'type' => 'datetime', 'created' => true, 'date_query' => true, 'sortable' => true),
            // date_modified
            array('name' => 'date_modified', 'type' => 'datetime', 'modified' => true, 'date_query' => true, 'sortable' => true),
        );
    }
    /**
     * Setup the "wu_payments" database table
     *
     * @since 2.0.0
     */
    final class Payments_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'payments';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.1-revision.20210607';
        /**
         * List of table upgrades.
         *
         * @var array
         */
        protected $upgrades = array('2.0.1-revision.20210417' => 20210417, '2.0.1-revision.20210607' => 20210607);
        /**
         * Payments constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema.
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
        // end set_schema;
        /**
         * Adds the refund_total column.
         *
         * This does not work on older versions of MySQL, so we needed
         * the other migration below.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function __20210417()
        {
        }
        // end __20210417;
        /**
         * Adds the refund_total column.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function __20210607()
        {
        }
    }
}
namespace WP_Ultimo\Database\Posts {
    /**
     * Setup the "wu_postmeta" database table
     *
     * @since 2.0.0
     */
    final class Posts_Meta_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'postmeta';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Posts constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
    /**
     * Posts Schema Class.
     *
     * @since 2.0.0
     */
    class Posts_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true), array('name' => 'author_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true), array('name' => 'type', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'slug', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'title', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'content', 'type' => 'longtext', 'default' => '', 'searchable' => true), array('name' => 'excerpt', 'type' => 'longtext', 'default' => '', 'searchable' => true), array('name' => 'list_order', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 10, 'transition' => true, 'sortable' => true), array(
            'name' => 'status',
            'type' => 'varchar',
            // An "enum" here would possibly limit custom post status.
            'default' => 'draft',
            'transition' => true,
            'sortable' => true,
        ), array('name' => 'date_created', 'type' => 'datetime', 'default' => null, 'created' => true, 'date_query' => true, 'sortable' => true), array('name' => 'date_modified', 'type' => 'datetime', 'default' => null, 'modified' => true, 'date_query' => true, 'sortable' => true));
    }
    /**
     * Setup the "wu_post" database table
     *
     * @since 2.0.0
     */
    final class Posts_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'posts';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Posts constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
}
namespace WP_Ultimo\Database\Products {
    /**
     * Class used for querying products.
     *
     * @since 2.0.0
     */
    class Product_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'products';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'p';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Products\\Products_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'product';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'products';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Product';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'products';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
    /**
     * Product Types.
     *
     * @since 2.0.0
     */
    class Product_Type extends \WP_Ultimo\Database\Engine\Enum
    {
        /**
         * Default product type.
         */
        const __default = 'plan';
        // phpcs:ignore
        const PLAN = 'plan';
        const PACKAGE = 'package';
        const SERVICE = 'service';
        /**
         * Returns an array with values => CSS Classes.
         *
         * @since 2.0.0
         * @return array
         */
        protected function classes()
        {
        }
        // end classes;
        /**
         * Returns an array with values => labels.
         *
         * @since 2.0.0
         * @return array
         */
        protected function labels()
        {
        }
    }
    /**
     * Setup the "wu_productmeta" database table
     *
     * @since 2.0.0
     */
    final class Products_Meta_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'productmeta';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Products constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
    /**
     * Products Schema Class.
     *
     * @since 2.0.0
     */
    class Products_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true), array('name' => 'slug', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'parent_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true, 'transition' => true), array('name' => 'migrated_from_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true), array('name' => 'name', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'description', 'type' => 'longtext', 'default' => '', 'searchable' => true), array('name' => 'product_group', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'currency', 'type' => 'varchar', 'length' => '10', 'default' => 'USD', 'sortable' => true), array('name' => 'pricing_type', 'type' => 'varchar', 'length' => '10', 'default' => 'paid', 'sortable' => true), array('name' => 'amount', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true), array('name' => 'setup_fee', 'type' => 'decimal(13,4)', 'default' => '', 'sortable' => true, 'transition' => true), array('name' => 'recurring', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 1, 'transition' => true, 'sortable' => true), array('name' => 'trial_duration', 'type' => 'smallint', 'unsigned' => true, 'default' => '0', 'sortable' => true, 'transition' => true), array('name' => 'trial_duration_unit', 'type' => 'enum(\'day\', \'month\', \'week\', \'year\')', 'default' => 'none'), array('name' => 'duration', 'type' => 'smallint', 'unsigned' => true, 'default' => '0', 'sortable' => true, 'transition' => true), array('name' => 'duration_unit', 'type' => 'enum(\'day\', \'month\', \'week\', \'year\')', 'default' => 'none'), array('name' => 'billing_cycles', 'type' => 'smallint', 'unsigned' => true, 'default' => '0', 'sortable' => true, 'transition' => true), array('name' => 'list_order', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 10, 'transition' => true, 'sortable' => true), array('name' => 'active', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 1, 'transition' => true, 'sortable' => true), array('name' => 'date_created', 'type' => 'datetime', 'default' => null, 'created' => true, 'date_query' => true, 'sortable' => true), array('name' => 'date_modified', 'type' => 'datetime', 'default' => null, 'modified' => true, 'date_query' => true, 'sortable' => true), array('name' => 'type', 'type' => 'varchar', 'searchable' => true, 'sortable' => true));
    }
    /**
     * Setup the "wu_product" database table
     *
     * @since 2.0.0
     */
    final class Products_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'products';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.1-revision.20210607';
        /**
         * List of table upgrades.
         *
         * @var array
         */
        protected $upgrades = array('2.0.1-revision.20210419' => 20210419, '2.0.1-revision.20210607' => 20210607);
        /**
         * Products constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
        // end set_schema;
        /**
         * Adds the product_group column.
         *
         * This does not work on older versions of MySQL, so we needed
         * the other migration below.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function __20210419()
        {
        }
        // end __20210419;
        /**
         * Adds the product_group column.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function __20210607()
        {
        }
    }
}
namespace WP_Ultimo\Database\Sites {
    /**
     * Class used for querying products.
     *
     * @since 2.0.0
     */
    class Site_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /**
         * Table prefix, including the site prefix.
         *
         * @since 1.0.0
         * @var   string
         */
        protected $prefix = '';
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'blogs';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 's';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Sites\\Sites_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'blog';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'blogs';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Site';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'sites';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
    /**
     * Site Types.
     *
     * @since 2.0.0
     */
    class Site_Type extends \WP_Ultimo\Database\Engine\Enum
    {
        /**
         * Default type.
         */
        const __default = 'default';
        // phpcs:ignore
        const REGULAR = 'default';
        const SITE_TEMPLATE = 'site_template';
        const CUSTOMER_OWNED = 'customer_owned';
        const PENDING = 'pending';
        const EXTERNAL = 'external';
        const MAIN = 'main';
        /**
         * Returns an array with values => CSS Classes.
         *
         * @since 2.0.0
         * @return array
         */
        protected function classes()
        {
        }
        // end classes;
        /**
         * Returns an array with values => labels.
         *
         * @since 2.0.0
         * @return array
         */
        protected function labels()
        {
        }
    }
    /**
     * Setup the "wu_productmeta" database table
     *
     * @since 2.0.0
     */
    final class Sites_Meta_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table prefix, including the site prefix.
         *
         * @since 1.0.0
         * @var   string
         */
        protected $prefix = '';
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'blogmeta';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Sites constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
    /**
     * Sites Schema Class.
     *
     * @since 2.0.0
     */
    class Sites_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Table prefix, including the site prefix.
         *
         * @since 1.0.0
         * @var   string
         */
        protected $prefix = '';
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(array('name' => 'blog_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true, 'aliases' => array('id', 'ID'), 'searchable' => true), array('name' => 'site_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true), array('name' => 'domain', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'path', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'registered', 'type' => 'datetime', 'default' => '0000-00-00 00:00:00', 'modified' => true, 'date_query' => true, 'sortable' => true), array('name' => 'last_updated', 'type' => 'datetime', 'default' => '0000-00-00 00:00:00', 'modified' => true, 'date_query' => true, 'sortable' => true), array('name' => 'public', 'type' => 'tinyint', 'length' => '2', 'unsigned' => true, 'default' => 1, 'sortable' => true), array('name' => 'archived', 'type' => 'tinyint', 'length' => '2', 'unsigned' => true, 'default' => 0, 'sortable' => true), array('name' => 'mature', 'type' => 'tinyint', 'length' => '2', 'unsigned' => true, 'default' => 0, 'sortable' => true), array('name' => 'spam', 'type' => 'tinyint', 'length' => '2', 'unsigned' => true, 'default' => 0, 'sortable' => true), array('name' => 'deleted', 'type' => 'tinyint', 'length' => '2', 'unsigned' => true, 'default' => 0, 'sortable' => true), array('name' => 'lang_id', 'type' => 'int', 'length' => '11', 'unsigned' => true, 'default' => 0, 'sortable' => true));
    }
    /**
     * Setup the "wp_blog" database table
     *
     * @since 2.0.0
     */
    final class Sites_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table prefix, including the site prefix.
         *
         * @since 1.0.0
         * @var   string
         */
        protected $prefix = '';
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'blogs';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Sites constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
        // end set_schema;
        /**
         * Do nothing as this table already exists.
         *
         * @since 2.0.0
         */
        public function install()
        {
        }
    }
}
namespace WP_Ultimo\Database\Webhooks {
    /**
     * Class used for querying webhooks.
     *
     * @since 2.0.0
     */
    class Webhook_Query extends \WP_Ultimo\Database\Engine\Query
    {
        /** Table Properties ******************************************************/
        /**
         * Name of the database table to query.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_name = 'webhooks';
        /**
         * String used to alias the database table in MySQL statement.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_alias = 'w';
        /**
         * Name of class used to setup the database schema
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $table_schema = '\\WP_Ultimo\\Database\\Webhooks\\Webhooks_Schema';
        /** Item ******************************************************************/
        /**
         * Name for a single item
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name = 'webhook';
        /**
         * Plural version for a group of items.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $item_name_plural = 'webhooks';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $item_shape = '\\WP_Ultimo\\Models\\Webhook';
        /**
         * Group to cache queries and queried items in.
         *
         * @since  2.0.0
         * @access public
         * @var string
         */
        protected $cache_group = 'webhooks';
        /**
         * Sets up the customer query, based on the query vars passed.
         *
         * @since  2.0.0
         * @access public
         *
         * @param string|array $query Array of query arguments.
         */
        public function __construct($query = array())
        {
        }
    }
    /**
     * Webhooks Schema Class.
     *
     * @since 2.0.0
     */
    class Webhooks_Schema extends \WP_Ultimo\Database\Engine\Schema
    {
        /**
         * Array of database column objects
         *
         * @since  2.0.0
         * @access public
         * @var array
         */
        public $columns = array(array('name' => 'id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'extra' => 'auto_increment', 'primary' => true, 'sortable' => true), array('name' => 'migrated_from_id', 'type' => 'bigint', 'length' => '20', 'unsigned' => true, 'sortable' => true), array('name' => 'name', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'webhook_url', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'event', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'event_count', 'type' => 'int', 'length' => '10', 'default' => 0, 'sortable' => true, 'aliases' => array('sent_events_count')), array('name' => 'active', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 1, 'transition' => true, 'sortable' => true), array('name' => 'hidden', 'type' => 'tinyint', 'length' => '4', 'unsigned' => true, 'default' => 0, 'transition' => true, 'sortable' => true), array('name' => 'integration', 'type' => 'varchar', 'searchable' => true, 'sortable' => true), array('name' => 'date_last_failed', 'type' => 'datetime', 'default' => null, 'date_query' => true, 'sortable' => true), array('name' => 'date_created', 'type' => 'datetime', 'default' => null, 'created' => true, 'date_query' => true, 'sortable' => true), array('name' => 'date_modified', 'type' => 'datetime', 'default' => null, 'modified' => true, 'date_query' => true, 'sortable' => true));
    }
    /**
     * Setup the "wu_webhooks" database table
     *
     * @since 2.0.0
     */
    final class Webhooks_Table extends \WP_Ultimo\Database\Engine\Table
    {
        /**
         * Table name
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = 'webhooks';
        /**
         * Is this table global?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $global = true;
        /**
         * Table current version
         *
         * @since 2.0.0
         * @var string
         */
        protected $version = '2.0.0';
        /**
         * Webhook constructor.
         *
         * @access public
         * @since  2.0.0
         * @return void
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Setup the database schema
         *
         * @access protected
         * @since  2.0.0
         * @return void
         */
        protected function set_schema()
        {
        }
    }
}
namespace WP_Ultimo\Debug {
    /**
     * Debugger Tools for developers.
     *
     * @since 1.9.14
     */
    class Debug
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * The registry of WP Ultimo admin pages.
         *
         * @since 2.0.0
         * @var array
         */
        private $pages = array();
        /**
         * Initializes main hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds the additional debug links.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_additional_hooks()
        {
        }
        // end add_additional_hooks;
        // phpcs:disable
        /**
         * Adds the debug links
         *
         * @since 2.0.0
         * @return void
         */
        public function add_debug_links()
        {
        }
        // end add_debug_links;
        // phpcs:enable
        /**
         * Register the forms for the fakers.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Adds the form to generate data.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_debug_generator_form()
        {
        }
        // end render_debug_generator_form;
        /**
         * Handles the checkout
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_debug_generator_form()
        {
        }
        // end handle_debug_generator_form;
        /**
         * Reset the database form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_debug_reset_database_form()
        {
        }
        // end render_debug_reset_database_form;
        /**
         * Handles the database reset.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_debug_reset_database_form()
        {
        }
        // end handle_debug_reset_database_form;
        /**
         * Reset the database form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_debug_drop_database_form()
        {
        }
        // end render_debug_drop_database_form;
        /**
         * Handles the database reset.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_debug_drop_database_form()
        {
        }
        // end handle_debug_drop_database_form;
        /**
         * Checks if we need to add the menu or not.
         *
         * To gain access to the debug menu, you'll need to add
         * define('WP_ULTIMO_DEBUG', true) to your wp-config.php file.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function should_load()
        {
        }
        // end should_load;
        /**
         * Loads the debug pages and functions if we should.
         *
         * @since 2.0.0
         * @return void
         */
        public function load()
        {
        }
        // end load;
        /**
         * Add a WP Ultimo page to the registry.
         *
         * @since 2.0.0
         *
         * @param string $page_id The page ID. e.g. wp-ultimo.
         * @return void
         */
        public function add_page($page_id)
        {
        }
        // end add_page;
        /**
         * Returns the pages registred.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_pages()
        {
        }
        // end get_pages;
        /**
         * Adds the debug menu pages.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_main_debug_menu()
        {
        }
        // end add_main_debug_menu;
        /**
         * Reset fake data.
         *
         * @since 2.0.0
         * @return void
         */
        private function reset_fake_data()
        {
        }
        // end reset_fake_data;
        /**
         * Reset all data.
         *
         * @since 2.0.0
         * @return void
         */
        private function reset_all_data()
        {
        }
        // end reset_all_data;
        /**
         * Reset table.
         *
         * @since 2.0.0
         * @param string $table The table name.
         * @param array  $ids The ids to delete.
         * @param string $field The name of the field to use in the WHERE clause.
         * @return void
         * @throws \Exception In case of failures, an exception is thrown.
         */
        private function reset_table($table, $ids = array(), $field = 'ID')
        {
        }
        // end reset_table;
        /**
         * Reset customers and customermeta table.
         *
         * @since 2.0.0
         * @param array $ids The ids to delete.
         * @return void
         * @throws \Exception In case of failures, an exception is thrown.
         */
        private function reset_customers($ids = array())
        {
        }
        // end reset_customers;
        /**
         * Reset customers and customermeta table.
         *
         * @since 2.0.0
         * @param array $ids The ids to delete.
         * @return void
         * @throws \Exception In case of failures, an exception is thrown.
         */
        private function reset_sites($ids = array())
        {
        }
        // end reset_sites;
        /**
         * Reset products and productmeta table.
         *
         * @since 2.0.0
         * @param array $ids The ids to delete.
         * @return void
         */
        private function reset_products($ids = array())
        {
        }
        // end reset_products;
        /**
         * Reset memberships and membershipmeta table.
         *
         * @since 2.0.0
         * @param array $ids The ids to delete.
         * @return void
         */
        private function reset_memberships($ids = array())
        {
        }
        // end reset_memberships;
        /**
         * Reset domains table.
         *
         * @since 2.0.0
         * @param array $ids The ids to delete.
         * @return void
         */
        private function reset_domains($ids = array())
        {
        }
        // end reset_domains;
        /**
         * Reset discount codes table.
         *
         * @since 2.0.0
         * @param array $ids The ids to delete.
         * @return void
         */
        private function reset_discount_codes($ids = array())
        {
        }
        // end reset_discount_codes;
        /**
         * Reset webhooks table.
         *
         * @since 2.0.0
         * @param array $ids The ids to delete.
         * @return void
         */
        private function reset_webhooks($ids = array())
        {
        }
        // end reset_webhooks;
        /**
         * Reset payments table.
         *
         * @since 2.0.0
         * @param array $ids The ids to delete.
         * @return void
         */
        private function reset_payments($ids = array())
        {
        }
        // end reset_payments;
        /**
         * Reset checkout forms
         *
         * @since 2.0.7
         * @param array $ids The ids to delete.
         * @return void
         */
        private function reset_checkout_forms($ids = array())
        {
        }
        // end reset_checkout_forms;
        /**
         * Reset custom posts.
         *
         * @since 2.0.7
         * @param array $ids The ids to delete.
         * @return void
         */
        private function reset_post_like_models($ids = array())
        {
        }
        // end reset_post_like_models;
        /**
         * Reset events.
         *
         * @since 2.0.7
         * @param array $ids The ids to delete.
         * @return void
         */
        private function reset_events($ids = array())
        {
        }
        // end reset_events;
        /**
         * Reset the settings.
         *
         * @since 2.0.7
         * @return void
         */
        private function reset_settings()
        {
        }
    }
}
namespace {
    /*
     * Classes
     */
    /**
     * Deprecated: WU_Settings
     *
     * @deprecated 2.0.0
     */
    class WU_Settings
    {
        /**
         * Deprecated: Returns all the sections of settings.
         *
         * @deprecated 2.0.0
         *
         * @param bool $filters Deprecated argument.
         * @return array
         */
        public static function get_sections($filters = \true)
        {
        }
        // end get_sections;
        /**
         * Deprecated: Get all the settings from the plugin.
         *
         * @deprecated 2.0.0
         *
         * @return array Array containing all the settings.
         */
        public static function get_settings()
        {
        }
        // end get_settings;
        /**
         * Deprecated: Handles the saving of the settings after the save button is pressed.
         *
         * @deprecated 2.0.0
         *
         * @param boolean $deprecated Deprecated argument.
         * @param boolean $reset If we need to reset the settings.
         * @return bool
         */
        public static function save_settings($deprecated = \false, $reset = \false)
        {
        }
        // end save_settings;
        /**
         * Deprecated: Get a specific settings from the plugin.
         *
         * @since  1.4.0 Now we can filter settings we get.
         * @since  1.1.5 Let's we pass default responses, in case nothing is found.
         * @deprecated 2.0.0
         *
         * @param  string $setting Settings name to return.
         * @param  string $default Default value.
         * @return string
         */
        public static function get_setting($setting, $default = \false)
        {
        }
        // end get_setting;
        /**
         * Deprecated: Saves a specific setting into the database.
         *
         * @param string $setting Option key to save.
         * @param mixed  $value   New value of the option.
         * @return mixed
         */
        public static function save_setting($setting, $value)
        {
        }
        // end save_setting;
        /**
         * Deprecated: Returns the image being used as a logo.
         *
         * @since  1.7.0 Added setting option.
         * @since  1.1.5 Return the default in case.
         * @deprecated 2.0.0
         *
         * @param  string $size The size to retrieve the logo.
         * @param  null   $logo Deprecated argument.
         * @param  null   $setting_name Deprecated argument.
         * @param  null   $fallback Deprecated argument.
         * @return string
         */
        public static function get_logo($size = 'full', $logo = \null, $setting_name = \null, $fallback = \null)
        {
        }
        // end get_logo;
        /**
         * Deprecated: Return the countries list.
         *
         * @since 1.5.4
         * @return array
         */
        public static function get_countries()
        {
        }
    }
    // end class WU_Settings;
    /**
     * Deprecated: WU_Page
     *
     * @deprecated 2.0.0
     */
    class WU_Page extends \WP_Ultimo\Admin_Pages\Base_Admin_Page
    {
        /**
         * Holds the attributes.
         *
         * @since 2.0.0
         * @var array
         */
        protected $attributes = array();
        /**
         * Deprecated: Creates the page with the necessary hooks
         *
         * @deprecated 2.0.0
         * @since 1.8.2
         *
         * @param boolean $network If this is a network page.
         * @param array   $atts The page attributes.
         */
        public function __construct($network = \true, $atts = array())
        {
        }
        // end __construct;
        /**
         * Returns the title of the page. Must be declared on the child classes.
         *
         * @since 2.0.0
         * @return string Title of the page.
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Returns the title of menu for this page. Must be declared on the child classes.
         *
         * @since 2.0.0
         * @return string Menu label of the page.
         */
        public function get_menu_title()
        {
        }
        // end get_menu_title;
        /**
         * Every child class should implement the output method to display the contents of the page.
         *
         * @since 1.8.2
         * @return void
         */
        public function output()
        {
        }
    }
    // end class WU_Page;
    /**
     * Deprecated: WU_Site_Templates
     *
     * @deprecated 2.0.0
     */
    class WU_Site_Templates
    {
        /**
         * Returns the template preview URL.
         *
         * @since 2.0.0
         *
         * @param string $site_id The site ID.
         * @return string
         */
        public static function get_template_preview_url($site_id = '')
        {
        }
    }
    // end class WU_Site_Templates;
    /**
     * Deprecated: WU_Mail
     *
     * @deprecated 2.0.0
     */
    class WU_Mail
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Deprecated: Send our mail using WordPress.
         *
         * @deprecated 2.0.0
         *
         * @param  string $to destinatary email.
         * @param  string $subject Subject line.
         * @param  string $content Body of the message.
         * @param  bool   $html Body of the message.
         * @param  array  $shortcodes The payload. Key => value.
         * @param  array  $attachments Attachments.
         * @param  array  $bcc Bcc.
         * @return boolean
         */
        public function send_mail($to, $subject, $content, $html = \true, $shortcodes = array(), $attachments = array(), $bcc = '')
        {
        }
        // end send_mail;
        /**
         * Deprecated: Send an email template registered in our framework.
         *
         * @deprecated 2.0.0
         *
         * @param string $slug The slug identifying the template to be sent.
         * @param string $to   Recipient's email address.
         * @param  array  $shortcodes The payload. Key => value.
         * @param  array  $attachments Attachments.
         * @return void
         */
        public function send_template($slug, $to, $shortcodes, $attachments = array())
        {
        }
        // end send_template;
        /**
         * Deprecated: Register template of a certain email.
         *
         * @deprecated 2.0.0
         *
         * @param  string $slug Indentifier of this template.
         * @param  string $args Array with the arguments.
         * @return void
         */
        public function register_template($slug, $args)
        {
        }
    }
    // end WU_Mail;
    /**
     * Deprecated: WU_Plans class.
     */
    class WU_Plans
    {
        /**
         * Deprecated.
         *
         * Here to prevent fatal errors.
         *
         * @since 2.0.0
         * @return \WU_Plans
         */
        public static function get_instance()
        {
        }
        // end get_instance;
        /**
         * Deprecated: WP_Plans::get_plans().
         *
         * @since 2.0.0
         * @return array
         */
        public static function get_plans()
        {
        }
        // end get_plans;
        /**
         * Deprecated: WU_Plans::get_most_popular_plan()
         *
         * Returns any plan to avoid problems.
         * This method should not be used.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Product
         */
        public static function get_most_popular_plan()
        {
        }
    }
    // end class WU_Plans;
    /**
     * Deprecated: WU_Multi_Network
     *
     * This class was used to add support to multi-network environments.
     * This is no longer necessary as it is natively supported by BerlinDB.
     * That being the case, we're adding this here because it contained some
     * helper static methods that other plugins might be using, so we're deprecating them
     * generically.
     *
     * @deprecated 2.0.0
     */
    class WU_Multi_Network
    {
        /**
         * Catch-all for all static methods to deprecate.
         *
         * @since 2.0.0
         *
         * @param string $method_name Method being called.
         * @param array  $args The arguments passed to that method.
         * @return bool
         */
        public static function __callStatic($method_name, $args)
        {
        }
    }
    // end class WU_Multi_Network;
    /**
     * Deprecated: WU_Help_Pointers
     *
     * There is plans to re-add something like this in the future.
     * For now, this is deprecated and declaring it have no side-effects.
     * This class is here to prevent fatal errors when plugin developers
     * used it on their WP Ultimo extensions.
     *
     * @deprecated 2.0.0
     */
    class WU_Help_Pointers
    {
        /**
         * Deprecated constructor.
         *
         * @since 2.0.0
         * @param array $pntrs The pointers to add.
         */
        public function __construct($pntrs = array())
        {
        }
    }
    // end class WU_Help_Pointers;
    /**
     * Deprecated: WU_Util
     *
     * This class is being explicitly replaced by public apis
     * in the form of simple functions that are available at the global scope.
     *
     * @deprecated 2.0.0
     */
    class WU_Util
    {
        /**
         * Deprecated: is_login_page()
         *
         * @deprecated 2.0.0
         * @return boolean
         */
        public static function is_login_page()
        {
        }
        // end is_login_page;
        /**
         * Deprecated: format_megabytes
         *
         * @deprecated 2.0.0
         *
         * @param int  $size The size in Megabytes. Size format uses bytes, instead.
         * @param null $after_suffix Deprecated argument.
         * @return string
         */
        public static function format_megabytes($size, $after_suffix = \null)
        {
        }
        // end format_megabytes;
        /**
         * Deprecated: to_float
         *
         * @deprecated 2.0.0
         *
         * @param string $num Numeric string to convert to float. E.g. $500.00, 5.000,00, etc.
         * @return float
         */
        public static function to_float($num)
        {
        }
        // end to_float;
        /**
         * Deprecated: tooltip
         *
         * @deprecated 2.0.0
         *
         * @param string $text The tooltip text.
         * @param string $icon The tooltip icon.
         * @return string
         */
        public static function tooltip($text, $icon = 'dashicons-editor-help')
        {
        }
        // end tooltip;
        /**
         * Deprecated: wp_die
         *
         * @deprecated 2.0.0
         *
         * @param string  $message The message to display on the error page.
         * @param string  $title The title of the error page.
         * @param boolean $redirect Deprecated argument.
         * @param integer $time Deprecated argument.
         * @param array   $args Arguments to pass down to wp_die.
         * @return void
         */
        public static function wp_die($message, $title, $redirect = \false, $time = 5000, $args = array())
        {
        }
        // end wp_die;
        /**
         * Deprecated: display_alert
         *
         * @deprecated 2.0.0
         *
         * @param string  $title Deprecated argument.
         * @param string  $message Deprecated argument.
         * @param string  $type Deprecated argument.
         * @param boolean $arguments Deprecated argument.
         * @return void
         */
        public static function display_alert($title, $message, $type = 'success', $arguments = \false)
        {
        }
        // end display_alert;
        /**
         * Deprecated: registers_today
         *
         * @deprecated 2.0.0
         * @return int
         */
        public static function registers_today()
        {
        }
        // end registers_today;
        /**
         * Deprecated: users_on_trial
         *
         * @deprecated 1.5.3
         * @return int
         */
        public static function users_on_trial()
        {
        }
        // end users_on_trial;
        /**
         * Deprecated: array_filter_key
         *
         * This deprecated method returns the original array passed, with
         * no processing.
         *
         * @deprecated 2.0.0
         *
         * @param array        $array Array to filter.
         * @param string|array $callback Deprecated argument.
         * @return array
         */
        public static function array_filter_key(array $array, $callback)
        {
        }
        // end array_filter_key;
        /**
         * Deprecated: generate_csv
         *
         * @deprecated 2.0.0
         *
         * @param string $file_name Full path to file, including extension.
         * @param array  $data Data to save. First column being the headers.
         * @return void
         */
        public static function generate_csv($file_name, $data = array())
        {
        }
        // end generate_csv;
        /**
         * Deprecated: color
         *
         * @deprecated 2.0.0
         *
         * @param string $hex Hex code of the color.
         * @return \WP_Ultimo\Dependencies\Mexitek\PHPColors\Color
         */
        public static function color($hex)
        {
        }
    }
    // end class WU_Util;
    /**
     * Deprecated: WU_Logger
     *
     * @deprecated 2.0.0
     */
    class WU_Logger
    {
        /**
         * Catch-all for all static methods to deprecate.
         *
         * The add and clear methods have their own public apis, so we
         * use them instead.
         *
         * @deprecated 2.0.0
         *
         * @param string $method_name Method being called.
         * @param array  $args The arguments passed to that method.
         * @return bool
         */
        public static function __callStatic($method_name, $args)
        {
        }
    }
    // end class WU_Logger;
    /**
     * Deprecated: WU_Links
     *
     * @deprecated 2.0.0
     */
    class WU_Links
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Deprecated: get_link
         *
         * @deprecated 2.0.0
         *
         * @param string $slug Slug of the link.
         * @return string
         */
        public function get_link($slug)
        {
        }
    }
}
namespace WP_Ultimo\Models {
    /**
     * Abstract base model for our data types
     *
     * This class is the base class that is extended by all of our data types
     * such as plans, coupons, broadcasts, domains, etc.
     *
     * @since 2.0.0
     */
    abstract class Base_Model implements \JsonSerializable
    {
        /**
         * ID of the object
         *
         * @since 2.0.0
         * @var integer
         */
        protected $id = 0;
        /**
         * Model name.
         *
         * @since 2.0.0
         * @var string
         */
        public $model = '';
        /**
         * Holds the Query Class for this particular object type.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '';
        /**
         * Holds meta fields we want to always save.
         *
         * @since 2.0.0
         * @var array
         */
        protected $meta_fields = array();
        /**
         * Model creation date.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_created = '';
        /**
         * Model last modification date.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_modified = '';
        /**
         * Meta data holder.
         *
         * @since 2.0.0
         * @var array
         */
        public $meta = array();
        /**
         * The ID of the original 1.X model that was used to generate this item on migration.
         *
         * @since 2.0.0
         * @var int
         */
        public $migrated_from_id;
        /**
         * Set this to true to skip validations when saving.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $skip_validation = false;
        /**
         * Keeps a copy in memory of the object being edited.
         *
         * @since 2.0.0
         * @var Base_Model
         */
        protected $_original;
        /**
         * Map setters to other parameters.
         *
         * @since 2.0.0
         * @var array
         */
        protected $_mappings = array();
        /**
         * Mocked status. Used to suppress errors.
         *
         * @since 2.0.0
         * @var boolean
         */
        public $_mocked = false;
        /**
         * Constructs the object via the constructor arguments
         *
         * @since 2.0.0
         *
         * @param mixed $object Std object with model parameters.
         */
        public function __construct($object = null)
        {
        }
        // end __construct;
        /**
         * Get the value of slug
         *
         * @return mixed
         */
        public function get_slug()
        {
        }
        // end get_slug;
        /**
         * Set the value of slug
         *
         * @param mixed $slug The slug.
         */
        public function set_slug($slug)
        {
        }
        // end set_slug;
        /**
         * Returns a hashed version of the id. Useful for displaying data publicly.
         *
         * @param string $field Field to use to generate the hash.
         * @since 2.0.0
         * @return string
         */
        public function get_hash($field = 'id')
        {
        }
        // end get_hash;
        /**
         * Setup properties.
         *
         * @param object $object Row from the database.
         *
         * @access private
         * @since  2.0.0
         * @return bool
         */
        private function setup_model($object)
        {
        }
        // end setup_model;
        /**
         * Sets the attributes of the model using the setters available.
         *
         * @since 2.0.0
         *
         * @param array $atts Key-value pairs of model attributes.
         * @return \WP_Ultimo\Models\Base_Model
         */
        public function attributes($atts)
        {
        }
        // end attributes;
        /**
         * Return the model schema. useful to list all models fields.
         *
         * @since 2.0.0
         * @return Schema
         */
        public static function get_schema()
        {
        }
        // end get_schema;
        /**
         * Checks if this model was already saved to the database.
         *
         * @since 2.0.0
         * @return bool
         */
        public function exists()
        {
        }
        // end exists;
        /**
         * Gets a single database row by the primary column ID, possibly from cache.
         *
         * @since 2.0.0
         *
         * @param int $item_id The item id.
         *
         * @return object Base_Model|false
         */
        public static function get_by_id($item_id)
        {
        }
        // end get_by_id;
        /**
         * Gets a single database row by the hash, possibly from cache.
         *
         * @since 2.0.0
         *
         * @param int $item_hash The item hash.
         *
         * @return Base_Model|false
         */
        public static function get_by_hash($item_hash)
        {
        }
        // end get_by_hash;
        /**
         * Gets a model instance by a column value.
         *
         * @since 2.0.0
         *
         * @param string $column The name of the column to query for.
         * @param string $value Value to search for.
         * @return Base_Model|false
         */
        public static function get_by($column, $value)
        {
        }
        // end get_by;
        /**
         * Wrapper for a Query call.
         *
         * @since 2.0.0
         *
         * @param array $query Arguments for the query.
         * @return array|int List of items, or number of items when 'count' is passed as a query var.
         */
        public static function get_items($query)
        {
        }
        // end get_items;
        /**
         * Wrapper for a Query call, but returns the list as arrays.
         *
         * @since 2.0.0
         *
         * @param array $query Arguments for the query.
         * @return array|int List of items, or number of items when 'count' is passed as a query var.
         */
        public static function get_items_as_array($query = array())
        {
        }
        // end get_items_as_array;
        /**
         * Get the ID of the model.
         *
         * @access public
         * @since  2.0.0
         * @return int
         */
        public function get_id()
        {
        }
        // end get_id;
        /**
         * Check if this model has a job running.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function has_running_jobs()
        {
        }
        // end has_running_jobs;
        /**
         * Set iD of the object.
         *
         * @since 2.0.0
         * @param integer $id ID of the object.
         * @return void
         */
        private function set_id($id)
        {
        }
        // end set_id;
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Validates the rules and make sure we only save models when necessary.
         *
         * @since 2.0.0
         * @return true|\WP_Error
         */
        public function validate()
        {
        }
        // end validate;
        /**
         * Save (create or update) the model on the database.
         *
         * @since 2.0.0
         *
         * @return bool|\WP_Error
         */
        public function save()
        {
        }
        // end save;
        /**
         * Delete the model from the database.
         *
         * @since 2.0.0
         *
         * @return WP_Error|bool
         */
        public function delete()
        {
        }
        // end delete;
        /**
         * Returns the meta type name.
         *
         * @since 2.0.0
         *
         * @return mixed Meta type name
         */
        private function get_meta_type_name()
        {
        }
        // end get_meta_type_name;
        /**
         * Returns the meta table name.
         *
         * @since 2.0.0
         *
         * @return string|false Table name if exists, False if not
         */
        private function get_meta_table_name()
        {
        }
        // end get_meta_table_name;
        /**
         * Checks if metadata handling is available, i.e., if there is a meta table
         * for this model and if the object already has an ID set.
         *
         * @since 2.0.0
         * @return boolean
         */
        protected function is_meta_available()
        {
        }
        // end is_meta_available;
        /**
         * Returns the meta data, if set. Otherwise, returns the default.
         *
         * @since 2.0.0
         *
         * @param string $key     The meta key.
         * @param bool   $default The default value to be passed.
         * @param bool   $single  To return single values or not.
         * @return mixed
         */
        public function get_meta($key, $default = false, $single = true)
        {
        }
        // end get_meta;
        /**
         * Adds or updates meta data in batch.
         *
         * @since 2.0.0
         *
         * @param array $meta  An array of meta data in `'key' => 'value'` format.
         * @return bool True on successful update, false on failure.
         */
        public function update_meta_batch($meta)
        {
        }
        // end update_meta_batch;
        /**
         * Adds or updates the meta data.
         *
         * @since 2.0.0
         *
         * @param string $key  The meta key.
         * @param mixed  $value The new meta value.
         * @return int|bool The new meta field ID if a field with the given key didn't exist and was
         *                  therefore added, true on successful update, false on failure.
         */
        public function update_meta($key, $value)
        {
        }
        // end update_meta;
        /**
         * Deletes the meta data.
         *
         * @since 2.0.0
         *
         * @param string $key The meta key.
         * @return bool True on successful delete, false on failure.
         */
        public function delete_meta($key)
        {
        }
        // end delete_meta;
        /**
         * Queries object in the database.
         *
         * @since 2.0.0
         *
         * @param array $args Query arguments.
         * @return array|int List of items, or number of items when 'count' is passed as a query var.
         */
        public static function query($args = array())
        {
        }
        // end query;
        /**
         * Transform the object into an assoc array.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_array()
        {
        }
        // end to_array;
        /**
         * Convert data to Mapping instance
         *
         * Allows use as a callback, such as in `array_map`
         *
         * @param stdClass $data Raw mapping data.
         * @return Mapping
         */
        protected static function to_instance($data)
        {
        }
        // end to_instance;
        /**
         * Convert list of data to Mapping instances
         *
         * @param stdClass[] $data Raw mapping rows.
         * @return Domain[]
         */
        protected static function to_instances($data)
        {
        }
        // end to_instances;
        /**
         * By default, we just use the to_array method, but you can rewrite this.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_search_results()
        {
        }
        // end to_search_results;
        /**
         * Defines how we should encode this.
         *
         * @since 2.0.0
         * @return array
         */
        public function jsonSerialize()
        {
        }
        // end jsonSerialize;
        /**
         * Get the date when this model was created.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_created()
        {
        }
        // end get_date_created;
        /**
         * Get the date when this model was last modified.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_modified()
        {
        }
        // end get_date_modified;
        /**
         * Set model creation date.
         *
         * @since 2.0.0
         * @param string $date_created Model creation date.
         * @return void
         */
        public function set_date_created($date_created)
        {
        }
        // end set_date_created;
        /**
         * Set model last modification date.
         *
         * @since 2.0.0
         * @param string $date_modified Model last modification date.
         * @return void
         */
        public function set_date_modified($date_modified)
        {
        }
        // end set_date_modified;
        /**
         * Get the id of the original 1.X model that was used to generate this item on migration.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_migrated_from_id()
        {
        }
        // end get_migrated_from_id;
        /**
         * Set the id of the original 1.X model that was used to generate this item on migration.
         *
         * @since 2.0.0
         * @param int $migrated_from_id The ID of the original 1.X model that was used to generate this item on migration.
         * @return void
         */
        public function set_migrated_from_id($migrated_from_id)
        {
        }
        // end set_migrated_from_id;
        /**
         * Checks if this model is a migration from 1.X.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_migrated()
        {
        }
        // end is_migrated;
        /**
         * Helper method to return formatted values.
         *
         * Deals with:
         * - currency values;
         *
         * @since 2.0.0
         *
         * @param string $key The key to return.
         * @return mixed
         */
        public function get_formatted_amount($key = 'amount')
        {
        }
        // end get_formatted_amount;
        /**
         * Helper method to return formatted dates.
         *
         * Deals with:
         * - dates
         *
         * @since 2.0.0
         *
         * @param string $key The key to return.
         * @return mixed
         */
        public function get_formatted_date($key = 'date_created')
        {
        }
        // end get_formatted_date;
        /**
         * Get all items.
         *
         * @since 2.0.0
         *
         * @param array $query_args If you need to select a type to get all.
         * @return array With all items requested.
         */
        public static function get_all($query_args = array())
        {
        }
        // end get_all;
        /**
         * Creates a copy of the given model adn resets it's id to a 'new' state.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Model\Base_Model
         */
        public function duplicate()
        {
        }
        // end duplicate;
        /**
         * Populate the data the resides on meta tables.
         *
         * @since 2.0.0
         * @return void
         */
        public function hydrate()
        {
        }
        // end hydrate;
        /**
         * Set set this to true to skip validations when saving..
         *
         * @since 2.0.0
         * @param boolean $skip_validation Set true to have field information validation bypassed when saving this event.
         * @return void
         */
        public function set_skip_validation($skip_validation = false)
        {
        }
        // end set_skip_validation;
        /**
         * Returns the original parameters of the object.
         *
         * @since 2.0.0
         * @return array
         */
        public function _get_original()
        {
        }
        // end _get_original;
        /**
         * Return arguments schema for the rest api.
         *
         * This function gets the information from the model and
         * the database schema to automatic generate the arguments
         * schema for the rest api.
         *
         * @since 2.0.0
         *
         * @param bool $edit Context. In edit, some fields, like ids, are not mandatory.
         * @return array The arguments for an endpoint.
         */
        public static function get_arguments_for_rest($edit = false)
        {
        }
        // end get_arguments_for_rest;
        /**
         * Locks this model.
         *
         * @since 2.0.0
         * @return bool
         */
        public function lock()
        {
        }
        // end lock;
        /**
         * Check ths lock status of the model.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_locked()
        {
        }
        // end is_locked;
        /**
         * Unlocks the model.
         *
         * @since 2.0.0
         * @return bool
         */
        public function unlock()
        {
        }
    }
}
namespace WP_Ultimo\Models\Traits {
    /**
     * Singleton trait.
     */
    trait Limitable
    {
        /**
         * Internal limitations cache.
         *
         * @since 2.0.0
         * @var array
         */
        protected $_limitations = array();
        /**
         * List of limitations that need to be merged.
         *
         * Every model that is limitable (imports this trait)
         * needs to declare explicitly the limitations that need to be
         * merged. This allows us to chain the merges, and gives us
         * a final list of limitations at the end of the process.
         *
         * @since 2.0.0
         * @return array
         */
        public abstract function limitations_to_merge();
        /**
         * Returns the limitations of this particular blog.
         *
         * @since 2.0.0
         *
         * @param bool $waterfall If we should construct the limitations object recursively.
         * @param bool $skip_self If we should skip the current limitations.
         * @return \WP_Ultimo\Objects\Limitations
         */
        public function get_limitations($waterfall = true, $skip_self = false)
        {
        }
        // end get_limitations;
        /**
         * Checks if this site has limitations or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_limitations()
        {
        }
        // end has_limitations;
        /**
         * Checks if a particular module is being limited.
         *
         * @since 2.0.0
         *
         * @param string $module Module to check.
         * @return boolean
         */
        public function has_module_limitation($module)
        {
        }
        // end has_module_limitation;
        /**
         * Returns all user role quotas.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_user_role_quotas()
        {
        }
        // end get_user_role_quotas;
        /**
         * Proxy method to retrieve the allowed user roles.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_allowed_user_roles()
        {
        }
        // end get_allowed_user_roles;
        /**
         * Schedules plugins to be activated or deactivated based on the current limitations;
         *
         * @since 2.0.5
         * @return void
         */
        public function sync_plugins()
        {
        }
        // end sync_plugins;
        /**
         * Makes sure we save limitations when we are supposed to.
         *
         * This is called on the handle_save method of the inc/admin-pages/class-edit-admin-page.php
         * for all models that have the trait Limitable.
         *
         * @see inc/admin-pages/class-edit-admin-page.php
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_limitations()
        {
        }
        // end handle_limitations;
        /**
         * Returns the list of product slugs associated with this model.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_applicable_product_slugs()
        {
        }
    }
}
namespace WP_Ultimo\Traits {
    /**
     * WP_Ultimo_Site_Deprecated trait.
     */
    trait WP_Ultimo_Site_Deprecated
    {
        /**
         * Magic getter to provide backwards compatibility for plans.
         *
         * @since 2.0.0
         *
         * @throws \Exception Throws an exception when trying to get a key that is not available or back-compat.
         * @param string $key Property to get.
         * @return mixed
         */
        public function __get($key)
        {
        }
        // end __get;
        /**
         * Deprecated: get_subscription.
         *
         * @deprecated 2.0.0
         *
         * @return \WP_Ultimo\Models\Membership
         */
        public function get_subscription()
        {
        }
    }
}
namespace WP_Ultimo\Models\Traits {
    /**
     * Singleton trait.
     */
    trait Notable
    {
        /**
         * The notes saved.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Objects\Note[]
         */
        protected $notes;
        /**
         * Get all the notes saved for this model.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Objects\Note[]
         */
        public function get_notes()
        {
        }
        // end get_notes;
        /**
         * Adds a new note to this model.
         *
         * @since 2.0.0
         *
         * @param array|\WP_Ultimo|Objects\Note $note The note to add.
         * @return bool
         */
        public function add_note($note)
        {
        }
        // end add_note;
        /**
         * Remove all notes related to this model.
         *
         * @since 2.0.0
         * @return bool
         */
        public function clear_notes()
        {
        }
        // end clear_notes;
        /**
         * Remove one note related to this model.
         *
         * @since 2.0.0
         *
         * @param string $note_id The Note ID.
         *
         * @return bool
         */
        public function delete_note($note_id)
        {
        }
        // end delete_note;
        /**
         * Returns the meta data meta table.
         *
         * This is redundant, but it is better than changing the access of the original method.
         *
         * @since 2.0.0
         * @return string
         */
        protected function get_meta_data_table_name()
        {
        }
    }
}
namespace WP_Ultimo\Models {
    /**
     * Site model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Site extends \WP_Ultimo\Models\Base_Model
    {
        use \WP_Ultimo\Models\Traits\Limitable, \WP_Ultimo\Traits\WP_Ultimo_Site_Deprecated, \WP_Ultimo\Models\Traits\Notable;
        /**  DEFAULT WP_SITE COLUMNS */
        /**
         * Title of the site.
         *
         * @since 2.0.0
         * @var string
         */
        protected $title;
        /**
         * The site description.
         *
         * @since 2.0.0
         * @var string
         */
        protected $description;
        /**
         * Blog ID. Should be accessed via id.
         *
         * @since 2.0.0
         * @var int
         */
        protected $blog_id;
        /**
         * Network ID for this site.
         *
         * @since 2.0.0
         * @var int
         */
        protected $site_id = 1;
        /**
         * Domain name used by this site.
         *
         * @since 2.0.0
         * @var string
         */
        protected $domain;
        /**
         * Path of the site. Used when in sub-directory mode.
         *
         * @since 2.0.0
         * @var string
         */
        protected $path;
        /**
         * Alias for WP CLI support.
         *
         * @since 2.0.0
         * @var string
         */
        protected $site_path;
        /**
         * Date when the site was registered.
         *
         * @since 2.0.0
         * @var string
         */
        protected $registered;
        /**
         * Date of the last update on this site.
         *
         * @since 2.0.0
         * @var string
         */
        protected $last_updated;
        /**
         * Is this a active site?
         *
         * @since 2.0.0
         * @var bool
         */
        protected $active = true;
        /**
         * Is this a public site?
         *
         * @since 2.0.0
         * @var bool
         */
        protected $public = true;
        /**
         * Is this an archived site?
         *
         * @since 2.0.0
         * @var bool
         */
        protected $archived;
        /**
         * Is this a site with mature content?
         *
         * @since 2.0.0
         * @var bool
         */
        protected $mature;
        /**
         * Is this an spam site?
         *
         * @since 2.0.0
         * @var bool
         */
        protected $spam;
        /**
         * Is this site deleted?
         *
         * @since 2.0.0
         * @var bool
         */
        protected $deleted;
        /**
         * ID of the language being used on this site.
         *
         * @since 2.0.0
         * @var int
         */
        protected $lang_id;
        /**
         * Holds the ID of the customer that owns this site.
         *
         * @since 2.0.0
         * @var int
         */
        protected $customer_id;
        /**
         * Holds the ID of the membership associated with this site, if any.
         *
         * @since 2.0.0
         * @var int
         */
        protected $membership_id;
        /**
         * Local membership cache.
         *
         * @since 2.0.0
         * @var null|\WP_Ultimo\Models\Membership
         */
        private $_membership;
        /**
         * The site template id used to create this site.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $template_id;
        /**
         * Duplication arguments.
         *
         * @since 2.0.0
         * @var array
         */
        private $duplication_arguments = array();
        /**
         * The site type of this particular site.
         *
         * @since 2.0.0
         * @var string
         */
        protected $type;
        /**
         * ID of the featured image being used on this product.
         *
         * @since 2.0.0
         * @var int
         */
        protected $featured_image_id;
        /**
         * Categories
         *
         * @since 2.0.0
         * @var int
         */
        protected $categories;
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Sites\\Site_Query';
        /**
         * Extra information about this site.
         *
         * @since 2.0.0
         * @var array
         */
        protected $extra_information;
        /**
         * Keeps form date from the signup form.
         *
         * @since 2.0.0
         * @var array
         */
        protected $transient;
        /**
         * Keeps signup options for the site.
         *
         * @since 2.0.0
         * @var array
         */
        protected $signup_options;
        /**
         * Keeps signup meta for the site.
         *
         * @since 2.0.0
         * @var array
         */
        protected $signup_meta;
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Prepare data before it is stored into the database.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function prepare_extra_information_to_save()
        {
        }
        // end prepare_extra_information_to_save;
        /**
         * Get the visits for this particular sites.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_visits_count()
        {
        }
        // end get_visits_count;
        /**
         * Set the categories for the site.
         *
         * @since 2.0.0
         *
         * @param array $categories The categories this site belongs to.
         * @return void
         */
        public function set_categories($categories)
        {
        }
        // end set_categories;
        /**
         * Get the list of categories.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_categories()
        {
        }
        // end get_categories;
        /**
         * Get featured image ID.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_featured_image_id()
        {
        }
        // end get_featured_image_id;
        /**
         * Get featured image url.
         *
         * @since 2.0.0
         * @param string $size The size of the image to retrieve.
         * @return string
         */
        public function get_featured_image($size = 'wu-thumb-medium')
        {
        }
        // end get_featured_image;
        /**
         * Set featured image ID.
         *
         * @since 2.0.0
         * @param int $image_id The ID of the feature image of the site.
         * @return void
         */
        public function set_featured_image_id($image_id)
        {
        }
        // end set_featured_image_id;
        /**
         * Get the preview URL.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview_url()
        {
        }
        // end get_preview_url;
        /**
         * Get the preview URL attrs.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview_url_attrs()
        {
        }
        // end get_preview_url_attrs;
        /**
         * Get blog ID. Should be accessed via id.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_id()
        {
        }
        // end get_id;
        /**
         * Get blog ID. Should be accessed via id..
         *
         * @since 2.0.0
         * @return int
         */
        public function get_blog_id()
        {
        }
        // end get_blog_id;
        /**
         * Set blog ID. Should be accessed via id..
         *
         * @since 2.0.0
         * @param int $blog_id The blog ID. Should be accessed via id.
         * @return void
         */
        public function set_blog_id($blog_id)
        {
        }
        // end set_blog_id;
        /**
         * Get network ID for this site..
         *
         * @since 2.0.0
         * @return int
         */
        public function get_site_id()
        {
        }
        // end get_site_id;
        /**
         * Set network ID for this site..
         *
         * @since 2.0.0
         * @param int $site_id The network ID for this site.
         * @return void
         */
        public function set_site_id($site_id)
        {
        }
        // end set_site_id;
        /**
         * Get title of the site..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Set title of the site.
         *
         * @since 2.0.0
         *
         * @param string $title The site title.
         * @return void
         */
        public function set_title($title)
        {
        }
        // end set_title;
        /**
         * Alias to get name.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_name()
        {
        }
        // end get_name;
        /**
         * Alias to set title.
         *
         * @since 2.0.0
         * @param string $title The site name.
         * @return void
         */
        public function set_name($title)
        {
        }
        // end set_name;
        /**
         * Gets the site description.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Sets the site description.
         *
         * @todo This is not yet persistent.
         *
         * @since 2.0.0
         * @param string $description A description for the site, usually a short text.
         * @return void
         */
        public function set_description($description)
        {
        }
        // end set_description;
        /**
         * Get domain name used by this site..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_domain()
        {
        }
        // end get_domain;
        /**
         * Set domain name used by this site..
         *
         * @since 2.0.0
         * @param string $domain The site domain. You don't need to put http or https in front of your domain in this field. e.g: example.com.
         * @return void
         */
        public function set_domain($domain)
        {
        }
        // end set_domain;
        /**
         * Get path of the site. Used when in sub-directory mode..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_path()
        {
        }
        // end get_path;
        /**
         * Set path of the site. Used when in sub-directory mode..
         *
         * @since 2.0.0
         * @param string $path Path of the site. Used when in sub-directory mode.
         * @return void
         */
        public function set_path($path)
        {
        }
        // end set_path;
        /**
         * Get date when the site was registered..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_registered()
        {
        }
        // end get_registered;
        /**
         * Proxy for a common API.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_registered()
        {
        }
        // end get_date_registered;
        /**
         * Set date when the site was registered..
         *
         * @since 2.0.0
         * @param string $registered Date when the site was registered.
         * @return void
         */
        public function set_registered($registered)
        {
        }
        // end set_registered;
        /**
         * Get date of the last update on this site.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_last_updated()
        {
        }
        // end get_last_updated;
        /**
         * Proxy to last_updated.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_modified()
        {
        }
        // end get_date_modified;
        /**
         * Set date of the last update on this site..
         *
         * @since 2.0.0
         * @param string $last_updated Date of the last update on this site.
         * @return void
         */
        public function set_last_updated($last_updated)
        {
        }
        // end set_last_updated;
        /**
         * Get holds the ID of the customer that owns this site..
         *
         * @since 2.0.0
         * @return int
         */
        public function is_active()
        {
        }
        // end is_active;
        /**
         * Set holds the ID of the customer that owns this site..
         *
         * @since 2.0.0
         * @param int $active Holds the ID of the customer that owns this site.
         * @return void
         */
        public function set_active($active)
        {
        }
        // end set_active;
        /**
         * Get is this a public site?.
         *
         * @since 2.0.0
         * @return bool
         */
        public function get_public()
        {
        }
        // end get_public;
        /**
         * Set is this a public site?.
         *
         * @since 2.0.0
         * @param bool $public Set true if this site is a public one, false if not.
         * @return void
         */
        public function set_public($public)
        {
        }
        // end set_public;
        /**
         * Get is this an archived site.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_archived()
        {
        }
        // end is_archived;
        /**
         * Set is this an archived site?.
         *
         * @since 2.0.0
         * @param bool $archived Is this an archived site.
         * @return void
         */
        public function set_archived($archived)
        {
        }
        // end set_archived;
        /**
         * Get is this a site with mature content.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_mature()
        {
        }
        // end is_mature;
        /**
         * Set is this a site with mature content?.
         *
         * @since 2.0.0
         * @param bool $mature Is this a site with mature content.
         * @return void
         */
        public function set_mature($mature)
        {
        }
        // end set_mature;
        /**
         * Get is this an spam site.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_spam()
        {
        }
        // end is_spam;
        /**
         * Set is this an spam site?.
         *
         * @since 2.0.0
         * @param bool $spam Is this an spam site.
         * @return void
         */
        public function set_spam($spam)
        {
        }
        // end set_spam;
        /**
         * Get is this site deleted.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_deleted()
        {
        }
        // end is_deleted;
        /**
         * Set is this site deleted?.
         *
         * @since 2.0.0
         * @param bool $deleted Is this site deleted.
         * @return void
         */
        public function set_deleted($deleted)
        {
        }
        // end set_deleted;
        /**
         * Get iD of the language being used on this site.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_lang_id()
        {
        }
        // end get_lang_id;
        /**
         * Set iD of the language being used on this site.
         *
         * @since 2.0.0
         * @param int $lang_id The ID of the language being used on this site.
         * @return void
         */
        public function set_lang_id($lang_id)
        {
        }
        // end set_lang_id;
        /**
         * Get holds the ID of the customer that owns this site..
         *
         * @since 2.0.0
         * @return int
         */
        public function get_customer_id()
        {
        }
        // end get_customer_id;
        /**
         * Set holds the ID of the customer that owns this site..
         *
         * @since 2.0.0
         * @param int $customer_id The ID of the customer that owns this site.
         * @return void
         */
        public function set_customer_id($customer_id)
        {
        }
        // end set_customer_id;
        /**
         * Gets the customer object associated with this membership.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Customer;
         */
        public function get_customer()
        {
        }
        // end get_customer;
        /**
         * Checks if a given customer should have access to this site options.
         *
         * @since 2.0.0
         *
         * @param int $customer_id The customer id to check.
         * @return boolean
         */
        public function is_customer_allowed($customer_id = false)
        {
        }
        // end is_customer_allowed;
        /**
         * Get holds the ID of the membership associated with this site, if any..
         *
         * @since 2.0.0
         * @return int
         */
        public function get_membership_id()
        {
        }
        // end get_membership_id;
        /**
         * Set holds the ID of the membership associated with this site, if any..
         *
         * @since 2.0.0
         * @param int $membership_id The ID of the membership associated with this site, if any.
         * @return void
         */
        public function set_membership_id($membership_id)
        {
        }
        // end set_membership_id;
        /**
         * Checks if this site has a membership.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_membership()
        {
        }
        // end has_membership;
        /**
         * Checks if the site has a product.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_product()
        {
        }
        // end has_product;
        /**
         * Gets the membership object associated with this membership.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Membership;
         */
        public function get_membership()
        {
        }
        // end get_membership;
        /**
         * Returns the plan that created this site.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Product
         */
        public function get_plan()
        {
        }
        // end get_plan;
        /**
         * Get template ID.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function get_template_id()
        {
        }
        // end get_template_id;
        /**
         * Set the template ID.
         *
         * @since 2.0.0
         * @param int $template_id The ID of the templated used to create this site.
         * @return void
         */
        public function set_template_id($template_id)
        {
        }
        // end set_template_id;
        /**
         * Gets the site object associated with this membership.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Site;
         */
        public function get_template()
        {
        }
        // end get_template;
        /**
         * Returns the default duplication arguments.
         *
         * @since 2.0.0
         * @return array
         */
        protected function get_default_duplication_arguments()
        {
        }
        // end get_default_duplication_arguments;
        /**
         * Get duplication arguments..
         *
         * @since 2.0.0
         * @return array
         */
        public function get_duplication_arguments()
        {
        }
        // end get_duplication_arguments;
        /**
         * Set duplication arguments..
         *
         * @since 2.0.0
         * @param array $duplication_arguments Duplication arguments.
         * @return void
         */
        public function set_duplication_arguments($duplication_arguments)
        {
        }
        // end set_duplication_arguments;
        /**
         * Get the site type of this particular site..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Set the site type of this particular site.
         *
         * @since 2.0.0
         * @param string $type The type of this particular site. Can be default, site_template, customer_owned, pending, external, main or other values added by third-party add-ons.
         * @options \WP_Ultimo\Database\Sites\Site_Type
         * @return void
         */
        public function set_type($type)
        {
        }
        // end set_type;
        /**
         * Get the primary mapped domain for this site.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Domain|false
         */
        public function get_primary_mapped_domain()
        {
        }
        // end get_primary_mapped_domain;
        /**
         * Returns the active site URL, which can be a mapped domain.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_active_site_url()
        {
        }
        // end get_active_site_url;
        /**
         * Returns the original URL for the blog.
         *
         * This is useful when we need to know the original URL, without
         * mapping applied.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_site_url()
        {
        }
        // end get_site_url;
        /**
         * Checks if this model was already saved to the database.
         *
         * @since 2.0.0
         * @return bool
         */
        public function exists()
        {
        }
        // end exists;
        /**
         * Override te constructor due to this being a native table.
         *
         * @since 2.0.0
         *
         * @param mixed $object Object containing the parameters.
         */
        public function __construct($object = null)
        {
        }
        // end __construct;
        /**
         * Gets the form data saved at the time of the site creation.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_transient()
        {
        }
        // end get_transient;
        /**
         * Holds the form data at the time of registration.
         *
         * @since 2.0.0
         * @param array $transient Form data.
         * @return void
         */
        public function set_transient($transient)
        {
        }
        // end set_transient;
        /**
         * Get signup options for the site.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_signup_options()
        {
        }
        // end get_signup_options;
        /**
         * Set signup options for the site.
         *
         * @since 2.0.0
         * @param array $signup_options Keeps signup options for the site.
         * @return void
         */
        public function set_signup_options($signup_options)
        {
        }
        // end set_signup_options;
        /**
         * Get signup meta for the site.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_signup_meta()
        {
        }
        // end get_signup_meta;
        /**
         * Set signup meta for the site.
         *
         * @since 2.0.0
         * @param array $signup_meta Keeps signup meta for the site.
         * @return void
         */
        public function set_signup_meta($signup_meta)
        {
        }
        // end set_signup_meta;
        /**
         * Returns the Label for a given type.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type_label()
        {
        }
        // end get_type_label;
        /**
         * Gets the classes for a given class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type_class()
        {
        }
        // end get_type_class;
        /**
         * Adds magic methods to return options.
         *
         * @since 2.0.0
         *
         * @param string $name Method name.
         * @param array  $args List of arguments.
         * @throws \BadMethodCallException Throws exception when method is not found.
         * @return mixed
         */
        public function __call($name, $args)
        {
        }
        // end __call;
        /**
         * Checks if this is the primary site of the customer.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_customer_primary_site()
        {
        }
        // end is_customer_primary_site;
        /**
         * Delete the model from the database.
         *
         * @since 2.0.0
         *
         * @return WP_Error|bool
         */
        public function delete()
        {
        }
        // end delete;
        /**
         * Replaces meta fields with the data collected during signup.
         *
         * @since 2.0.0
         * @return void
         */
        protected function handles_existing_search_and_replace()
        {
        }
        // end handles_existing_search_and_replace;
        /**
         * Save (create or update) the model on the database.
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function save()
        {
        }
        // end save;
        /**
         * By default, we just use the to_array method, but you can rewrite this.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_search_results()
        {
        }
        // end to_search_results;
        /**
         * Returns a list of sites based on the type.
         *
         * Type can be customer_owned or template.
         *
         * @since 2.0.0
         *
         * @param string $type Type to return. Can be customer_owned or template.
         * @param array  $query_args Additional query args.
         * @return array
         */
        public static function get_all_by_type($type = 'customer_owned', $query_args = array())
        {
        }
        // end get_all_by_type;
        /**
         * Get the list of all Site Template Categories.
         *
         * @since 2.0.0
         * @param array $sites An array of selected site ids or site objects.
         * @return array
         */
        public static function get_all_categories($sites = array())
        {
        }
        // end get_all_categories;
        /**
         * List of limitations that need to be merged.
         *
         * Every model that is limitable (imports this trait)
         * needs to declare explicitly the limitations that need to be
         * merged. This allows us to chain the merges, and gives us
         * a final list of limitations at the end of the process.
         *
         * In the case of sites, we need to get the membership
         * limitations.
         *
         * @see \WP_Ultimo\Models\Traits\Trait_Limitable
         * @since 2.0.0
         * @return array
         */
        public function limitations_to_merge()
        {
        }
    }
}
namespace {
    // end class WU_Links;
    /*
     * Models
     */
    /**
     * Deprecated: WU_Site
     *
     * @deprecated 2.0.0
     */
    class WU_Site extends \WP_Ultimo\Models\Site
    {
        /**
         * Override te constructor due to this being a native table.
         *
         * @since 2.0.0
         *
         * @param mixed $object Object containing the parameters.
         */
        public function __construct($object = \null)
        {
        }
    }
    // end class WU_Site;
    /**
     * Deprecated: WU_Site_Template
     *
     * @deprecated 2.0.0
     */
    class WU_Site_Template extends \WP_Ultimo\Models\Site
    {
        /**
         * Override te constructor due to this being a native table.
         *
         * @deprecated 2.0.0
         *
         * @param mixed $object Object containing the parameters.
         */
        public function __construct($object = \null)
        {
        }
    }
    // end class WU_Site_Template;
    /**
     * Deprecated: WU_Site_Template
     *
     * @deprecated 2.0.0
     */
    class WU_Site_Owner
    {
        /**
         * Deprecated
         *
         * @deprecated 2.0.0
         */
        public function __construct()
        {
        }
    }
    // end class WU_Site_Owner;
    /**
     * Deprecated Trait.
     *
     * @since 2.0.0
     */
    trait WU_Deprecated_Model
    {
        /**
         * Generic method to bypass the protected status of the new models.
         *
         * @since 2.0.0
         *
         * @param string $key The key to set.
         * @param mixed  $value The value to set.
         */
        public function __set($key, $value)
        {
        }
        // end __set;
        /**
         * Generic get method to bypass the protected status of the new models.
         *
         * @since 2.0.0
         *
         * @param string $key The key to set.
         */
        public function __get($key)
        {
        }
        // end __get;
        /**
         * Generic method to bypass the protected status of the new models.
         *
         * @since 2.0.0
         *
         * @param string $key The key to set.
         * @param mixed  $value The value to set.
         */
        public function after_set($key, $value)
        {
        }
    }
}
namespace WP_Ultimo\Traits {
    /**
     * WP_Ultimo_Coupon_Deprecated trait.
     */
    trait WP_Ultimo_Coupon_Deprecated
    {
        /**
         * Generic set for old add-ons.
         *
         * @since 2.0.0
         *
         * @param string $key Meta key to save.
         * @param mixed  $value The value to save as meta.
         */
        public function __set($key, $value)
        {
        }
        // end __set;
        /**
         * Magic getter to provide backwards compatibility for plans.
         *
         * @since 2.0.0
         *
         * @throws \Exception Throws an exception when trying to get a key that is not available or back-compat.
         * @param string $key Property to get.
         * @return mixed
         */
        public function __get($key)
        {
        }
    }
}
namespace WP_Ultimo\Models {
    /**
     * Discount_Code model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Discount_Code extends \WP_Ultimo\Models\Base_Model
    {
        use \WP_Ultimo\Traits\WP_Ultimo_Coupon_Deprecated;
        /**
         * Name of the discount code.
         *
         * @since 2.0.0
         * @var string
         */
        protected $name;
        /**
         * Code to redeem the discount code.
         *
         * @since 2.0.0
         * @var string
         */
        protected $code;
        /**
         * Text describing the coupon code. Useful for identifying it.
         *
         * @since 2.0.0
         * @var string
         */
        protected $description;
        /**
         * Number of times this discount was applied.
         *
         * @since 2.0.0
         * @var int
         */
        protected $uses = 0;
        /**
         * The number of times this discount can be used before becoming inactive.
         *
         * @since 2.0.0
         * @var int
         */
        protected $max_uses;
        /**
         * If we should apply the discount to renewals as well.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $apply_to_renewals = false;
        /**
         * Type of the discount. Can be a percentage or absolute.
         *
         * @since 2.0.0
         * @var string
         */
        protected $type = 'percentage';
        /**
         * Amount discounted in cents.
         *
         * @since 2.0.0
         * @var int
         */
        protected $value = 0;
        /**
         * Type of the discount for the setup fee value. Can be a percentage or absolute.
         *
         * @since 2.0.0
         * @var string
         */
        protected $setup_fee_type = 'percentage';
        /**
         * Amount discounted fpr setup fees in cents.
         *
         * @since 2.0.0
         * @var int
         */
        protected $setup_fee_value = 0;
        /**
         * If this coupon code is active or not.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $active = 1;
        /**
         * If we should check for products or not.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $limit_products;
        /**
         * Holds the list of allowed products.
         *
         * @since 2.0.0
         * @var array
         */
        protected $allowed_products;
        /**
         * Start date for the coupon code to be considered valid.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_start;
        /**
         * Expiration date for the coupon code.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_expiration;
        /**
         * Date when this discount code was created.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_created;
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Discount_Codes\\Discount_Code_Query';
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Get name of the discount code.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_name()
        {
        }
        // end get_name;
        /**
         * Set name of the discount code.
         *
         * @since 2.0.0
         * @param string $name Your discount code name, which is used as discount code title as well.
         * @return void
         */
        public function set_name($name)
        {
        }
        // end set_name;
        /**
         * Get code to redeem the discount code.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_code()
        {
        }
        // end get_code;
        /**
         * Set code to redeem the discount code.
         *
         * @since 2.0.0
         * @param string $code A unique identification to redeem the discount code. E.g. PROMO10.
         * @return void
         */
        public function set_code($code)
        {
        }
        // end set_code;
        /**
         * Get text describing the coupon code. Useful for identifying it.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Set text describing the coupon code. Useful for identifying it.
         *
         * @since 2.0.0
         * @param string $description A description for the discount code, usually a short text.
         * @return void
         */
        public function set_description($description)
        {
        }
        // end set_description;
        /**
         * Get number of times this discount was applied.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_uses()
        {
        }
        // end get_uses;
        /**
         * Set number of times this discount was applied.
         *
         * @since 2.0.0
         * @param int $uses Number of times this discount was applied.
         * @return void
         */
        public function set_uses($uses)
        {
        }
        // end set_uses;
        /**
         * Add uses to this discount code.
         *
         * @since 2.0.4
         * @param integer $uses Number of uses to add.
         * @return void
         */
        public function add_use($uses = 1)
        {
        }
        // end add_use;
        /**
         * Get the number of times this discount can be used before becoming inactive.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_max_uses()
        {
        }
        // end get_max_uses;
        /**
         * Set the number of times this discount can be used before becoming inactive.
         *
         * @since 2.0.0
         * @param int $max_uses The number of times this discount can be used before becoming inactive.
         * @return void
         */
        public function set_max_uses($max_uses)
        {
        }
        // end set_max_uses;
        /**
         * Checks if the given discount code has a number of max uses.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_max_uses()
        {
        }
        // end has_max_uses;
        /**
         * Get if we should apply this coupon to renewals as well.
         *
         * @since 2.0.0
         * @return int
         */
        public function should_apply_to_renewals()
        {
        }
        // end should_apply_to_renewals;
        /**
         * Set if we should apply this coupon to renewals as well.
         *
         * @since 2.0.0
         * @param bool $apply_to_renewals Wether or not we should apply the discount to membership renewals.
         * @return void
         */
        public function set_apply_to_renewals($apply_to_renewals)
        {
        }
        // end set_apply_to_renewals;
        /**
         * Get type of the discount. Can be a percentage or absolute.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Set type of the discount. Can be a percentage or absolute.
         *
         * @since 2.0.0
         * @param string $type The type of the discount code. Can be 'percentage' (e.g. 10% OFF), 'absolute' (e.g. $10 OFF).
         * @options percentage,absolute
         * @return void
         */
        public function set_type($type)
        {
        }
        // end set_type;
        /**
         * Get amount discounted in cents.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_value()
        {
        }
        // end get_value;
        /**
         * Set amount discounted in cents.
         *
         * @since 2.0.0
         * @param int $value Amount discounted in cents.
         * @return void
         */
        public function set_value($value)
        {
        }
        // end set_value;
        /**
         * Get type of the discount for the setup fee value. Can be a percentage or absolute.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_setup_fee_type()
        {
        }
        // end get_setup_fee_type;
        /**
         * Set type of the discount for the setup fee value. Can be a percentage or absolute.
         *
         * @since 2.0.0
         * @param string $setup_fee_type Type of the discount for the setup fee value. Can be a percentage or absolute.
         * @options percentage,absolute
         * @return void
         */
        public function set_setup_fee_type($setup_fee_type)
        {
        }
        // end set_setup_fee_type;
        /**
         * Get amount discounted fpr setup fees in cents.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_setup_fee_value()
        {
        }
        // end get_setup_fee_value;
        /**
         * Set amount discounted for setup fees in cents.
         *
         * @since 2.0.0
         * @param int $setup_fee_value Amount discounted for setup fees in cents.
         * @return void
         */
        public function set_setup_fee_value($setup_fee_value)
        {
        }
        // end set_setup_fee_value;
        /**
         * Get if this coupon code is active or not.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_active()
        {
        }
        // end is_active;
        /**
         * Checks if a given coupon code is valid and can be applied.
         *
         * @since 2.0.0
         * @param int|\WP_Ultimo\Models\Product $product Product to check against.
         * @return true|\WP_Error
         */
        public function is_valid($product = false)
        {
        }
        // end is_valid;
        /**
         * Checks if this discount applies just for the first payment.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_one_time()
        {
        }
        // end is_one_time;
        /**
         * Set if this coupon code is active or not.
         *
         * @since 2.0.0
         * @param bool $active Set this discount code as active (true), which means available to be used, or inactive (false).
         * @return void
         */
        public function set_active($active)
        {
        }
        // end set_active;
        /**
         * Get start date for the coupon code to be considered valid.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_start()
        {
        }
        // end get_date_start;
        /**
         * Set start date for the coupon code to be considered valid.
         *
         * @since 2.0.0
         * @param string $date_start Start date for the coupon code to be considered valid.
         * @return void
         */
        public function set_date_start($date_start)
        {
        }
        // end set_date_start;
        /**
         * Get expiration date for the coupon code.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_expiration()
        {
        }
        // end get_date_expiration;
        /**
         * Set expiration date for the coupon code.
         *
         * @since 2.0.0
         * @param string $date_expiration Expiration date for the coupon code.
         * @return void
         */
        public function set_date_expiration($date_expiration)
        {
        }
        // end set_date_expiration;
        /**
         * Get date when this discount code was created.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_created()
        {
        }
        // end get_date_created;
        /**
         * Set date when this discount code was created.
         *
         * @since 2.0.0
         * @param string $date_created Date when this discount code was created.
         * @return void
         */
        public function set_date_created($date_created)
        {
        }
        // end set_date_created;
        /**
         * Returns a text describing the discount code values.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_discount_description()
        {
        }
        // end get_discount_description;
        /**
         * Transform the object into an assoc array.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_array()
        {
        }
        // end to_array;
        /**
         * Save (create or update) the model on the database.
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function save()
        {
        }
        // end save;
        /**
         * Get holds the list of allowed products.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_allowed_products()
        {
        }
        // end get_allowed_products;
        /**
         * Set holds the list of allowed products.
         *
         * @since 2.0.0
         * @param array $allowed_products The list of products that allows this discount code to be used. If empty, all products will accept this code.
         * @return void
         */
        public function set_allowed_products($allowed_products)
        {
        }
        // end set_allowed_products;
        /**
         * Get if we should check for products or not.
         *
         * @since 2.0.0
         * @return bool
         */
        public function get_limit_products()
        {
        }
        // end get_limit_products;
        /**
         * Set if we should check for products or not.
         *
         * @since 2.0.0
         * @param bool $limit_products This discount code will be limited to be used in certain products? If set to true, you must define a list of allowed products.
         * @return void
         */
        public function set_limit_products($limit_products)
        {
        }
    }
}
namespace {
    // end trait WU_Deprecated_Model;
    /**
     * Deprecated: WU_Coupon
     *
     * @deprecated 2.0.0
     */
    class WU_Coupon extends \WP_Ultimo\Models\Discount_Code
    {
        use \WU_Deprecated_Model;
        /**
         * Override te constructor due to this being a native table.
         *
         * @deprecated 2.0.0
         *
         * @param mixed $object Object containing the parameters.
         */
        public function __construct($object = \null)
        {
        }
        // end __construct;
        /**
         * Generic method to bypass the protected status of the new models.
         *
         * @since 2.0.0
         *
         * @param string $key The key to set.
         * @param mixed  $value The value to set.
         */
        public function after_set($key, $value)
        {
        }
    }
}
namespace WP_Ultimo\Traits {
    /**
     * WP_Ultimo_Plan_Deprecated trait.
     */
    trait WP_Ultimo_Plan_Deprecated
    {
        /**
         * Top deal equivalent.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $featured_plan;
        /**
         * Magic getter to provide backwards compatibility for plans.
         *
         * @since 2.0.0
         *
         * @throws \Exception Throws an exception when trying to get a key that is not available or back-compat.
         * @param string $key Property to get.
         * @return mixed
         */
        public function __get($key)
        {
        }
        // end __get;
        /**
         * Get the featured status for this product.
         *
         * @since 2.0.0
         * @return array
         */
        public function is_featured_plan()
        {
        }
        // end is_featured_plan;
        /**
         * Set the featured status for this product.
         *
         * @since 2.0.0
         * @param array $featured_plan Feature list for pricing tables.
         * @return void
         */
        public function set_featured_plan($featured_plan)
        {
        }
        // end set_featured_plan;
        /**
         * Deprecated: Checks if a given plan is a contact us plan.
         *
         * @since 1.9.0
         * @deprecated 2.0.0
         * @return boolean
         */
        public function is_contact_us()
        {
        }
        // end is_contact_us;
        /**
         * Get the pricing table lines to be displayed on the pricing tables
         *
         * @since  1.4.0
         * @return array
         */
        public function get_pricing_table_lines()
        {
        }
        // end get_pricing_table_lines;
        /**
         * Deprecated: A quota to get.
         *
         * @since 2.0.0
         *
         * @deprecated 2.0.0
         * @param string $quota_name The quota name.
         * @return mixed
         */
        public function get_quota($quota_name)
        {
        }
        // end get_quota;
        /**
         * Returns wether or not we should display a given quota type in the Quotas and Limits widgets
         *
         * @since 1.5.4
         * @param string $quota_type Post type to check.
         * @param string $default Default value.
         * @return bool
         */
        public function should_display_quota_on_pricing_tables($quota_type, $default = false)
        {
        }
        // end should_display_quota_on_pricing_tables;
        /**
         * Checks if this plan allows unlimited extra users
         *
         * @since 1.7.0
         * @return boolean
         */
        public function should_allow_unlimited_extra_users()
        {
        }
        // end should_allow_unlimited_extra_users;
        /**
         * Returns wether or not we should display a given quota type in the Quotas and Limits widgets
         *
         * @since 1.5.4
         * @param string $post_type The post type.
         * @return bool
         */
        public function is_post_type_disabled($post_type)
        {
        }
        // end is_post_type_disabled;
        /**
         * Returns the post_type quotas
         *
         * @since 1.7.0
         * @return array
         */
        public function get_post_type_quotas()
        {
        }
    }
}
namespace WP_Ultimo\Models {
    /**
     * Product model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Product extends \WP_Ultimo\Models\Base_Model
    {
        use \WP_Ultimo\Models\Traits\Limitable, \WP_Ultimo\Traits\WP_Ultimo_Plan_Deprecated;
        /**
         * The product name.
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = '';
        /**
         * The product slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = '';
        /**
         * The product description.
         *
         * @since 2.0.0
         * @var string
         */
        protected $description = '';
        /**
         * Currency for this product. 3-letter currency code.
         *
         * @since 2.0.0
         * @var string
         */
        protected $currency = 'USD';
        /**
         * The type of billing associated with this product.
         *
         * Can be one of 'free', 'paid', and 'contact_us'.
         *
         * @since 2.0.0
         * @var string
         */
        protected $pricing_type = 'paid';
        /**
         * The product setup fee.
         *
         * @since 2.0.0
         * @var int
         */
        protected $setup_fee = 0;
        /**
         * Product that this product relates to.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $parent_id;
        /**
         * Is this product recurring?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $recurring = 1;
        /**
         * Duration of the trial period.
         *
         * @since 2.0.0
         * @var int
         */
        protected $trial_duration = 0;
        /**
         * Unit of the trial period duration.
         *
         * - day
         * - week
         * - month
         * - year
         *
         * @since 2.0.0
         * @var string
         */
        protected $trial_duration_unit = 'day';
        /**
         * Time interval between charges.
         *
         * @since 2.0.0
         * @var int
         */
        protected $duration = 1;
        /**
         * Time interval unit between charges.
         *
         * - day
         * - week
         * - month
         * - year
         *
         * @since 2.0.0
         * @var string
         */
        protected $duration_unit = 'month';
        /**
         * The product amount.
         *
         * @since 2.0.0
         * @var int
         */
        protected $amount = 0;
        /**
         * The number of times we should charge this product.
         *
         * @since 2.0.0
         * @var int
         */
        protected $billing_cycles = 0;
        /**
         * The product list order. Useful when ordering products in a list.
         *
         * @since 2.0.0
         * @var int
         */
        protected $list_order = 10;
        /**
         * Is this product active?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $active = true;
        /**
         * Type of the product.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $type = 'plan';
        /**
         * ID of the featured image being used on this product.
         *
         * @since 2.0.0
         * @var int
         */
        protected $featured_image_id;
        /**
         * Is the product taxable?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $taxable = true;
        /**
         * What is the tax category that should be used.
         *
         * @since 2.0.0
         * @var string
         */
        protected $tax_category;
        /**
         * Feature list for pricing tables.
         *
         * @since 2.0.0
         * @var array
         */
        protected $feature_list;
        /**
         * Customer role on sites under this plan.
         *
         * @since 2.0.0
         * @var string
         */
        protected $customer_role;
        /**
         * Price variations.
         *
         * @since 2.0.0
         * @var array
         */
        protected $price_variations;
        /**
         * Available add-ons.
         *
         * @since 2.0.0
         * @var array
         */
        protected $available_addons;
        /**
         * The group of this product.
         *
         * @since 2.0.0
         * @var string
         */
        protected $product_group;
        /**
         * Contact us Label.
         *
         * @since 2.0.0
         * @var string
         */
        protected $contact_us_label;
        /**
         * Contact us Link.
         *
         * @since 2.0.0
         * @var string
         */
        protected $contact_us_link;
        /**
         * Legacy options
         *
         * @since 2.0.0
         * @var bool
         */
        protected $legacy_options;
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Products\\Product_Query';
        /**
         * Map setters to other parameters.
         *
         * @since 2.0.0
         * @var array
         */
        protected $_mappings = array('product_group' => 'group');
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Get featured image ID.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_featured_image_id()
        {
        }
        // end get_featured_image_id;
        /**
         * Get featured image url.
         *
         * @since 2.0.0
         * @param string $size The size of the image to retrieve.
         * @return string
         */
        public function get_featured_image($size = 'medium')
        {
        }
        // end get_featured_image;
        /**
         * Set featured image ID.
         *
         * @since 2.0.0
         * @param int $image_id The ID of the feature image of the product.
         * @return void
         */
        public function set_featured_image_id($image_id)
        {
        }
        // end set_featured_image_id;
        /**
         * Get the product slug.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        // end get_slug;
        /**
         * Set the slug name.
         *
         * @param string $slug The product slug. It needs to be unique and preferably make it clear what it is about. Example: my_new_product.
         */
        public function set_slug($slug)
        {
        }
        // end set_slug;
        /**
         * Get the product name.
         *
         * @return string
         */
        public function get_name()
        {
        }
        // end get_name;
        /**
         * Set the product name.
         *
         * @param string $name Your product name, which is used as product title as well.
         */
        public function set_name($name)
        {
        }
        // end set_name;
        /**
         * Get the product description.
         *
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Set the product description.
         *
         * @param string $description A description for the product, usually a short text.
         */
        public function set_description($description)
        {
        }
        // end set_description;
        /**
         * Get the value of currency.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_currency()
        {
        }
        // end get_currency;
        /**
         * Set the value of currency.
         *
         * @since 2.0.0
         * @param mixed $currency The currency that this product accepts. It's a 3-letter code. E.g. 'USD'.
         * @return void
         */
        public function set_currency($currency)
        {
        }
        // end set_currency;
        /**
         * Get can be one of 'free', 'paid', and 'contact_us'.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_pricing_type()
        {
        }
        // end get_pricing_type;
        /**
         * Set pricing type can be one of 'free', 'paid', and 'contact_us'.
         *
         * @since 2.0.0
         * @param string $pricing_type The pricing type can be 'free', 'paid' or 'contact_us'.
         * @options free,paid,contact_us
         * @return void
         */
        public function set_pricing_type($pricing_type)
        {
        }
        // end set_pricing_type;
        /**
         * Checks if a given product offers a trial period.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_trial()
        {
        }
        // end has_trial;
        /**
         * Get duration of the trial.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_trial_duration()
        {
        }
        // end get_trial_duration;
        /**
         * Set duration of the trial.
         *
         * @since 2.0.0
         * @param int $trial_duration The duration of the trial period of this product, if the product has one.
         * @return void
         */
        public function set_trial_duration($trial_duration)
        {
        }
        // end set_trial_duration;
        /**
         * Get the trial duration unit.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_trial_duration_unit()
        {
        }
        // end get_trial_duration_unit;
        /**
         * Set the trial duration unit.
         *
         * @since 2.0.0
         * @param string $trial_duration_unit The unit of the trial duration amount. Can be day, week, month or year.
         * @options day,week,month,year
         * @return void
         */
        public function set_trial_duration_unit($trial_duration_unit)
        {
        }
        // end set_trial_duration_unit;
        /**
         * Get time interval between charges.
         *
         * @return int
         */
        public function get_duration()
        {
        }
        // end get_duration;
        /**
         * Set time interval between charges.
         *
         * @param int $duration Time interval between charges.
         */
        public function set_duration($duration)
        {
        }
        // end set_duration;
        /**
         * Get time interval unit between charges.
         *
         * @return string
         */
        public function get_duration_unit()
        {
        }
        // end get_duration_unit;
        /**
         * Set time interval unit between charges.
         *
         * @param string $duration_unit Time interval unit between charges.
         */
        public function set_duration_unit($duration_unit)
        {
        }
        // end set_duration_unit;
        /**
         * Get the product amount.
         *
         * @return int
         */
        public function get_amount()
        {
        }
        // end get_amount;
        /**
         * Get the formatted price amount.
         *
         * @since 2.0.0
         * @param string $key The key. This is ignored here.
         * @return string
         */
        public function get_formatted_amount($key = 'amount')
        {
        }
        // end get_formatted_amount;
        /**
         * Set the product amount.
         *
         * @param int $amount The value of this product. E.g. 19.99.
         */
        public function set_amount($amount)
        {
        }
        // end set_amount;
        /**
         * Get the product setup fee..
         *
         * @since 2.0.0
         * @return int
         */
        public function get_setup_fee()
        {
        }
        // end get_setup_fee;
        /**
         * Set the product setup fee..
         *
         * @since 2.0.0
         * @param int $setup_fee The setup fee value, if the product has one. E.g. 159.99.
         * @return void
         */
        public function set_setup_fee($setup_fee)
        {
        }
        // end set_setup_fee;
        /**
         * Checks if a given product haw a setup fee.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_setup_fee()
        {
        }
        // end has_setup_fee;
        /**
         * Get the product initial amount
         *
         * @return int
         */
        public function get_initial_amount()
        {
        }
        // end get_initial_amount;
        /**
         * Returns the product price structure in a way human can understand it.
         *
         * @since 2.0.0
         *
         * @param bool $include_fees If we need to include fees.
         * @return string
         */
        public function get_price_description($include_fees = true)
        {
        }
        // end get_price_description;
        /**
         * Returns the amount recurring in a human-friendly way.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_recurring_description()
        {
        }
        // end get_recurring_description;
        /**
         * Get the product list order. Useful when ordering products in a list.
         *
         * @return int
         */
        public function get_list_order()
        {
        }
        // end get_list_order;
        /**
         * Set the product list order. Useful when ordering products in a list.
         *
         * @param int $list_order The product list order. Useful when ordering products in a list.
         */
        public function set_list_order($list_order)
        {
        }
        // end set_list_order;
        /**
         * Get is this product active?.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_active()
        {
        }
        // end is_active;
        /**
         * Set is this product active?
         *
         * @since 2.0.0
         * @param boolean $active Set this product as active (true), which means available to be used, or inactive (false).
         * @return void
         */
        public function set_active($active)
        {
        }
        // end set_active;
        /**
         * Get type of the product.
         *
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Set type of the product.
         *
         * @param string $type The default product types are 'product', 'service' and 'package'. More types can be add using the product type filter.
         * @options plan,service,package
         */
        public function set_type($type)
        {
        }
        // end set_type;
        /**
         * Returns the Label for a given type.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type_label()
        {
        }
        // end get_type_label;
        /**
         * Gets the classes for a given class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type_class()
        {
        }
        // end get_type_class;
        /**
         * Get product that this product relates to..
         *
         * @since 2.0.0
         * @return int
         */
        public function get_parent_id()
        {
        }
        // end get_parent_id;
        /**
         * Set product that this product relates to..
         *
         * @since 2.0.0
         * @param int $parent_id The ID from another Product that this product is related to.
         * @return void
         */
        public function set_parent_id($parent_id)
        {
        }
        // end set_parent_id;
        /**
         * Get is this product recurring?
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_recurring()
        {
        }
        // end is_recurring;
        /**
         * Checks if this plan is free or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_free()
        {
        }
        // end is_free;
        /**
         * Set is this product recurring?
         *
         * @since 2.0.0
         * @param boolean $recurring Set this product as a recurring one (true), which means the customer paid a defined amount each period of time, or not recurring (false).
         * @return void
         */
        public function set_recurring($recurring)
        {
        }
        // end set_recurring;
        /**
         * Get the number of times we should charge this product.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_billing_cycles()
        {
        }
        // end get_billing_cycles;
        /**
         * Checks if this product recurs forever.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_forever_recurring()
        {
        }
        // end is_forever_recurring;
        /**
         * Set the number of times we should charge this product.
         *
         * @since 2.0.0
         * @param int $billing_cycles The number of times we should charge this product.
         * @return void
         */
        public function set_billing_cycles($billing_cycles)
        {
        }
        // end set_billing_cycles;
        /**
         * Get date when this was created..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_created()
        {
        }
        // end get_date_created;
        /**
         * Set date when this was created..
         *
         * @since 2.0.0
         * @param string $date_created Date when this was created.
         * @return void
         */
        public function set_date_created($date_created)
        {
        }
        // end set_date_created;
        /**
         * Get date when this was last modified..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_modified()
        {
        }
        // end get_date_modified;
        /**
         * Set date when this was last modified..
         *
         * @since 2.0.0
         * @param string $date_modified Date when this was last modified.
         * @return void
         */
        public function set_date_modified($date_modified)
        {
        }
        // end set_date_modified;
        /**
         * By default, we just use the to_array method, but you can rewrite this.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_search_results()
        {
        }
        // end to_search_results;
        // Secondary Info, to be saved as meta
        /**
         * Checks if the product is taxable.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_taxable()
        {
        }
        // end is_taxable;
        /**
         * Sets the taxable status of the product.
         *
         * @since 2.0.0
         *
         * @param bool $is_taxable Set this product as a taxable one (true), which means tax rules are applied to, or not taxable (false).
         * @return void
         */
        public function set_taxable($is_taxable)
        {
        }
        // end set_taxable;
        /**
         * Returns the tax category to apply.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_tax_category()
        {
        }
        // end get_tax_category;
        /**
         * Sets the tax category to apply.
         *
         * @since 2.0.0
         *
         * @param string $tax_category Category of taxes applied to this product. You need to set this if taxable is set to true.
         * @return void
         */
        public function set_tax_category($tax_category)
        {
        }
        // end set_tax_category;
        /**
         * Get the contact us label.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_contact_us_label()
        {
        }
        // end get_contact_us_label;
        /**
         * Set the contact us label.
         *
         * @since 2.0.0
         * @param string $contact_us_label If the product is the 'contact_us' type, it will need a label for the contact us button.
         * @return void
         */
        public function set_contact_us_label($contact_us_label)
        {
        }
        // end set_contact_us_label;
        /**
         * Get the contact us link.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_contact_us_link()
        {
        }
        // end get_contact_us_link;
        /**
         * Set the contact us link.
         *
         * @since 2.0.0
         * @param string $contact_us_link The url where the contact us button will lead to.
         * @return void
         */
        public function set_contact_us_link($contact_us_link)
        {
        }
        // end set_contact_us_link;
        /**
         * Get feature list for pricing tables..
         *
         * @since 2.0.0
         * @return array
         */
        public function get_feature_list()
        {
        }
        // end get_feature_list;
        /**
         * Set feature list for pricing tables..
         *
         * @since 2.0.0
         * @param array $feature_list A list (array) of features of the product.
         * @return void
         */
        public function set_feature_list($feature_list)
        {
        }
        // end set_feature_list;
        /**
         * Get the customer role to force customers to be on this plan.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_customer_role()
        {
        }
        // end get_customer_role;
        /**
         * Set the customer role to force customers to be on this plan.
         *
         * @since 2.0.0
         * @param string $customer_role  The customer role of this product.
         * @return void
         */
        public function set_customer_role($customer_role)
        {
        }
        // end set_customer_role;
        /**
         * Returns the same product, but with price and duration info changed to
         * the ones of a existing pricing variation.
         *
         * Returns false if the price variation is not available.
         *
         * @since 2.0.0
         *
         * @param int    $duration The duration.
         * @param string $duration_unit The duration unit.
         * @return false|self
         */
        public function get_as_variation($duration, $duration_unit)
        {
        }
        // end get_as_variation;
        /**
         * Returns the price variations for this product.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_price_variations()
        {
        }
        // end get_price_variations;
        /**
         * Sets the new price variations.
         *
         * @since 2.0.0
         * @param array $price_variations Price variations array.
         * @return void
         */
        public function set_price_variations($price_variations)
        {
        }
        // end set_price_variations;
        /**
         * Get a particular price variation.
         *
         * @since 2.0.0
         *
         * @param int    $duration The duration.
         * @param string $duration_unit The duration unit.
         * @return object
         */
        public function get_price_variation($duration, $duration_unit)
        {
        }
        // end get_price_variation;
        /**
         * Save (create or update) the model on the database.
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function save()
        {
        }
        // end save;
        /**
         * Creates a copy of the given model adn resets it's id to a 'new' state.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Model\Base_Model
         */
        public function duplicate()
        {
        }
        // end duplicate;
        /**
         * Get available add-ons.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_available_addons()
        {
        }
        // end get_available_addons;
        /**
         * Set available add-ons.
         *
         * @since 2.0.0
         * @param array $available_addons The available addons of this product.
         * @return void
         */
        public function set_available_addons($available_addons)
        {
        }
        // end set_available_addons;
        /**
         * Get the shareable link for this product, depending on the permalinks structure.
         *
         * @since 1.9.0
         * @param int|boolean $deprecated Used to be the product freq.
         * @return string
         */
        public function get_shareable_link($deprecated = false)
        {
        }
        // end get_shareable_link;
        /**
         * Get available add-ons.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_group()
        {
        }
        // end get_group;
        /**
         * Set the group of this product.
         *
         * @since 2.0.0
         * @param array $group The group of this product, if has any.
         * @return void
         */
        public function set_group($group)
        {
        }
        // end set_group;
        /**
         * Get if legacy options are available.
         *
         * @since 2.0.0
         * @return bool
         */
        public function get_legacy_options()
        {
        }
        // end get_legacy_options;
        /**
         * Set if legacy options are available.
         *
         * @since 2.0.0
         * @param bool $legacy_options If the legacy options are enabled.
         * @return void
         */
        public function set_legacy_options($legacy_options)
        {
        }
        // end set_legacy_options;
        /**
         * List of limitations that need to be merged.
         *
         * Every model that is limitable (imports this trait)
         * needs to declare explicitly the limitations that need to be
         * merged. This allows us to chain the merges, and gives us
         * a final list of limitations at the end of the process.
         *
         * In the case of products, there is nothing to add.
         *
         * @see \WP_Ultimo\Models\Traits\Trait_Limitable
         * @since 2.0.0
         * @return array
         */
        public function limitations_to_merge()
        {
        }
    }
}
namespace {
    // end class WU_Coupon;
    /**
     * Deprecated: WU_Plan
     *
     * @deprecated 2.0.0
     */
    class WU_Plan extends \WP_Ultimo\Models\Product
    {
        use \WU_Deprecated_Model;
        /**
         * Override te constructor due to this being a native table.
         *
         * @deprecated 2.0.0
         *
         * @param mixed $object Object containing the parameters.
         */
        public function __construct($object = \null)
        {
        }
        // end __construct;
        /**
         * Generic get method to bypass the protected status of the new models.
         *
         * @since 2.0.0
         *
         * @param string $key The key to set.
         */
        public function __get($key)
        {
        }
        // end __get;
        /**
         * Generic method to bypass the protected status of the new models.
         *
         * @since 2.0.0
         *
         * @param string $key The key to set.
         * @param mixed  $value The value to set.
         */
        public function after_set($key, $value)
        {
        }
    }
}
namespace WP_Ultimo\Models\Traits {
    /**
     * Singleton trait.
     */
    trait Billable
    {
        /**
         * The billing address.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Objects\Billing_Address
         */
        protected $billing_address;
        /**
         * Returns the default billing address.
         *
         * Classes that implement this trait need to implement
         * this method.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Objects\Billing_Address
         */
        public abstract function get_default_billing_address();
        /**
         * Gets the billing address for this object.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Objects\Billing_Address
         */
        public function get_billing_address()
        {
        }
        // end get_billing_address;
        /**
         * Sets the billing address.
         *
         * @since 2.0.0
         *
         * @param array|\WP_Ultimo\Objects\Billing_Address $billing_address The billing address.
         * @return void
         */
        public function set_billing_address($billing_address)
        {
        }
    }
}
namespace WP_Ultimo\Traits {
    /**
     * WP_Ultimo_Subscription_Deprecated trait.
     */
    trait WP_Ultimo_Subscription_Deprecated
    {
        /**
         * Magic getter to provide backwards compatibility for subs.
         *
         * @since 2.0.0
         *
         * @throws \Exception Throws an exception when trying to get a key that is not available or back-compat.
         * @param string $key Property to get.
         * @return mixed
         */
        public function __get($key)
        {
        }
    }
}
namespace WP_Ultimo\Models {
    /**
     * Membership model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Membership extends \WP_Ultimo\Models\Base_Model
    {
        use \WP_Ultimo\Models\Traits\Limitable, \WP_Ultimo\Models\Traits\Billable, \WP_Ultimo\Models\Traits\Notable, \WP_Ultimo\Traits\WP_Ultimo_Subscription_Deprecated;
        /**
         * ID of the customer attached to this membership.
         *
         * @since 2.0.0
         * @var int
         */
        protected $customer_id;
        /**
         * User ID attached to this membership.
         *
         * @since 2.0.0
         * @var int
         */
        protected $user_id;
        /**
         * Plan associated with the membership.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $plan_id;
        /**
         * Additional products. Services and Packages.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $addon_products = array();
        /**
         * Currency for this membership. 3-letter currency code.
         *
         * @since 2.0.0
         * @var string
         */
        protected $currency;
        /**
         * Initial amount for the subscription. Includes the setup fee.
         *
         * @since 2.0.0
         * @var int
         */
        protected $initial_amount = 0;
        /**
         * Is this product recurring?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $recurring = 1;
        /**
         * Should auto-renew?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $auto_renew = 0;
        /**
         * Time interval between charges.
         *
         * @since 2.0.0
         * @var int
         */
        protected $duration = 1;
        /**
         * Time interval unit between charges.
         *
         * - day
         * - week
         * - month
         * - year
         *
         * @since 2.0.0
         * @var string
         */
        protected $duration_unit = 'month';
        /**
         * Amount to charge recurrently.
         *
         * @since 2.0.0
         * @var int
         */
        protected $amount = 0;
        /**
         * Date of creation of this membership.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_created;
        /**
         * Date of activation of this membership.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_activated;
        /**
         * Date of the end of the trial period.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_trial_end;
        /**
         * Date of the next renewal.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_renewed;
        /**
         * Date of the cancellation.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_cancellation;
        /**
         * Date of expiration.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_expiration;
        /**
         * Change of the payment completion for the plan value.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_payment_plan_completed;
        /**
         * Amount of times this membership got billed.
         *
         * @since 2.0.0
         * @var int
         */
        protected $times_billed = 0;
        /**
         * Maximum times we should charge this membership.
         *
         * @since 2.0.0
         * @var int
         */
        protected $billing_cycles;
        /**
         * Status of the membership.
         *
         * @since 2.0.0
         * @var string
         */
        protected $status;
        /**
         * ID of the customer on the payment gateway database.
         *
         * @since 2.0.0
         * @var string
         */
        protected $gateway_customer_id;
        /**
         * ID of the subscription on the payment gateway database.
         *
         * @since 2.0.0
         * @var string
         */
        protected $gateway_subscription_id;
        /**
         * ID of the gateway being used on this subscription.
         *
         * @since 2.0.0
         * @var string
         */
        protected $gateway;
        /**
         * Signup method used to create this membership.
         *
         * @since 2.0.0
         * @var string
         */
        protected $signup_method;
        /**
         * Plan that this membership upgraded from.
         *
         * @since 2.0.0
         * @var int
         */
        protected $upgraded_from;
        /**
         * Date this membership was last modified.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_modified;
        /**
         * If this membership is disabled.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $disabled;
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Memberships\\Membership_Query';
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Gets the customer object associated with this membership.
         *
         * @todo Implement this.
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Customer;
         */
        public function get_customer()
        {
        }
        // end get_customer;
        /**
         * Get the value of customer_id.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_customer_id()
        {
        }
        // end get_customer_id;
        /**
         * Set the value of customer_id.
         *
         * @since 2.0.0
         * @param int $customer_id The ID of the customer attached to this membership.
         * @return void
         */
        public function set_customer_id($customer_id)
        {
        }
        // end set_customer_id;
        /**
         * Checks if a given customer should have access to this site options.
         *
         * @since 2.0.0
         *
         * @param int $customer_id The customer id to check.
         * @return boolean
         */
        public function is_customer_allowed($customer_id = false)
        {
        }
        // end is_customer_allowed;
        /**
         * Get the value of user_id.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_user_id()
        {
        }
        // end get_user_id;
        /**
         * Set the value of user_id.
         *
         * @since 2.0.0
         * @param mixed $user_id The user ID attached to this membership.
         * @return void
         */
        public function set_user_id($user_id)
        {
        }
        // end set_user_id;
        /**
         * Get the value of plan_id.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_plan_id()
        {
        }
        // end get_plan_id;
        /**
         * Returns the plan that created this membership.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Product
         */
        public function get_plan()
        {
        }
        // end get_plan;
        /**
         * Set plan associated with the membership.
         *
         * @since 2.0.0
         * @param int $plan_id The plan ID associated with the membership.
         * @return void
         */
        public function set_plan_id($plan_id)
        {
        }
        // end set_plan_id;
        /**
         * Checks if this membership has a plan.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_plan()
        {
        }
        // end has_plan;
        /**
         * Get additional product objects.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Product[] A list of the addon projects.
         */
        public function get_addons()
        {
        }
        // end get_addons;
        /**
         * Checks if the given membership has addon products.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_addons()
        {
        }
        // end has_addons;
        /**
         * Gets a list of product ids for addons.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_addon_ids()
        {
        }
        // end get_addon_ids;
        /**
         * Adds an an addon product from this membership.
         *
         * @since 2.0.0
         *
         * @param int     $product_id The product id.
         * @param integer $quantity The quantity.
         * @return void
         */
        public function add_product($product_id, $quantity = 1)
        {
        }
        // end add_product;
        /**
         * Removes a product from the membership.
         *
         * @since 2.0.0
         *
         * @param integer $product_id The product id.
         * @param integer $quantity The quantity to remove.
         * @return void
         */
        public function remove_product($product_id, $quantity = 1)
        {
        }
        // end remove_product;
        /**
         * Get additional products. Services and Packages.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_addon_products()
        {
        }
        // end get_addon_products;
        /**
         * Returns a list with all products, including the plan.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_all_products()
        {
        }
        // end get_all_products;
        /**
         * Set additional products. Services and Packages.
         *
         * @since 2.0.0
         * @param mixed $addon_products Additional products related to this membership. Services, Packages or other types of products.
         * @return void
         */
        public function set_addon_products($addon_products)
        {
        }
        // end set_addon_products;
        /**
         * Changes the membership products and totals.
         *
         * This is used when a upgrade, downgrade or addon
         * checkout is processed.
         *
         * It takes a Cart object and uses that to construct
         * the new membership parameters.
         *
         * Important: this method does not SAVE the changes
         * you need to explicitly call save() after a swap
         * to persist the changes.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Cart $order The cart object.
         * @return \WP_Ultimo\Models\Membership
         */
        public function swap($order)
        {
        }
        // end swap;
        /**
         * Schedule a swap for the membership.
         *
         * @since 2.0.0
         *
         * @param Cart           $order The cart representing the change.
         * @param string|boolean $schedule_date The date to schedule the change for.
         * @return int|\WP_Error
         */
        public function schedule_swap($order, $schedule_date = false)
        {
        }
        // end schedule_swap;
        /**
         * Returns the scheduled swap, if any.
         *
         * @since 2.0.0
         * @return object
         */
        public function get_scheduled_swap()
        {
        }
        // end get_scheduled_swap;
        /**
         * Removes a schedule swap.
         *
         * @since 2.0.0
         * @return void
         */
        public function delete_scheduled_swap()
        {
        }
        // end delete_scheduled_swap;
        /**
         * Returns the amount recurring in a human-friendly way.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_recurring_description()
        {
        }
        // end get_recurring_description;
        /**
         * Returns the times billed in a human-friendly way.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_times_billed_description()
        {
        }
        // end get_times_billed_description;
        /**
         * Returns the membership price structure in a way human can understand it.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_price_description()
        {
        }
        // end get_price_description;
        /**
         * Get the value of currency.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_currency()
        {
        }
        // end get_currency;
        /**
         * Set the value of currency.
         *
         * @since 2.0.0
         * @param string $currency The currency that this membership. It's a 3-letter code. E.g. 'USD'.
         * @return void
         */
        public function set_currency($currency)
        {
        }
        // end set_currency;
        /**
         * Get time interval between charges.
         *
         * @return int
         */
        public function get_duration()
        {
        }
        // end get_duration;
        /**
         * Set time interval between charges.
         *
         * @param int $duration The interval period between a charge. Only the interval amount, the unit will be defined in another property.
         */
        public function set_duration($duration)
        {
        }
        // end set_duration;
        /**
         * Get time interval unit between charges.
         *
         * @return string
         */
        public function get_duration_unit()
        {
        }
        // end get_duration_unit;
        /**
         * Set time interval unit between charges.
         *
         * @param string $duration_unit The duration amount type. Can be 'day', 'week', 'month' or 'year'.
         */
        public function set_duration_unit($duration_unit)
        {
        }
        // end set_duration_unit;
        /**
         * Get the product amount.
         *
         * @return int
         */
        public function get_amount()
        {
        }
        // end get_amount;
        /**
         * Get normalized amount. This is used to calculate MRR>
         *
         * @since 2.0.0
         * @return float
         */
        public function get_normalized_amount()
        {
        }
        // end get_normalized_amount;
        /**
         * Set the product amount.
         *
         * @param int $amount The product amount.
         */
        public function set_amount($amount)
        {
        }
        // end set_amount;
        /**
         * Get the product setup fee.
         *
         * @return int
         */
        public function get_initial_amount()
        {
        }
        // end get_initial_amount;
        /**
         * Set the product setup fee.
         *
         * @param int $initial_amount The initial amount charged for this membership, including the setup fee.
         */
        public function set_initial_amount($initial_amount)
        {
        }
        // end set_initial_amount;
        /**
         * Get the value of date_created.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_date_created()
        {
        }
        // end get_date_created;
        /**
         * Set the value of date_created.
         *
         * @since 2.0.0
         * @param mixed $date_created Date of creation of this membership.
         * @return void
         */
        public function set_date_created($date_created)
        {
        }
        // end set_date_created;
        /**
         * Get the value of date_activated.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_activated()
        {
        }
        // end get_date_activated;
        /**
         * Set the value of date_activated.
         *
         * @since 2.0.0
         * @param string $date_activated Date when this membership was activated.
         * @return void
         */
        public function set_date_activated($date_activated)
        {
        }
        // end set_date_activated;
        /**
         * Get the value of date_trial_end.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_trial_end()
        {
        }
        // end get_date_trial_end;
        /**
         * Set the value of date_trial_end.
         *
         * @since 2.0.0
         * @param string $date_trial_end Date when the trial period ends, if this membership has or had a trial period.
         * @return void
         */
        public function set_date_trial_end($date_trial_end)
        {
        }
        // end set_date_trial_end;
        /**
         * Get the value of date_renewed.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_renewed()
        {
        }
        // end get_date_renewed;
        /**
         * Set the value of date_renewed.
         *
         * @since 2.0.0
         * @param string $date_renewed Date when the membership was cancelled.
         * @return void
         */
        public function set_date_renewed($date_renewed)
        {
        }
        // end set_date_renewed;
        /**
         * Get the value of date_cancellation.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_cancellation()
        {
        }
        // end get_date_cancellation;
        /**
         * Set the value of date_cancellation.
         *
         * @since 2.0.0
         * @param mixed $date_cancellation Date when the membership was cancelled.
         * @return void
         */
        public function set_date_cancellation($date_cancellation)
        {
        }
        // end set_date_cancellation;
        /**
         * Get the value of date_expiration.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_date_expiration()
        {
        }
        // end get_date_expiration;
        /**
         * Set the value of date_expiration.
         *
         * @since 2.0.0
         * @param string $date_expiration Date when the membership will expiry.
         * @return void
         */
        public function set_date_expiration($date_expiration)
        {
        }
        // end set_date_expiration;
        /**
         * Calculate a new expiration date.
         *
         * @since  2.0
         *
         * @param bool $from_today Whether to calculate from today (`true`), or extend the existing expiration date (`false`).
         * @param bool $trial      Whether or not this is for a free trial.
         * @return String Date in Y-m-d H:i:s format or null if is a lifetime membership.
         */
        public function calculate_expiration($from_today = false, $trial = false)
        {
        }
        // end calculate_expiration;
        /**
         * Get the value of date_payment_plan_completed.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_date_payment_plan_completed()
        {
        }
        // end get_date_payment_plan_completed;
        /**
         * Set the value of date_payment_plan_completed.
         *
         * @since 2.0.0
         * @param mixed $date_payment_plan_completed Change of the payment completion for the plan value.
         * @return void
         */
        public function set_date_payment_plan_completed($date_payment_plan_completed)
        {
        }
        // end set_date_payment_plan_completed;
        /**
         * Get the value of auto_renew.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function should_auto_renew()
        {
        }
        // end should_auto_renew;
        /**
         * Deprecated: get_auto_renew
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_auto_renew()
        {
        }
        // end get_auto_renew;
        /**
         * Set the value of auto_renew.
         *
         * @since 2.0.0
         * @param bool $auto_renew If this membership should auto-renewal.
         * @return void
         */
        public function set_auto_renew($auto_renew)
        {
        }
        // end set_auto_renew;
        /**
         * Get the value of times_billed.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_times_billed()
        {
        }
        // end get_times_billed;
        /**
         * Set the value of times_billed.
         *
         * @since 2.0.0
         * @param int $times_billed Amount of times this membership got billed.
         * @return void
         */
        public function set_times_billed($times_billed)
        {
        }
        // end set_times_billed;
        /**
         * Increments times billed.
         *
         * @since 2.0.0
         *
         * @param integer $number Amount to increment by.
         * @return \WP_Ultimo\Models\Membership
         */
        public function add_to_times_billed($number = 1)
        {
        }
        // end add_to_times_billed;
        /**
         * Get the value of billing_cycles.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_billing_cycles()
        {
        }
        // end get_billing_cycles;
        /**
         * Checks if this product recurs forever.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_forever_recurring()
        {
        }
        // end is_forever_recurring;
        /**
         * Checks if we are on the max renewals.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function at_maximum_renewals()
        {
        }
        // end at_maximum_renewals;
        /**
         * Set the value of billing_cycles.
         *
         * @since 2.0.0
         * @param mixed $billing_cycles Maximum times we should charge this membership.
         * @return void
         */
        public function set_billing_cycles($billing_cycles)
        {
        }
        // end set_billing_cycles;
        /**
         * Returns the default billing address.
         *
         * Classes that implement this trait need to implement
         * this method.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Objects\Billing_Address
         */
        public function get_default_billing_address()
        {
        }
        // end get_default_billing_address;
        /**
         * Checks if the current membership has a active status.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_active()
        {
        }
        // end is_active;
        /**
         * Get the value of status.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_status()
        {
        }
        // end get_status;
        /**
         * Set the value of status.
         *
         * @since 2.0.0
         * @param string $status The membership status. Can be 'pending', 'active', 'on-hold', 'expired', 'cancelled' or other values added by third-party add-ons.
         * @options \WP_Ultimo\Database\Payments\Payment_Status
         * @return void
         */
        public function set_status($status)
        {
        }
        // end set_status;
        /**
         * Returns the Label for a given severity level.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_status_label()
        {
        }
        // end get_status_label;
        /**
         * Gets the classes for a given class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_status_class()
        {
        }
        // end get_status_class;
        /**
         * Get the value of gateway_customer_id.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_gateway_customer_id()
        {
        }
        // end get_gateway_customer_id;
        /**
         * Set the value of gateway_customer_id.
         *
         * @since 2.0.0
         * @param int $gateway_customer_id The ID of the customer on the payment gateway database.
         * @return void
         */
        public function set_gateway_customer_id($gateway_customer_id)
        {
        }
        // end set_gateway_customer_id;
        /**
         * Get the value of gateway_subscription_id.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_gateway_subscription_id()
        {
        }
        // end get_gateway_subscription_id;
        /**
         * Set the value of gateway_subscription_id.
         *
         * @since 2.0.0
         * @param mixed $gateway_subscription_id The ID of the subscription on the payment gateway database.
         * @return void
         */
        public function set_gateway_subscription_id($gateway_subscription_id)
        {
        }
        // end set_gateway_subscription_id;
        /**
         * Get the value of gateway.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_gateway()
        {
        }
        // end get_gateway;
        /**
         * Set the value of gateway.
         *
         * @since 2.0.0
         * @param mixed $gateway ID of the gateway being used on this subscription.
         * @return void
         */
        public function set_gateway($gateway)
        {
        }
        // end set_gateway;
        /**
         * Get the value of signup_method.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_signup_method()
        {
        }
        // end get_signup_method;
        /**
         * Set the value of signup_method.
         *
         * @since 2.0.0
         * @param mixed $signup_method Signup method used to create this membership.
         * @return void
         */
        public function set_signup_method($signup_method)
        {
        }
        // end set_signup_method;
        /**
         * Get the value of upgraded_from.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_upgraded_from()
        {
        }
        // end get_upgraded_from;
        /**
         * Set the value of upgraded_from.
         *
         * @since 2.0.0
         * @param mixed $upgraded_from Plan that this membership upgraded from.
         * @return void
         */
        public function set_upgraded_from($upgraded_from)
        {
        }
        // end set_upgraded_from;
        /**
         * Get the value of date_modified.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_date_modified()
        {
        }
        // end get_date_modified;
        /**
         * Set the value of date_modified.
         *
         * @since 2.0.0
         * @param mixed $date_modified Date this membership was last modified.
         * @return void
         */
        public function set_date_modified($date_modified)
        {
        }
        // end set_date_modified;
        /**
         * Get the value of disabled.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_disabled()
        {
        }
        // end is_disabled;
        /**
         * Set the value of disabled.
         *
         * @since 2.0.0
         * @param bool $disabled If this membership is a disabled one.
         * @return void
         */
        public function set_disabled($disabled)
        {
        }
        // end set_disabled;
        /**
         * Returns a list of payments associated with this membership.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_payments()
        {
        }
        // end get_payments;
        /**
         * Returns the last pending payment for a membership.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Payment
         */
        public function get_last_pending_payment()
        {
        }
        // end get_last_pending_payment;
        /**
         * Returns the sites attached to this membership.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_sites()
        {
        }
        // end get_sites;
        /**
         * Adds a pending site to the membership meta data.
         *
         * @since 2.0.0
         *
         * @param array $site_info Site info.
         * @return bool
         */
        public function create_pending_site($site_info)
        {
        }
        // end create_pending_site;
        /**
         * Returns the pending site, if any.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Site|false
         */
        public function get_pending_site()
        {
        }
        // end get_pending_site;
        /**
         * Published a pending site, but via job queue.
         *
         * @since 2.0.0
         * @return void
         */
        public function publish_pending_site_async()
        {
        }
        // end publish_pending_site_async;
        /**
         * Publishes a pending site.
         *
         * @since 2.0.0
         * @return true|\WP_Error
         */
        public function publish_pending_site()
        {
        }
        // end publish_pending_site;
        /**
         * Removes a pending site of a membership.
         *
         * @since 2.0.0
         * @return bool
         */
        public function delete_pending_site()
        {
        }
        // end delete_pending_site;
        /**
         * Get is this product recurring?
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_recurring()
        {
        }
        // end is_recurring;
        /**
         * Checks if this is a lifetime membership.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_lifetime()
        {
        }
        // end is_lifetime;
        /**
         * Checks if this plan is free or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_free()
        {
        }
        // end is_free;
        /**
         * Set is this product recurring?
         *
         * @since 2.0.0
         * @param boolean $recurring If this membership is recurring (true), which means the customer paid a defined amount each period of time, or not recurring (false).
         * @return void
         */
        public function set_recurring($recurring)
        {
        }
        // end set_recurring;
        /**
         * Gets the total grossed by the membership so far.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_total_grossed()
        {
        }
        // end get_total_grossed;
        /**
         * By default, we just use the to_array method, but you can rewrite this.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_search_results()
        {
        }
        // end to_search_results;
        /**
         * Renews the membership by updating status and expiration date.
         *
         * Does NOT handle payment processing for the renewal. This should be called after receiving a renewal payment.
         *
         * @since  2.0.0
         *
         * @param bool   $auto_renew  Whether or not the membership is recurring.
         * @param string $status     Membership status.
         * @param string $expiration Membership expiration date in MySQL format.
         * @return true|false Whether or not the renewal was successful.
         */
        public function renew($auto_renew = false, $status = 'active', $expiration = '')
        {
        }
        // end renew;
        /**
         * Changes the membership status to "cancelled".
         *
         * Does NOT handle actual cancellation of subscription payments, that is done in rcp_process_member_cancellation().
         * This should be called after a member is successfully cancelled.
         *
         * @since  2.0.0
         * @return void
         */
        public function cancel()
        {
        }
        // end cancel;
        /**
         * Returns the number of days still left in the cycle.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_remaining_days_in_cycle()
        {
        }
        // end get_remaining_days_in_cycle;
        /**
         * List of limitations that need to be merged.
         *
         * Every model that is limitable (imports this trait)
         * needs to declare explicitly the limitations that need to be
         * merged. This allows us to chain the merges, and gives us
         * a final list of limitations at the end of the process.
         *
         * In the case of membership, we need to mash up
         * all the limitations associated with the membership
         * plan and additional packages.
         *
         * @see \WP_Ultimo\Models\Traits\Trait_Limitable
         * @since 2.0.0
         * @return array
         */
        public function limitations_to_merge()
        {
        }
    }
}
namespace {
    // end class WU_Plan;
    /**
     * Deprecated: WU_Subscription
     *
     * @deprecated 2.0.0
     */
    class WU_Subscription extends \WP_Ultimo\Models\Membership
    {
        use \WU_Deprecated_Model;
        /**
         * Override te constructor due to this being a native table.
         *
         * @deprecated 2.0.0
         *
         * @param mixed $object Object containing the parameters.
         */
        public function __construct($object = \null)
        {
        }
        // end __construct;
        /**
         * Generic method to bypass the protected status of the new models.
         *
         * @since 2.0.0
         *
         * @param string $key The key to set.
         * @param mixed  $value The value to set.
         */
        public function after_set($key, $value)
        {
        }
        // end after_set;
        /**
         * Deprecated: Add a valid coupon code to the subscription.
         *
         * @deprecated 2.0.0
         * @param null $coupon_code Deprecated Argument.
         */
        public function apply_coupon_code($coupon_code = \null)
        {
        }
        // end apply_coupon_code;
        /**
         * Deprecated: Add a valid coupon code to the subscription.
         *
         * @deprecated 2.0.0
         */
        public function get_price_after_coupon_code()
        {
        }
    }
    // end class WU_Subscription;
    /**
     * Deprecated: WU_Signup
     */
    class WU_Signup extends \WP_Ultimo\Checkout\Legacy_Checkout
    {
        /**
         * Override te constructor due to this being a native table.
         *
         * @deprecated 2.0.0
         */
        public function __construct()
        {
        }
    }
    // end class WU_Signup;
    /**
     * Deprecated: WU_Gateway
     *
     * @since 2.0.0
     */
    abstract class WU_Gateway
    {
    }
    // end class WU_Gateway;
    /**
     * Deprecated: WU_Site_Hooks
     *
     * @todo implement this for the legacy checkout.
     * @since 2.0.0
     */
    class WU_Site_Hooks
    {
        /**
         * Deprecated: Return all the templates available for use in Blog Creation
         *
         * @deprecated 2.0.0
         *
         * @since  1.1.3 Templates now use site names instead of path.
         * @since  1.5.4 Optimized version to reduce query count.
         *
         * @param bool $include_wp If we want to include a default WordPress site.
         * @return array Array containing all the available templates.
         */
        public static function get_available_templates($include_wp = \true)
        {
        }
        // end get_available_templates;
        /**
         * Deprecated: Duplicates our template site in the creation of the new user site.
         *
         * @deprecated 2.0.0
         *
         * @param  integer $site_to_duplicate ID of site template.
         * @param  string  $title                   Site Title.
         * @param  string  $domain                  Domain of the new site, as selected.
         * @param  string  $email                   Admin email of the user.
         * @param  string  $site_domain             The site domain.
         * @param  bool    $copy_files              If we need to copy files over.
         *
         * @return integer Site ID of the new site.
         */
        public static function duplicate_site($site_to_duplicate, $title, $domain, $email, $site_domain = \false, $copy_files = '')
        {
        }
        // end duplicate_site;
        /**
         * Deprecated: Returns the preview URL to a given site id.
         *
         * @deprecated 2.0.0
         *
         * @param string $site_id The site to get the preview image.
         * @return string
         */
        public static function get_template_preview_url($site_id = '')
        {
        }
    }
    // end class WU_Site_Hooks;
    /**
     * Deprecated: WU_Transactions
     *
     * @deprecated 2.0.0
     */
    class WU_Transactions
    {
        /**
         * Deprecated: Returns the current time from the network.
         *
         * @deprecated 2.0.0
         *
         * @param string $type Either mysql or timestamp.
         * @return string
         */
        public static function get_current_time($type = 'mysql')
        {
        }
    }
    /**
     * Deprecated: WU_Domain_Mapping
     *
     * This class was rewritten from scratch.
     * The methods below are helper methods that are being implemented to
     * prevent fatal errors.
     *
     * @deprecated 2.0.0
     */
    class WU_Domain_Mapping
    {
        /**
         * Deprecated: get_ip_address
         *
         * @deprecated 2.0.0
         * @return string
         */
        public static function get_ip_address()
        {
        }
        // end get_ip_address;
        /**
         * Deprecated: get_hosting_support_text
         *
         * @deprecated 2.0.0
         * @return string
         */
        public static function get_hosting_support_text()
        {
        }
    }
}
namespace Mercator {
    /**
     * Deprecated: Class Mapping.
     *
     * @since 1.1.3
     */
    class Mapping
    {
        /**
         * Deprecated: Get mapping by domain(s).
         *
         * @since 1.1.3
         *
         * @param string $domains Domain(s) to match against.
         * @deprecated
         * @return mixed
         */
        public static function get_by_domain($domains)
        {
        }
    }
}
namespace WP_Ultimo\Domain_Mapping {
    /**
     * Helper class for domain mapping functionality.
     *
     * @since 2.0.0
     */
    class Helper
    {
        /**
         * List of API endpoints we can use to check the remote IP address.
         *
         * @var array
         */
        static $providers = array('https://ipv4.canihazip.com/s', 'https://ipv4.icanhazip.com/', 'https://api.ipify.org/');
        /**
         * Static-only class.
         */
        private function __construct()
        {
        }
        // end __construct;
        /**
         * Checks if we are in development mode.
         *
         * @todo this needs to be migrate somewhere else, where it can be accessed by everyone.
         * @since 2.0.0
         * @return boolean
         */
        public static function is_development_mode()
        {
        }
        // end is_development_mode;
        /**
         * Gets the local IP address of the network.
         *
         * Sometimes, this will be the same address as the public one, but we need different methods.
         *
         * @since 2.0.0
         * @return string|boolean
         */
        public static function get_local_network_ip()
        {
        }
        // end get_local_network_ip;
        /**
         * Gets the public IP address of the network using an external HTTP call.
         *
         * The reason why this IP can't be determined locally is because proxies like
         * Cloudflare and others will mask the real domain address.
         * By default, we cache the values in a transient for 10 days.
         *
         * @since 2.0.0
         * @return string
         */
        public static function get_network_public_ip()
        {
        }
        // end get_network_public_ip;
        /**
         * Checks if a given domain name has a valid associated SSL certificate.
         *
         * @since 2.0.0
         *
         * @param string $domain Domain name, e.g. google.com.
         * @return boolean
         */
        public static function has_valid_ssl_certificate($domain = '')
        {
        }
    }
    /**
     * Handles redirects to the primary domain of a site with mappings
     *
     * @since 2.0.0
     */
    class Primary_Domain
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Adds the hooks
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_hooks()
        {
        }
        // end add_hooks;
        /**
         * Redirects the site to its primary mapped domain, if any.
         *
         * @since 2.0.0
         * @return void
         */
        public function redirect_to_primary_domain()
        {
        }
        // end redirect_to_primary_domain;
        /**
         * Handles redirects to mapped ot network domain for the admin panel.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_redirect_to_mapped_or_network_domain()
        {
        }
    }
    /**
     * Handles Single Sign-On
     *
     * @since 2.0.0
     */
    class SSO
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Action that serves the JavaScript that handles redirection.
         */
        const ACTION_JS = 'sso-js';
        /**
         * Action that actually handles the SSO login.
         */
        const ACTION_LOGIN = 'sso-login';
        /**
         * Action that checks if we are currently logged in.
         */
        const ACTION_CHECK = 'sso-check';
        /**
         * Hooks the main function to the Domain Mapping load.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Is SSO enabled?
         *
         * @return boolean
         */
        public function is_enabled()
        {
        }
        // end is_enabled;
        /**
         * Checks if SSO is activated and if so, loads the things we need.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_startup()
        {
        }
        // end maybe_startup;
        /**
         * Attach SSO functions into WordPress.
         *
         * @since 2.0.0
         * @return void
         */
        public function startup()
        {
        }
        // end startup;
        /**
         * Ensure COOKIE_DOMAIN is always set to the current domain.
         *
         * @since 2.0.0
         * @return void
         */
        public function initialize_cookie_domain()
        {
        }
        // end initialize_cookie_domain;
        /**
         * Get the cookie domain for a network.
         *
         * Correctly handles custom cookie domains, falling back to main domains,
         * stripping WWW prefixes, etc.
         *
         * @param stdClass $network Network object.
         * @return string Cookie domain (with leading .)
         */
        public function get_cookie_domain($network)
        {
        }
        // end get_cookie_domain;
        /**
         * Is this on the main domain for the network?
         *
         * @param string   $domain Domain to check, defaults to the current host.
         * @param stdClass $network Network object, defaults to the current network.
         * @return boolean Is this the main domain?
         */
        public function is_main_domain($domain = null, $network = null)
        {
        }
        // end is_main_domain;
        /**
         * Get main site for a network
         *
         * @param int $network_id Network ID, null for current network.
         *
         * @return int Main site ("blog" in old terminology) ID.
         */
        public function get_main_site($network_id = null)
        {
        }
        // end get_main_site;
        /**
         * Get an SSO action URL
         *
         * @param string $action SSO action to perform (ACTION_JS/ACTION_LOGIN).
         * @param array  $args Arguments to be added to the URL (unencoded).
         *
         * @return string URL for the given action
         */
        public function get_action_url($action, $args = array())
        {
        }
        // end get_action_url;
        /**
         * Create shared nonce token.
         *
         * WP's tokens are linked to the current user. Due to the nature of what we're
         * doing here, we need to make a user-independent nonce. The user we're working
         * on can instead be part of the action.
         *
         * @param string $action Scalar value to add context to the nonce.
         * @return string Nonce token.
         */
        public function create_shared_nonce($action)
        {
        }
        // end create_shared_nonce;
        /**
         * Verify that correct shared nonce was used with time limit.
         *
         * Uses nonces not linked to the current user. See {@see create_shared_nonce()}
         * for more about why this exists.
         *
         * @param string     $nonce Nonce that was used in the form to verify.
         * @param string|int $action Should give context to what is taking place and be the same when nonce was created.
         * @return bool Whether the nonce check passed or failed.
         */
        public function verify_shared_nonce($nonce, $action)
        {
        }
        // end verify_shared_nonce;
        /**
         * Outputs the logged in status of the current user.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_javascript_logged_in_status_priv()
        {
        }
        // end output_javascript_logged_in_status_priv;
        /**
         * Output Javascript for anonymous users.
         *
         * Short and sweet, nothing to do here.
         */
        public function output_javascript_nopriv()
        {
        }
        // end output_javascript_nopriv;
        /**
         * Output Javascript for logged-in viewers
         *
         * This is where the redirection magic happens.
         */
        public function output_javascript_priv()
        {
        }
        // end output_javascript_priv;
        /**
         * Output Javascript into the header of the page
         *
         * This should be the first asset loaded to reduce loading time.
         */
        public function head_js()
        {
        }
        // end head_js;
        /**
         * Handle a login request/response from admin-ajax.php
         */
        public function handle_login()
        {
        }
        // end handle_login;
        /**
         * Handle request from mapped host
         *
         * The mapped host has just directed the user to here on the main host. Generate
         * a response and token.
         */
        public function handle_login_request()
        {
        }
        // end handle_login_request;
        /**
         * Get the URL to initiate login
         *
         * Accessing this URL will give the user access to the site. Make sure the user
         * is definitely authenticated, as this will log them in.
         *
         * @param int   $user User ID
         * @param array $args {
         *     Arguments for the login URL
         *
         *     @type string $host Host to authenticate for
         *     @type string $back URL to return to after authentication
         *     @type int $site Site ID to authenticate for, defaults to the current site
         * }
         * @return string|WP_Error Login URL for the given domain
         */
        public function get_login_url($user, $args)
        {
        }
        // end get_login_url;
        /**
         * Handle response from main host
         *
         * This is called when the user gets redirected back to the original host, now
         * with an authentication token.
         */
        public function handle_login_response()
        {
        }
    }
}
namespace {
    class MUCD_Data
    {
        private static $to_site_id;
        /**
         * Copy and Update tables from a site to another
         * @since 0.2.0
         * @param  int $from_site_id duplicated site id
         * @param  int $to_site_id   new site id
         */
        public static function copy_data($from_site_id, $to_site_id)
        {
        }
        public static function db_copy_blog_meta($from_site_id, $to_site_id)
        {
        }
        /**
         * Copy tables from a site to another
         * @since 0.2.0
         * @param  int $from_site_id duplicated site id
         * @param  int $to_site_id   new site id
         */
        public static function db_copy_tables($from_site_id, $to_site_id)
        {
        }
        /**
         * Get tables to copy if duplicated site is primary site
         * @since 0.2.0
         * @param  array of string $from_site_tables all tables of duplicated site
         * @param  string $from_site_prefix db prefix of duplicated site
         * @return array of strings : the tables
         */
        public static function get_primary_tables($from_site_prefix)
        {
        }
        /**
         * Updated tables from a site to another
         * @since 0.2.0
         * @param  int $from_site_id duplicated site id
         * @param  int $to_site_id   new site id
         */
        public static function db_update_data($from_site_id, $to_site_id, $saved_options)
        {
        }
        /**
         * Restore options that should be preserved in the new blog
         * @since 0.2.0
         * @param  int $from_site_id duplicated site id
         * @param  int $to_site_id   new site id
         */
        public static function db_restore_data($to_site_id, $saved_options)
        {
        }
        /**
         * Updates a table
         * @since 0.2.0
         * @param  string $table to update
         * @param  array of string $fields to update
         * @param  string $from_string original string to replace
         * @param  string $to_string new string
         */
        public static function update($table, $fields, $from_string, $to_string)
        {
        }
        /**
         * Replace $from_string with $to_string in $val
         * Warning : if $to_string already in $val, no replacement is made
         * @since 0.2.0
         * @param  string $val
         * @param  string $from_string
         * @param  string $to_string
         * @return string the new string
         */
        public static function replace($val, $from_string, $to_string)
        {
        }
        /**
         * Replace recursively $from_string with $to_string in $val
         * @since 0.2.0
         * @param  mixte (string|array) $val
         * @param  string $from_string
         * @param  string $to_string
         * @return string the new string
         */
        public static function replace_recursive($val, $from_string, $to_string)
        {
        }
        /**
         * Try to replace $from_string with $to_string in a row
         * @since 0.2.0
         * @param  array $row the row
         * @param  array $field the field
         * @param  string $from_string
         * @param  string $to_string
         * @return the new data
         */
        public static function try_replace($row, $field, $from_string, $to_string)
        {
        }
        /**
         * Runs a WPDB query
         * @since 0.2.0
         * @param  string  $sql_query the query
         * @param  string  $type type of result
         * @param  boolean $log log the query, or not
         * @return $results of the query
         */
        public static function do_sql_query($sql_query, $type = '', $log = \TRUE)
        {
        }
        /**
         * Stop process on SQL Error, print and log error, removes the new blog
         * @since 0.2.0
         * @param  string  $sql_query the query
         * @param  string  $sql_error the error
         */
        public static function sql_error($sql_query, $sql_error)
        {
        }
    }
    class MUCD_Duplicate
    {
        public static $log;
        /**
         * Init static variables
         * @since 0.2.0
         */
        public static function init()
        {
        }
        /**
         * Main function of the plugin : duplicates a site
         * @since 0.2.0
         * @param  array $data parameters from form
         * @return $form_message result messages of the process
         */
        public static function duplicate_site($data)
        {
        }
        /**
         * Creates an admin user if no user exists with this email
         * @since 0.2.0
         * @param  string $email the email
         * @param  string $domain the domain
         * @return int id of the user
         */
        public static function create_admin($email, $domain)
        {
        }
        /**
         * Copy users and roles from one site to another
         * @since 0.2.0
         * @param  int $from_site_id duplicated site id
         * @param  int $to_site_id   new site id
         */
        public static function copy_users($from_site_id, $to_site_id)
        {
        }
        /**
         * Init log object
         * @since 0.2.0
         * @param  array $data data from FORM
         */
        public static function init_log($data)
        {
        }
        /**
         * Check if log is active
         * @since 0.2.0
         * @return boolean
         */
        public static function log()
        {
        }
        /**
         * Check if log has error
         * @since 0.2.0
         * @return boolean
         */
        public static function log_error()
        {
        }
        /**
         * Writes a message in log file
         * @since 0.2.0
         * @param  string $msg the message
         */
        public static function write_log($msg)
        {
        }
        /**
         * Close the log file
         * @since 0.2.0
         */
        public static function close_log()
        {
        }
        /**
         * Get the url of the created log file
         * @since 0.2.0
         * @return  string the url of false if no log file was created
         */
        public static function log_url()
        {
        }
        /**
         * Get log directory
         * @since 0.2.0
         * @return string the path
         */
        public static function log_dir()
        {
        }
        /**
         * Bypass limit server if possible
         * @since 0.2.0
         */
        public static function bypass_server_limit()
        {
        }
    }
    class MUCD_Files
    {
        /**
         * Copy files from one site to another
         * @since 0.2.0
         * @param  int $from_site_id duplicated site id
         * @param  int $to_site_id   new site id
         */
        public static function copy_files($from_site_id, $to_site_id)
        {
        }
        /**
         * Copy files from one directory to another
         * @since 0.2.0
         * @param  string $src source directory path
         * @param  string $dst destination directory path
         * @param  array  $exclude_dirs directories to ignore
         */
        public static function recurse_copy($src, $dst, $exclude_dirs = array())
        {
        }
        /**
         * Set a directory writable, creates it if not exists, or return false
         * @since 0.2.0
         * @param  string $path the path
         * @return boolean True on success, False on failure
         */
        public static function init_dir($path)
        {
        }
        /**
         * Removes a directory and all its content
         * @since 0.2.0
         * @param  string $dir the path
         */
        public static function rrmdir($dir)
        {
        }
        /**
         * Stop process on Creating dir Error, print and log error, removes the new blog
         * @since 0.2.0
         * @param  string  $dir_path the path
         */
        public static function mkdir_error($dir_path)
        {
        }
    }
    class MUCD_Functions
    {
        /**
         * Check if a path is valid MS-windows path
         * @since 0.2.0
         * @param  string $path the path
         * @return boolean true | false
         */
        public static function valid_windows_dir_path($path)
        {
        }
        /**
         * Check if a path is valid UNIX path
         * @since 0.2.0
         * @param  string $path the path
         * @return boolean true | false
         */
        public static function valid_unix_dir_path($path)
        {
        }
        /**
         * Check if a path is valid MS-windows or UNIX path
         * @since 0.2.0
         * @param  string $path the path
         * @return boolean true | false
         */
        public static function valid_path($path)
        {
        }
        /**
         * Removes completely a blog from the network
         * @since 0.2.0
         * @param  int $blog_id the blog id
         */
        public static function remove_blog($blog_id)
        {
        }
        /**
         * Check if site is duplicable
         * @since 0.2.0
         * @param  int $blog_id the blog id
         * @return boolean true | false
         */
        public static function is_duplicable($blog_id)
        {
        }
        /**
         * Get all duplicable sites
         * @since 0.2.0
         * @return array of blog data
         */
        public static function get_site_list()
        {
        }
        /**
         * Check if a value is in an array for a specific key
         * @since 0.2.0
         * @param  mixte $value the value
         * @param  array $array the array
         * @param  string $key  the key
         * @return boolean true | false
         */
        public static function value_in_array($value, $array, $key)
        {
        }
        /**
         * Get upload directory of the entire network
         * @since 0.2.0
         * @return string path of the upload directory
         */
        public static function get_primary_upload_dir()
        {
        }
        /**
         * Check if site exists
         * @since 1.3.0
         * @param  int $blog_id the blog id
         * @return boolean true | false
         */
        public static function site_exists($blog_id)
        {
        }
        /**
         * Set locale to en_US
         * @since 1.3.1
         */
        public static function set_locale_to_en_US()
        {
        }
        /**
         * Get network data for a given id.
         *
         * @author wp-cli
         * @see https://github.com/wp-cli/wp-cli/blob/master/php/commands/site.php
         *
         * @param int     $network_id
         * @return bool|array False if no network found with given id, array otherwise
         */
        public static function get_network($network_id)
        {
        }
        public static function get_sites($args = array())
        {
        }
        /**
         * Deactivate the plugin if we are not on a multisite installation
         * @since 0.2.0
         */
        public static function check_if_multisite()
        {
        }
        /**
         * Deactivate the plugin if we are not on the network admin
         * @since 1.4.0
         */
        public static function check_if_network_admin()
        {
        }
    }
    class MUCD_Log
    {
        public $mod;
        private $log_dir_path;
        private $log_file_path;
        private $log_file_name;
        private $log_file_url;
        private $fp;
        /**
         * Constructor
         * @since 0.2.0
         * @param boolean $mod is log active
         * @param string $log_dir_path log directory
         * @param string $log_file_name log file name
         */
        public function __construct($mod, $log_dir_path = '', $log_file_name = '')
        {
        }
        /**
         * Returns log directory path
         * @since 0.2.0
         * @return string $this->log_dir_path
         */
        public function dir_path()
        {
        }
        /**
         * Returns log file path
         * @since 0.2.0
         * @return string $this->log_file_path
         */
        public function file_path()
        {
        }
        /**
         * Returns log file name
         * @since 0.2.0
         * @return string $this->log_file_name
         */
        public function file_name()
        {
        }
        /**
         * Returns log file url
         * @since 0.2.0
         * @return string $this->log_file_url
         */
        public function file_url()
        {
        }
        /**
         * Checks if log is writable
         * @since 0.2.0
         * @return boolean True if plugin can writes the log, or false
         */
        public function can_write()
        {
        }
        /**
         * Returns log mod (active or not)
         * @since 0.2.0
         * @return boolean $this->mod
         */
        public function mod()
        {
        }
        /**
         * Initialize file before writing
         * @since 0.2.0
         * @return boolean True on success, False on failure
         */
        private function init_file()
        {
        }
        /**
         * Writes a message in log file
         * @since 0.2.0
         * @param  string $message the message to write
         * @return boolean True on success, False on failure
         */
        public function write_log($message)
        {
        }
        /**
         * Closes the log file
         * @since 0.2.0
         */
        public function close_log()
        {
        }
    }
    class MUCD_Option
    {
        /**
         * Init 'mucd_duplicable' options
         *
         * @param string $blogs_value the value for blogs options
         * @param string $network_value the value for site option
         * @since 0.2.0
         */
        public static function init_duplicable_option($blogs_value = 'no', $network_value = 'all')
        {
        }
        // end init_duplicable_option;
        /**
         * Delete 'mucd_duplicable' option for all sites
         *
         * @since 0.2.0
         */
        public static function delete_duplicable_option()
        {
        }
        // end delete_duplicable_option;
        /**
         * Set 'mucd_duplicable' option to "yes" for the list of blogs, other to "no"
         *
         * @since 0.2.0
         * @param array $blogs list of blogs we want the option set to "yes"
         */
        public static function set_duplicable_option($blogs)
        {
        }
        // end set_duplicable_option;
        /**
         * Add plugin default options
         *
         * @since 1.3.0
         */
        public static function init_options()
        {
        }
        // end init_options;
        /**
         * Removes plugin options
         *
         * @since 1.3.0
         */
        public static function delete_options()
        {
        }
        // end delete_options;
        /**
         * Get log directory option
         *
         * @since 0.2.0
         * @return string the path
         */
        public static function get_option_log_directory()
        {
        }
        // end get_option_log_directory;
        /**
         * Get directories to exclude from file copy when duplicated site is primary site
         *
         * @since 0.2.0
         * @return  array of string
         */
        public static function get_primary_dir_exclude()
        {
        }
        // end get_primary_dir_exclude;
        /**
         * Get default options that should be preserved in the new blog.
         *
         * @since 0.2.0
         * @return  array of string
         */
        public static function get_default_saved_option()
        {
        }
        // end get_default_saved_option;
        /**
         * Get filtered options that should be preserved in the new blog.
         *
         * @since 0.2.0
         * @return  array of string (filtered)
         */
        public static function get_saved_option()
        {
        }
        // end get_saved_option;
        /**
         * Get default fields to scan for an update after data copy
         *
         * @since 0.2.0
         * @return array '%table_name' => array('%field_name_1','%field_name_2','%field_name_3', ...)
         */
        public static function get_default_fields_to_update()
        {
        }
        // end get_default_fields_to_update;
        /**
         * Get filtered fields to scan for an update after data copy
         *
         * @since 0.2.0
         * @return  array of string (filtered)
         */
        public static function get_fields_to_update()
        {
        }
        // end get_fields_to_update;
        /**
         * Get default tables to duplicate when duplicated site is primary site
         *
         * @since 0.2.0
         * @return  array of string
         */
        public static function get_default_primary_tables_to_copy()
        {
        }
        // end get_default_primary_tables_to_copy;
        /**
         * Get filtered tables to duplicate when duplicated site is primary site
         *
         * @since 0.2.0
         * @return  array of string (filtered)
         */
        public static function get_primary_tables_to_copy()
        {
        }
    }
}
namespace WP_Ultimo\Gateways {
    /**
     * Base Gateway class. Should be extended to add new payment gateways.
     *
     * For more info on actual implementations,
     * check the Gateway_Manual class and the Gateway_Stripe class.
     *
     * @since 2.0.0
     */
    abstract class Base_Gateway
    {
        /**
         * The gateway ID.
         *
         * A simple string that the class should set.
         * e.g. stripe, manual, paypal, etc.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id;
        /**
         * Allow gateways to declare multiple additional ids.
         *
         * These ids can be retrieved alongside the main id,
         * via the method get_all_ids().
         *
         * This is useful when dealing with different gateway implementations
         * that share the same base code, or that have code that is applicable
         * to other gateways.
         *
         * A classical example is the way Stripe is setup on WP Ultimo now:
         * - We have two stripe gateways - stripe and stripe-checkout;
         * - Both of those gateways inherit from class-base-stripe-gateway.php,
         *   which deals with appending the remote gateway links to the admin panel,
         *   for example.
         * - The problem arises when the hooks are id-bound. If you have customer
         *   that signup via stripe and later on you deactivate stripe in favor of
         *   stripe-checkout, the admin panel links will stop working, as the hooks
         *   are only triggered for stripe-checkout integrations, and old memberships
         *   have stripe as the gateway.
         * - If you declare the other ids here, the hooks will be loaded for the
         *   other gateways, and that will no longer be a problem.
         *
         * @since 2.0.7
         * @var array
         */
        protected $other_ids = array();
        /**
         * The order cart object.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Checkout\Cart
         */
        protected $order;
        /**
         * The customer.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Customer
         */
        protected $customer;
        /**
         * The membership.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Membership
         */
        protected $membership;
        /**
         * The payment.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Payment
         */
        protected $payment;
        /**
         * The discount code, if any.
         *
         * @since 2.0.0
         * @var null|\WP_Ultimo\Models\Discount_Code
         */
        protected $discount_code;
        /**
         * Backwards compatibility for the old notify ajax url.
         *
         * @since 2.0.4
         * @var bool|string
         */
        protected $backwards_compatibility_v1_id = false;
        /**
         * Initialized the gateway.
         *
         * @since 2.0.0
         * @param null|\WP_Ultimo\Checkout\Cart $order A order cart object.
         */
        public function __construct($order = null)
        {
        }
        // end __construct;
        /**
         * Sets an order.
         *
         * Useful for loading the order on a later
         * stage, where the gateway object might
         * have been already instantiated.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Cart $order The order.
         * @return void
         */
        public function set_order($order)
        {
        }
        // end set_order;
        /**
         * Returns the id of the gateway.
         *
         * @since 2.0.0
         * @return string
         */
        public final function get_id()
        {
        }
        // end get_id;
        /*
         * Required Methods.
         *
         * The methods below are mandatory.
         * You need to have them on your Gateway implementation
         * even if they do nothing.
         */
        /**
         * Process a checkout.
         *
         * It takes the data concerning
         * a new checkout and process it.
         *
         * Here's where you will want to send
         * API calls to the gateway server,
         * set up recurring payment profiles, etc.
         *
         * This method is required and MUST
         * be implemented by gateways extending the
         * Base_Gateway class.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param string                       $type The checkout type. Can be 'new', 'retry', 'upgrade', 'downgrade', 'addon'.
         * @return bool
         */
        public abstract function process_checkout($payment, $membership, $customer, $cart, $type);
        /**
         * Process a cancellation.
         *
         * It takes the data concerning
         * a membership cancellation and process it.
         *
         * Here's where you will want to send
         * API calls to the gateway server,
         * to cancel a recurring profile, etc.
         *
         * This method is required and MUST
         * be implemented by gateways extending the
         * Base_Gateway class.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return bool
         */
        public abstract function process_cancellation($membership, $customer);
        /**
         * Process a refund.
         *
         * It takes the data concerning
         * a refund and process it.
         *
         * Here's where you will want to send
         * API calls to the gateway server,
         * to issue a refund.
         *
         * This method is required and MUST
         * be implemented by gateways extending the
         * Base_Gateway class.
         *
         * @since 2.0.0
         *
         * @param float                        $amount The amount to refund.
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return bool
         */
        public abstract function process_refund($amount, $payment, $membership, $customer);
        /*
         * Optional Methods.
         *
         * The methods below are good to have,
         * but are not mandatory.
         *
         * You can implement the ones you need only.
         * The base class provides defaults so you
         * don't have to worry about the ones you
         * don't need.
         */
        /**
         * Initialization code.
         *
         * This method gets called by the constructor.
         * It is a good chance to set public properties to the
         * gateway object and run preparations.
         *
         * For example, it's here that the Stripe Gateway
         * sets its sandbox mode and API keys
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds Settings.
         *
         * This method allows developers to use
         * WP Ultimo apis to add settings to the settings
         * page.
         *
         * Gateways can use wu_register_settings_field
         * to register API key fields and other options.
         *
         * @since 2.0.0
         * @return void
         */
        public function settings()
        {
        }
        // end settings;
        /**
         * Checkout fields.
         *
         * This method gets called during the printing
         * of the gateways section of the payment page.
         *
         * Use this to add the pertinent fields to your gateway
         * like credit card number fields, for example.
         *
         * @since 2.0.0
         * @return void
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * Declares support for recurring payments.
         *
         * Not all gateways support the creation of
         * automatically recurring payments.
         *
         * For those that don't, we need to manually
         * create pending payments when the time comes
         * and we use this declaration to decide that.
         *
         * If your gateway supports recurring payments
         * (like Stripe or PayPal, for example)
         * override this method to return true instead.
         *
         * @since 2.0.0
         * @return bool
         */
        public function supports_recurring()
        {
        }
        // end supports_recurring;
        /**
         * Declares support for free trials.
         *
         * WP Ultimo offers to ways of dealing with free trials:
         * (1) By asking for a payment method upfront; or
         * (2) By not asking for a payment method until the trial is over.
         *
         * If you go the second route, WP Ultimo uses
         * the free gateway to deal with the first payment (which will be 0)
         *
         * If you go the first route, though, the payment gateway
         * must be able to handle delayed first payments.
         *
         * If that's the case for your payment gateway,
         * override this method to return true.
         *
         * @since 2.0.0
         * @return bool
         */
        public function supports_free_trials()
        {
        }
        // end supports_free_trials;
        /**
         * Handles payment method updates.
         *
         * @since 2.0.0
         * @return void
         */
        public function update_payment_method()
        {
        }
        // end update_payment_method;
        /**
         * Defines a public title.
         *
         * This is useful to be able to define a nice-name
         * for a gateway that will make more sense for customers.
         *
         * Stripe, for example, sets this value to 'Credit Card'
         * as showing up simply as Stripe would confuse customers.
         *
         * By default, we use the title passed when calling
         * wu_register_gateway().
         *
         * @since 2.0.0
         * @return void|string
         */
        public function get_public_title()
        {
        }
        // end get_public_title;
        /**
         * Adds additional hooks.
         *
         * Useful to add additional hooks and filters
         * that do not need to be set during initialization.
         *
         * As this runs later on the wp lifecycle, user apis
         * and other goodies are available.
         *
         * @since 2.0.0
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Run preparations before checkout processing.
         *
         * This runs during the checkout form validation
         * and it is a great chance to do preflight stuff
         * if the gateway requires it.
         *
         * If you return an array here, Ultimo
         * will append the key => value of that array
         * as hidden fields to the checkout field,
         * and those get submitted with the rest of the form.
         *
         * As an example, this is how we create payment
         * intents for Stripe to make the experience more
         * streamlined.
         *
         * @since 2.0.0
         * @return void|array
         */
        public function run_preflight()
        {
        }
        // end run_preflight;
        /**
         * Registers and Enqueue scripts.
         *
         * This method gets called during the rendering
         * of the checkout page, so you can use it
         * to register and enqueue custom scripts
         * and styles.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Gives gateways a chance to run things before backwards compatible webhooks are run.
         *
         * @since 2.0.7
         * @return void
         */
        public function before_backwards_compatible_webhook()
        {
        }
        // end before_backwards_compatible_webhook;
        /**
         * Handles webhook calls.
         *
         * This is the endpoint that gets called
         * when a webhook message is posted to the gateway
         * endpoint.
         *
         * You should process the message, if necessary,
         * and take the appropriate actions, such as
         * renewing memberships, marking payments as complete, etc.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_webhooks()
        {
        }
        // end process_webhooks;
        /**
         * Handles confirmation windows and extra processing.
         *
         * This endpoint gets called when we get to the
         * /confirm/ URL on the registration page.
         *
         * For example, PayPal needs a confirmation screen.
         * And it uses this method to handle that.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_confirmation()
        {
        }
        // end process_confirmation;
        /**
         * Returns the external link to view the payment on the payment gateway.
         *
         * Return an empty string to hide the link element.
         *
         * @since 2.0.0
         *
         * @param string $gateway_payment_id The gateway payment id.
         * @return void|string
         */
        public function get_payment_url_on_gateway($gateway_payment_id)
        {
        }
        // end get_payment_url_on_gateway;
        /**
         * Returns the external link to view the membership on the membership gateway.
         *
         * Return an empty string to hide the link element.
         *
         * @since 2.0.0
         *
         * @param string $gateway_subscription_id The gateway subscription id.
         * @return void|string.
         */
        public function get_subscription_url_on_gateway($gateway_subscription_id)
        {
        }
        // end get_subscription_url_on_gateway;
        /**
         * Returns the external link to view the membership on the membership gateway.
         *
         * Return an empty string to hide the link element.
         *
         * @since 2.0.0
         *
         * @param string $gateway_customer_id The gateway customer id.
         * @return void|string.
         */
        public function get_customer_url_on_gateway($gateway_customer_id)
        {
        }
        // end get_customer_url_on_gateway;
        /*
         * Helper methods
         */
        /**
         * Get the return URL.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_return_url()
        {
        }
        // end get_return_url;
        /**
         * Get the cancel URL.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_cancel_url()
        {
        }
        // end get_cancel_url;
        /**
         * Get the confirm URL.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_confirm_url()
        {
        }
        // end get_confirm_url;
        /**
         * Returns the webhook url for the listener of this gateway events.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_webhook_listener_url()
        {
        }
        // end get_webhook_listener_url;
        /**
         * Set the payment.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\Models\Payment $payment The payment.
         * @return void
         */
        public function set_payment($payment)
        {
        }
        // end set_payment;
        /**
         * Set the membership.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @return void
         */
        public function set_membership($membership)
        {
        }
        // end set_membership;
        /**
         * Set the customer.
         *
         * @since 2.0.0
         * @param \WP_Ultimo\Models\Payment $customer The customer.
         * @return void
         */
        public function set_customer($customer)
        {
        }
        // end set_customer;
        /**
         * Triggers the events related to processing a payment.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The payment model.
         * @param \WP_Ultimo\Models\Membership $membership The membership object.
         * @return void
         */
        public function trigger_payment_processed($payment, $membership = null)
        {
        }
        // end trigger_payment_processed;
        /**
         * Save a cart for a future swap.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Cart $cart The cart to swap to.
         * @return string
         */
        public function save_swap($cart)
        {
        }
        // end save_swap;
        /**
         * Gets a saved swap based on the id.
         *
         * @since 2.0.0
         *
         * @param string $swap_id The saved swap id.
         * @return \WP_Ultimo\Checkout\Cart|false
         */
        public function get_saved_swap($swap_id)
        {
        }
        // end get_saved_swap;
        /**
         * Get the compatibility ids for this gateway.
         *
         * @since 2.0.7
         * @return array
         */
        public function get_all_ids()
        {
        }
        // end get_all_ids;
        /**
         * Returns the backwards compatibility id of the gateway from v1.
         *
         * @since 2.0.4
         * @return string
         */
        public function get_backwards_compatibility_v1_id()
        {
        }
    }
    /**
     * Base Gateway class. Should be extended to add new payment gateways.
     *
     * @since 2.0.0
     */
    class Base_Stripe_Gateway extends \WP_Ultimo\Gateways\Base_Gateway
    {
        /**
         * Allow gateways to declare multiple additional ids.
         *
         * These ids can be retrieved alongside the main id,
         * via the method get_all_ids().
         *
         * @since 2.0.7
         * @var array
         */
        protected $other_ids = array('stripe', 'stripe-checkout');
        /**
         * Backwards compatibility for the old notify ajax url.
         *
         * @since 2.0.4
         * @var bool|string
         */
        protected $backwards_compatibility_v1_id = 'stripe';
        /**
         * Holds the publishable API key provided by Stripe.
         *
         * @since 2.0.0
         * @var string
         */
        protected $publishable_key;
        /**
         * Holds the secret API key provided by Stripe.
         *
         * @since 2.0.0
         * @var string
         */
        protected $secret_key;
        /**
         * Declares support to recurring payments.
         *
         * @since 2.0.0
         * @return true
         */
        public function supports_recurring()
        {
        }
        // end supports_recurring;
        /**
         * Get things going
         *
         * @access public
         * @since  2.1
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Setup api keys for stripe.
         *
         * @since 2.0.7
         *
         * @param string $id The gateway stripe id.
         * @return void
         */
        public function setup_api_keys($id)
        {
        }
        // end setup_api_keys;
        /**
         * Adds additional hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Allows Gateways to override the gateway title.
         *
         * @since 2.0.0
         *
         * @return string
         */
        public function get_public_title()
        {
        }
        // end get_public_title;
        /**
         * Adds the Stripe Gateway settings to the settings screen.
         *
         * @since 2.0.0
         * @return void
         */
        public function settings()
        {
        }
        // end settings;
        /**
         * Checks if we already have a webhook listener installed.
         *
         * @since 2.0.0
         * @return WebhookEndpoint|\WP_Error|false
         */
        public function has_webhook_installed()
        {
        }
        // end has_webhook_installed;
        /**
         * Installs webhook urls onto Stripe.
         *
         * WP Ultimo will call this whenever settings for this api changes.
         * That being said, it might be a good idea to check if the webhook already exists
         * before trying to re-create it.
         *
         * Return true for success, or a \WP_Error instance in case of failure.
         *
         * @since 2.0.0
         *
         * @param array $settings The final settings array being saved, containing ALL options.
         * @param array $settings_to_save Array containing just the options being updated.
         * @param array $saved_settings Array containing the original settings.
         * @return true|\WP_Error
         */
        public function install_webhook($settings, $settings_to_save, $saved_settings)
        {
        }
        // end install_webhook;
        /**
         * Run preparations before checkout processing.
         *
         * This runs during the checkout form validation
         * and it is a great chance to do preflight stuff
         * if the gateway requires it.
         *
         * If you return an array here, Ultimo
         * will append the key => value of that array
         * as hidden fields to the checkout field,
         * and those get submitted with the rest of the form.
         *
         * As an example, this is how we create payment
         * intents for Stripe to make the experience more
         * streamlined.
         *
         * @since 2.0.0
         * @return void|array
         */
        public function run_preflight()
        {
        }
        // end run_preflight;
        /**
         * Get or create Stripe Customer.
         *
         * @since 2.0.0
         *
         * @param integer $customer_id WP Ultimo customer ID.
         * @param integer $user_id The WordPress user ID.
         * @param integer $stripe_customer_id The Stripe Customer ID.
         * @return Stripe\Customer|\WP_Error
         */
        public function get_or_create_customer($customer_id = 0, $user_id = 0, $stripe_customer_id = 0)
        {
        }
        // end get_or_create_customer;
        /**
         * Returns an array with customer meta data.
         *
         * @since 2.0.0
         * @return array
         */
        protected function get_customer_metadata()
        {
        }
        // end get_customer_metadata;
        /**
         * Process a checkout.
         *
         * It takes the data concerning
         * a new checkout and process it.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param string                       $type The checkout type. Can be 'new', 'retry', 'upgrade', 'downgrade', 'addon'.
         *
         * @throws \Exception When a stripe API error is caught.
         *
         * @return void
         */
        public function process_checkout($payment, $membership, $customer, $cart, $type)
        {
        }
        // end process_checkout;
        /**
         * Create a recurring subscription in Stripe.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param string                       $type The checkout type. Can be 'new', 'retry', 'upgrade', 'downgrade', 'addon'.
         * @param Stripe\PaymentMethod         $payment_method The save payment method on Stripe.
         * @param Stripe\Customer              $s_customer The Stripe customer.
         * @param Stripe\PaymentIntent         $payment_intent The payment intent.
         *
         * @return void
         */
        protected function create_recurring_payment($payment, $membership, $customer, $cart, $type, $payment_method, $s_customer, $payment_intent)
        {
        }
        // end create_recurring_payment;
        /**
         * Checks if we need to create a pro-rate/credit coupon based on the cart data.
         *
         * Will return an array with coupon arguments for stripe if
         * there is credit to be added and false if not.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Cart $cart The current cart.
         * @return array|false
         */
        protected function generate_credit_coupon_data($cart)
        {
        }
        // end generate_credit_coupon_data;
        /**
         * Builds the non-recurring list of items to be paid on Stripe.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Cart $cart The cart/order object.
         * @param bool                     $include_recurring_products If we should include recurring items as non-recurring.
         * @return array
         */
        protected function build_non_recurring_cart($cart, $include_recurring_products = false)
        {
        }
        // end build_non_recurring_cart;
        /**
         * Converts the WP Ultimo cart into Stripe Sub arguments.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Cart $cart The cart object.
         * @return array
         */
        protected function build_stripe_cart($cart)
        {
        }
        // end build_stripe_cart;
        /**
         * Saves a payment method to a customer on Stripe.
         *
         * @since 2.0.0
         *
         * @param  Stripe\Payment_Intent $payment_intent The payment intent.
         * @param  Stripe\Customer       $s_customer The stripe customer.
         * @return Stripe\Payment_Method
         */
        protected function save_payment_method($payment_intent, $s_customer)
        {
        }
        // end save_payment_method;
        /**
         * Maybe cancel old subscriptions.
         *
         * @since 2.0.0
         *
         * @param Stripe\Customer $s_customer The stripe customer.
         * @return void
         */
        public function maybe_cancel_old_subscriptions($s_customer)
        {
        }
        // end maybe_cancel_old_subscriptions;
        /**
         * Process a refund.
         *
         * It takes the data concerning
         * a refund and process it.
         *
         * @since 2.0.0
         *
         * @param float                        $amount The amount to refund.
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void|bool
         */
        public function process_refund($amount, $payment, $membership, $customer)
        {
        }
        // end process_refund;
        /**
         * Process a cancellation.
         *
         * It takes the data concerning
         * a membership cancellation and process it.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void|bool
         */
        public function process_cancellation($membership, $customer)
        {
        }
        // end process_cancellation;
        /**
         * Attempt to guess the maximum `billing_cycle_anchor` Stripe will allow us to set, given a signup date
         * and billing cycle interval.
         *
         * @param int    $interval      Billing cycle interval.
         * @param string $interval_unit Billing cycle interval unit.
         * @param string $signup_date   Signup date that can be parsed by `strtotime()`. Will almost always be
         *                              `now`, but can be overridden for help in unit tests.
         *
         * @since 2.0.0
         * @return DateTime
         */
        public function get_stripe_max_billing_cycle_anchor($interval, $interval_unit, $signup_date = 'now')
        {
        }
        // end get_stripe_max_billing_cycle_anchor;
        /**
         * Get Stripe error from exception
         *
         * This converts the exception into a WP_Error object with a localized error message.
         *
         * @param Error\Base $e The stripe error object.
         *
         * @since 2.0.0
         * @return WP_Error
         */
        protected function get_stripe_error($e)
        {
        }
        // end get_stripe_error;
        /**
         * Localize common Stripe error messages so they're available for translation.
         *
         * @link https://stripe.com/docs/error-codes
         *
         * @param string $error_code    Stripe error code.
         * @param string $error_message Original Stripe error message. This will be returned if we don't have a localized version of
         *                              the error code.
         *
         * @since 2.0.0
         * @return string
         */
        protected function get_localized_error_message($error_code, $error_message = '')
        {
        }
        // end get_localized_error_message;
        /**
         * Gives gateways a chance to run things before backwards compatible webhooks are run.
         *
         * @since 2.0.8
         * @return void
         */
        public function before_backwards_compatible_webhook()
        {
        }
        // end before_backwards_compatible_webhook;
        /**
         * Process webhooks
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function process_webhooks()
        {
        }
        // end process_webhooks;
        /**
         * Get saved card options for this customers.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_saved_card_options()
        {
        }
        // end get_saved_card_options;
        /**
         * Add credit card fields.
         *
         * @since 2.0.0
         * @return string
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * Load fields for the Update Billing Card form.
         *
         * @since 2.0.0
         * @return void
         */
        public function update_card_fields()
        {
        }
        // end update_card_fields;
        /**
         * Register stripe scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Maybe create a new tax rate on Stripe
         *
         * @since 2.0.0
         *
         * @param array $args The tax rate arguments.
         * @return string
         */
        public function maybe_create_tax_rate($args)
        {
        }
        // end maybe_create_tax_rate;
        /**
         * Checks to see if a plan exists with the provided arguments, and if so, returns the ID of
         * that plan. If not, a new plan is created.
         *
         * This method differs from create_plan() and plan_exists() because it doesn't expect
         * a membership level ID number. This allows for the creation of plans that may not be
         * exactly based on a membership level's parameters.
         *
         * @param array $args           {
         *                              Array of arguments.
         *
         * @type string $name           Required. Name of the plan.
         * @type float  $price          Required. Price each interval.
         * @type string $interval       Optional. Billing interval (i.e ."day", "month", "year"). Default is "month".
         * @type int    $interval_count Optional. Interval count. Default is "1".
         * @type string $currency       Optional. Currency. Defaults to site currency.
         * @type string $id             Optional. Plan ID. Automatically generated based on arguments.
         *                    }
         *
         * @since 2.0.0
         * @return string|WP_Error Plan ID on success or WP_Error on failure.
         */
        public function maybe_create_plan($args)
        {
        }
        // end maybe_create_plan;
        /**
         * Generate a Stripe plan ID string based on a membership level
         *
         * The plan name is set to {levelname}-{price}-{duration}{duration unit}
         * Strip out invalid characters such as '@', '.', and '()'.
         * Similar to WP core's sanitize_html_class() & sanitize_key() functions.
         *
         * @param object $product_info The product info object.
         *
         * @since 2.0.0
         * @return string
         */
        private function generate_plan_id($product_info)
        {
        }
        // end generate_plan_id;
        /**
         * Get the saved Stripe payment methods for a given user ID.
         *
         * @since 2.0.0
         *
         * @throws \Exception, When info is wrong.
         * @throws \Exception When info is wrong 2.
         * @return PaymentMethod[]|array
         */
        public function get_user_saved_payment_methods()
        {
        }
        // end get_user_saved_payment_methods;
        /**
         * Returns the external link to view the payment on the payment gateway.
         *
         * Return an empty string to hide the link element.
         *
         * @since 2.0.0
         *
         * @param string $gateway_payment_id The gateway payment id.
         * @return string.
         */
        public function get_payment_url_on_gateway($gateway_payment_id)
        {
        }
        // end get_payment_url_on_gateway;
        /**
         * Returns the external link to view the membership on the membership gateway.
         *
         * Return an empty string to hide the link element.
         *
         * @since 2.0.0
         *
         * @param string $gateway_subscription_id The gateway subscription id.
         * @return string.
         */
        public function get_subscription_url_on_gateway($gateway_subscription_id)
        {
        }
        // end get_subscription_url_on_gateway;
        /**
         * Returns the external link to view the customer on the gateway.
         *
         * Return an empty string to hide the link element.
         *
         * @since 2.0.7
         *
         * @param string $gateway_customer_id The gateway customer id.
         * @return string.
         */
        public function get_customer_url_on_gateway($gateway_customer_id)
        {
        }
    }
    /**
     * Base Gateway class. Should be extended to add new payment gateways.
     *
     * @since 2.0.0
     */
    class Free_Gateway extends \WP_Ultimo\Gateways\Base_Gateway
    {
        /**
         * Holds the ID of a given gateway.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'free';
        /**
         * Process a checkout.
         *
         * It takes the data concerning
         * a new checkout and process it.
         *
         * Here's where you will want to send
         * API calls to the gateway server,
         * set up recurring payment profiles, etc.
         *
         * This method is required and MUST
         * be implemented by gateways extending the
         * Base_Gateway class.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param string                       $type The checkout type. Can be 'new', 'retry', 'upgrade', 'downgrade', 'addon'.
         * @return void
         */
        public function process_checkout($payment, $membership, $customer, $cart, $type)
        {
        }
        // end process_checkout;
        /**
         * Process a cancellation.
         *
         * It takes the data concerning
         * a membership cancellation and process it.
         *
         * Here's where you will want to send
         * API calls to the gateway server,
         * to cancel a recurring profile, etc.
         *
         * This method is required and MUST
         * be implemented by gateways extending the
         * Base_Gateway class.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void
         */
        public function process_cancellation($membership, $customer)
        {
        }
        // end process_cancellation;
        /**
         * Process a refund.
         *
         * It takes the data concerning
         * a refund and process it.
         *
         * Here's where you will want to send
         * API calls to the gateway server,
         * to issue a refund.
         *
         * This method is required and MUST
         * be implemented by gateways extending the
         * Base_Gateway class.
         *
         * @since 2.0.0
         *
         * @param float                        $amount The amount to refund.
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void
         */
        public function process_refund($amount, $payment, $membership, $customer)
        {
        }
    }
    /**
     * This exception will be caught but will not trigger a 500.
     *
     * @since 2.0.7
     */
    class Ignorable_Exception extends \Exception
    {
    }
    /**
     * Manual Payments Gateway
     *
     * @since 2.0.0
     */
    class Manual_Gateway extends \WP_Ultimo\Gateways\Base_Gateway
    {
        /**
         * Holds the ID of a given gateway.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'manual';
        /**
         * Adds the necessary hooks for the manual gateway.
         *
         * @since 2.0.0
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Declares support to recurring payments.
         *
         * Manual payments need to be manually paid,
         * so we return false here.
         *
         * @since 2.0.0
         * @return false
         */
        public function supports_recurring()
        {
        }
        // end supports_recurring;
        /**
         * Declares support to free trials
         *
         * @since 2.0.0
         * @return false
         */
        public function supports_free_trials()
        {
        }
        // end supports_free_trials;
        /**
         * Adds the Stripe Gateway settings to the settings screen.
         *
         * @since 2.0.0
         * @return void
         */
        public function settings()
        {
        }
        // end settings;
        /**
         * Process a checkout.
         *
         * It takes the data concerning
         * a new checkout and process it.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param string                       $type The checkout type. Can be 'new', 'retry', 'upgrade', 'downgrade', 'addon'.
         *
         * @throws \Exception When saving a membership fails.
         *
         * @return bool
         */
        public function process_checkout($payment, $membership, $customer, $cart, $type)
        {
        }
        // end process_checkout;
        /**
         * Process a cancellation.
         *
         * It takes the data concerning
         * a membership cancellation and process it.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void|bool
         */
        public function process_cancellation($membership, $customer)
        {
        }
        // end process_cancellation;
        /**
         * Process a checkout.
         *
         * It takes the data concerning
         * a refund and process it.
         *
         * @since 2.0.0
         *
         * @param float                        $amount The amount to refund.
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void|bool
         */
        public function process_refund($amount, $payment, $membership, $customer)
        {
        }
        // end process_refund;
        /**
         * Adds additional fields to the checkout form for a particular gateway.
         *
         * In this method, you can either return an array of fields (that we will display
         * using our form display methods) or you can return plain HTML in a string,
         * which will get outputted to the gateway section of the checkout.
         *
         * @since 2.0.0
         * @return array|string
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * Adds the payment instruction block.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The current payment.
         * @param \WP_Ultimo\Models\Membership $membership the current membership.
         * @param \WP_Ultimo\Models\Customer   $customer the current customer.
         * @return void
         */
        public function add_payment_instructions_block($payment, $membership, $customer)
        {
        }
    }
    /**
     * PayPal Payments Gateway
     *
     * @since 2.0.0
     */
    class PayPal_Gateway extends \WP_Ultimo\Gateways\Base_Gateway
    {
        /**
         * Holds the ID of a given gateway.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'paypal';
        /**
         * Holds if we are in test mode.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $test_mode = true;
        /**
         * The API endpoint. Depends on the test mode.
         *
         * @since 2.0.0
         * @var string
         */
        protected $api_endpoint;
        /**
         * Checkout URL.
         *
         * @since 2.0.0
         * @var string
         */
        protected $checkout_url;
        /**
         * PayPal username.
         *
         * @since 2.0.0
         * @var string
         */
        protected $username;
        /**
         * PayPal password.
         *
         * @since 2.0.0
         * @var string
         */
        protected $password;
        /**
         * PayPal signature.
         *
         * @since 2.0.0
         * @var string
         */
        protected $signature;
        /**
         * Backwards compatibility for the old notify ajax url.
         *
         * @since 2.0.4
         * @var bool|string
         */
        protected $backwards_compatibility_v1_id = 'paypal';
        /**
         * Declares support to recurring payments.
         *
         * Manual payments need to be manually paid,
         * so we return false here.
         *
         * @since 2.0.0
         * @return false
         */
        public function supports_recurring()
        {
        }
        // end supports_recurring;
        /**
         * Adds the necessary hooks for the manual gateway.
         *
         * @since 2.0.0
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Initialization code.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds the PayPal Gateway settings to the settings screen.
         *
         * @since 2.0.0
         * @return void
         */
        public function settings()
        {
        }
        // end settings;
        /**
         * Process a checkout.
         *
         * It takes the data concerning
         * a new checkout and process it.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param string                       $type The checkout type. Can be 'new', 'retry', 'upgrade', 'downgrade', 'addon'.
         * @return void
         */
        public function process_checkout($payment, $membership, $customer, $cart, $type)
        {
        }
        // end process_checkout;
        /**
         * Process a cancellation.
         *
         * It takes the data concerning
         * a membership cancellation and process it.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void|bool
         */
        public function process_cancellation($membership, $customer)
        {
        }
        // end process_cancellation;
        /**
         * Process a checkout.
         *
         * It takes the data concerning
         * a refund and process it.
         *
         * @since 2.0.0
         *
         * @throws \Exception                  When something goes wrong.
         *
         * @param float                        $amount The amount to refund.
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void|bool
         */
        public function process_refund($amount, $payment, $membership, $customer)
        {
        }
        // end process_refund;
        /**
         * Adds additional fields to the checkout form for a particular gateway.
         *
         * In this method, you can either return an array of fields (that we will display
         * using our form display methods) or you can return plain HTML in a string,
         * which will get outputted to the gateway section of the checkout.
         *
         * @since 2.0.0
         * @return array|string
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * Process confirmation.
         *
         * Some gateways require user confirmation at some point.
         * It's the case for PayPal Express, for example.
         * This method implements the necessary things.
         *
         * After a successful payment, redirect to $this->return_url.
         *
         * @access public
         * @return void
         */
        public function process_confirmation()
        {
        }
        // end process_confirmation;
        /**
         * Process webhooks
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function process_webhooks()
        {
        }
        // end process_webhooks;
        /**
         * Create a recurring profile.
         *
         * @since 2.0.0
         *
         * @param array                        $details The PayPal transaction details.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void
         */
        protected function create_recurring_profile($details, $cart, $payment, $membership, $customer)
        {
        }
        // end create_recurring_profile;
        /**
         * Get the subscription description.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Cart $cart The cart object.
         * @return string
         */
        protected function get_subscription_description($cart)
        {
        }
        // end get_subscription_description;
        /**
         * Create a single payment on PayPal.
         *
         * @since 2.0.0
         *
         * @param array                        $details The PayPal transaction details.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @return void
         */
        protected function complete_single_payment($details, $cart, $payment, $membership, $customer)
        {
        }
        // end complete_single_payment;
        /**
         * Display the confirmation form.
         *
         * @since 2.1
         * @return string
         */
        public function confirmation_form()
        {
        }
        // end confirmation_form;
        /**
         * Get checkout details.
         *
         * @param string $token PayPal token.
         *
         * @return array|bool|string|WP_Error
         */
        public function get_checkout_details($token = '')
        {
        }
        // end get_checkout_details;
        /**
         * Returns the external link to view the payment on the payment gateway.
         *
         * Return an empty string to hide the link element.
         *
         * @since 2.0.0
         *
         * @param string $gateway_payment_id The gateway payment id.
         * @return string.
         */
        public function get_payment_url_on_gateway($gateway_payment_id)
        {
        }
        // end get_payment_url_on_gateway;
        /**
         * Returns the external link to view the membership on the membership gateway.
         *
         * Return an empty string to hide the link element.
         *
         * @since 2.0.0
         *
         * @param string $gateway_subscription_id The gateway subscription id.
         * @return string.
         */
        public function get_subscription_url_on_gateway($gateway_subscription_id)
        {
        }
    }
    /**
     * Base Gateway class. Should be extended to add new payment gateways.
     *
     * @since 2.0.0
     */
    class Stripe_Checkout_Gateway extends \WP_Ultimo\Gateways\Base_Stripe_Gateway
    {
        /**
         * Holds the ID of a given gateway.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'stripe-checkout';
        /**
         * Adds the Stripe Gateway settings to the settings screen.
         *
         * @since 2.0.0
         * @return void
         */
        public function settings()
        {
        }
        // end settings;
        /**
         * Run preparations before checkout processing.
         *
         * This runs during the checkout form validation
         * and it is a great chance to do preflight stuff
         * if the gateway requires it.
         *
         * If you return an array here, Ultimo
         * will append the key => value of that array
         * as hidden fields to the checkout field,
         * and those get submitted with the rest of the form.
         *
         * As an example, this is how we create payment
         * intents for Stripe to make the experience more
         * streamlined.
         *
         * @since 2.0.0
         * @return void|array
         */
        public function run_preflight()
        {
        }
        // end run_preflight;
        /**
         * Handles confirmation windows and extra processing.
         *
         * This endpoint gets called when we get to the
         * /confirm/ URL on the registration page.
         *
         * For example, PayPal needs a confirmation screen.
         * And it uses this method to handle that.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_confirmation()
        {
        }
        // end process_confirmation;
        /**
         * Add credit card fields.
         *
         * @since 2.0.0
         * @return string
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * Returns the payment methods.
         *
         * @since 2.0.0
         * @return array
         */
        public function payment_methods()
        {
        }
        // end payment_methods;
        /**
         * Register stripe scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Get the saved Stripe payment methods for a given user ID.
         *
         * @since 2.0.0
         *
         * @throws \Exception, When info is wrong.
         * @throws \Exception When info is wrong 2.
         * @return PaymentMethod[]|array
         */
        public function get_user_saved_payment_methods()
        {
        }
    }
    /**
     * Base Gateway class. Should be extended to add new payment gateways.
     *
     * @since 2.0.0
     */
    class Stripe_Gateway extends \WP_Ultimo\Gateways\Base_Stripe_Gateway
    {
        /**
         * Holds the ID of a given gateway.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'stripe';
        /**
         * Adds additional hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Adds the Stripe Gateway settings to the settings screen.
         *
         * @since 2.0.0
         * @return void
         */
        public function settings()
        {
        }
        // end settings;
        /**
         * Run preparations before checkout processing.
         *
         * This runs during the checkout form validation
         * and it is a great chance to do preflight stuff
         * if the gateway requires it.
         *
         * If you return an array here, Ultimo
         * will append the key => value of that array
         * as hidden fields to the checkout field,
         * and those get submitted with the rest of the form.
         *
         * As an example, this is how we create payment
         * intents for Stripe to make the experience more
         * streamlined.
         *
         * @since 2.0.0
         * @return void|array
         */
        public function run_preflight()
        {
        }
        // end run_preflight;
        /**
         * Process a checkout.
         *
         * It takes the data concerning
         * a new checkout and process it.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment    $payment The payment associated with the checkout.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @param \WP_Ultimo\Models\Customer   $customer The customer checking out.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param string                       $type The checkout type. Can be 'new', 'retry', 'upgrade', 'downgrade', 'addon'.
         *
         * @throws \Exception When a stripe API error is caught.
         *
         * @return void
         */
        public function process_checkout($payment, $membership, $customer, $cart, $type)
        {
        }
        // end process_checkout;
        /**
         * Add credit card fields.
         *
         * @since 2.0.0
         * @return string
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * Returns the payment methods.
         *
         * @since 2.0.0
         * @return array
         */
        public function payment_methods()
        {
        }
        // end payment_methods;
        /**
         * Register stripe scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Get the saved Stripe payment methods for a given user ID.
         *
         * @since 2.0.0
         *
         * @throws \Exception, When info is wrong.
         * @throws \Exception When info is wrong 2.
         * @return PaymentMethod[]|array
         */
        public function get_user_saved_payment_methods()
        {
        }
    }
}
namespace WP_Ultimo\Helpers {
    /**
     * Handles hashing to encode ids and prevent spoofing due to auto-increments.
     *
     * @since 2.0.0
     */
    class Hash
    {
        /**
         * Hash length.
         */
        const LENGTH = 10;
        /**
         * Static-only class.
         */
        private function __construct()
        {
        }
        // end __construct;
        /**
         * Encodes a number or ID. Do not use to encode strings.
         *
         * @since 2.0.0
         *
         * @param integer $number Number to encode.
         * @param string  $group Hash group. Used to increase entropy.
         * @return string
         */
        public static function encode($number, $group = 'wp-ultimo')
        {
        }
        // end encode;
        /**
         * Decodes a hash back into an integer.
         *
         * @since 2.0.0
         *
         * @param string $hash Hash to decode.
         * @param string $group Hash group. Used to increase entropy.
         * @return int
         */
        public static function decode($hash, $group = 'wp-ultimo')
        {
        }
    }
    /**
     * Takes screenshots from websites.
     *
     * @since 2.0.0
     */
    class Screenshot
    {
        /**
         * Returns the api link for the screenshot.
         *
         * @since 2.0.0
         *
         * @param string $domain Original site domain.
         * @return string
         */
        public static function api_url($domain)
        {
        }
        // end api_url;
        /**
         * Takes in a URL and creates it as an attachment.
         *
         * @since 2.0.0
         *
         * @param string $url Image URL to download.
         * @return string|false
         */
        public static function take_screenshot($url)
        {
        }
        // end take_screenshot;
        /**
         * Downloads the image from the URL.
         *
         * @since 2.0.0
         *
         * @param string $url Image URL to download.
         * @return int|false
         */
        public static function save_image_from_url($url)
        {
        }
    }
    /**
     * Handles hashing to encode ids and prevent spoofing due to auto-increments.
     *
     * @since 2.0.0
     */
    class Sender
    {
        /**
         * Parse attributes against the defaults.
         *
         * @since 2.0.0
         *
         * @param array $args The args passed.
         * @return array
         */
        public static function parse_args($args = array())
        {
        }
        // end parse_args;
        /**
         * Send an email to one or more users.
         *
         * @since 2.0.0
         *
         * @param array  $from From whom will be send this mail.
         * @param string $to   To who this email is.
         * @param array  $args With content, subject and other arguments, has shortcodes, mail type.
         * @return array With the send response.
         */
        public static function send_mail($from = array(), $to = array(), $args = array())
        {
        }
        // end send_mail;
        /**
         * Change the shortcodes for values in the content.
         *
         * @since 2.0.0
         *
         * @param string $content   Content to be rendered.
         * @param array  $payload   Payload with the values to render in the content.
         * @return string
         */
        public static function process_shortcodes($content, $payload = array())
        {
        }
    }
    // end if;
    /**
     * Exposes the public API to handle site duplication.
     *
     * The decision to create a buffer interface (this file), as the API layer
     * for the duplication functions is simple: it allows us to swith the duplication
     * component used without breaking backwards-compatibility in the future.
     *
     * @since 2.0.0
     */
    class Site_Duplicator
    {
        /**
         * Static-only class.
         */
        private function __construct()
        {
        }
        // end __construct;
        /**
         * Duplicate an existing network site.
         *
         * @since 2.0.0
         *
         * @param int    $from_site_id ID of the site you wish to copy.
         * @param string $title Title of the new site.
         * @param array  $args List of duplication parameters, check Site_Duplicator::process_duplication for reference.
         * @return int|false ID of the newly created site.
         */
        public static function duplicate_site($from_site_id, $title, $args = array())
        {
        }
        // end duplicate_site;
        /**
         * Replace the contents of a site with the contents of another.
         *
         * @since 2.0.0
         *
         * @param int   $from_site_id Site to get the data from.
         * @param int   $to_site_id Site to override.
         * @param array $args List of duplication parameters, check Site_Duplicator::process_duplication for reference.
         * @return int|false ID of the created site.
         */
        public static function override_site($from_site_id, $to_site_id, $args = array())
        {
        }
        // end override_site;
        /**
         * Processes a site duplication.
         *
         * @since 2.0.0
         *
         * @param array $args List of parameters of the duplication.
         *                    - email Email of the admin user to be created.
         *                    - title Title of the (new or not) site.
         *                    - path  Path of the new site.
         *                    - from_site_id ID of the template site being used.
         *                    - to_site_id   ID of the target site. Can be false to create new site.
         *                    - keep_users   If we should keep users or not. Defaults to true.
         *                    - copy_files   If we should copy the uploaded files or not. Defaults to true.
         *                    - public       If the (new or not) site should be public. Defaults to true.
         *                    - domain       The domain of the new site.
         *                    - network_id   The network ID to allow for multi-network support.
         * @return int|WP_Error The Site ID.
         */
        protected static function process_duplication($args)
        {
        }
        // end process_duplication;
        /**
         * Creates an admin user if no user exists with this email.
         *
         * @since 2.0.0
         * @param  string $email The email.
         * @param  string $domain The domain.
         * @return int Id of the user created.
         */
        public static function create_admin($email, $domain)
        {
        }
    }
    /**
     * Wraps the validation library being used by WP Ultimo.
     *
     * @since 2.0.0
     */
    class Validator
    {
        /**
         * Holds an instance of the validator object.
         *
         * @since 2.0.0
         * @var Rakit\Validation\Validator
         */
        protected $validator;
        /**
         * Holds an instance of the validation being performed.
         *
         * @since 2.0.0
         * @var Rakit\Validation\Validation
         */
        protected $validation;
        /**
         * Holds the errors returned from validation.
         *
         * @since 2.0.0
         * @var \WP_Error
         */
        protected $errors;
        /**
         * Sets up the validation library and makes the error messages translatable.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Validates the data passed according to the rules passed.
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation#available-rules
         *
         * @param array $data Data to be validated.
         * @param array $rules List of rules to validate against.
         * @return \WP_Ultimo\Helpers\Validator
         */
        public function validate($data, $rules = array())
        {
        }
        // end validate;
        /**
         * Returns true when the validation fails.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function fails()
        {
        }
        // end fails;
        /**
         * Returns a WP_Error object containing all validation errors.
         *
         * @since 2.0.0
         * @return WP_Error
         */
        public function get_errors()
        {
        }
        // end get_errors;
        /**
         * Converts the native error structure to a WP_Error object.
         *
         * @since 2.0.0
         *
         * @param array $errors Array containing the errors returned.
         * @return void
         */
        protected function cast_to_wp_error($errors)
        {
        }
        // end cast_to_wp_error;
        /**
         * Get holds an instance of the validation being performed.
         *
         * @since 2.0.0
         * @return Rakit\Validation\Validation
         */
        public function get_validation()
        {
        }
    }
    /**
     * Handles modifications to the wp-config.php file, if permissions allow.
     *
     * @since 2.0.0
     */
    class WP_Config
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Inject the constant into the wp-config.php file.
         *
         * @since 2.0.0
         *
         * @param string     $constant The name of the constant. e.g. WP_ULTIMO_CONSTANT.
         * @param string|int $value The value of that constant.
         * @return boolean|WP_Error
         */
        public function inject_wp_config_constant($constant, $value)
        {
        }
        // end inject_wp_config_constant;
        /**
         * Actually inserts the new lines into the array of wp-config.php lines.
         *
         * @since 2.0.0
         *
         * @param array  $content_array Array containing the original lines of the file being edited.
         * @param int    $line Line number to inject the new content at.
         * @param string $value Value to add to that specific line.
         * @return array New array containing the lines of the modified file.
         */
        public function inject_contents($content_array, $line, $value)
        {
        }
        // end inject_contents;
        /**
         * Gets the correct path to the wp-config.php file.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_wp_config_path()
        {
        }
        // end get_wp_config_path;
        /**
         * Find reference line for injection.
         *
         * We need a hook point we can use as reference to inject our constants.
         * For now, we are using the line defining the $table_prefix.
         * e.g. $table_prefix = 'wp_';
         * We retrieve that line via RegEx.
         *
         * @since 2.0.0
         *
         * @param array $config Array containing the lines of the config file, for searching.
         * @return false|int Line number.
         */
        public function find_reference_hook_line($config)
        {
        }
        // end find_reference_hook_line;
        /**
         * Revert the injection of a constant in wp-config.php
         *
         * @since 2.0.0
         *
         * @param string $constant Constant name.
         * @return mixed
         */
        public function revert($constant)
        {
        }
        // end revert;
        /**
         * Checks for the injected line inside of the wp-config.php file.
         *
         * @since 2.0.0
         *
         * @param array  $config Array containing the lines of the config file, for searching.
         * @param string $constant The constant name.
         * @return array|boolean
         */
        public function find_injected_line($config, $constant)
        {
        }
    }
}
namespace WP_Ultimo\Helpers\Validation_Rules {
    /**
     * Adds a validation rules that allows us to check if a given parameter is unique.
     *
     * @since 2.0.0
     */
    class Checkout_Steps extends \WP_Ultimo\Dependencies\Rakit\Validation\Rule
    {
        /**
         * Error message to be returned when this value has been used.
         *
         * @since 2.0.0
         * @var string
         */
        protected $message = ':attribute is wrongly setup.';
        /**
         * Parameters that this rule accepts.
         *
         * @since 2.0.0
         * @var array
         */
        protected $fillableParams = array();
        // phpcs:ignore
        /**
         * Performs the actual check.
         *
         * @since 2.0.0
         *
         * @param mixed $value Value being checked.
         * @return boolean
         */
        public function check($value) : bool
        {
        }
    }
    /**
     * Adds a validation rules that allows us to check if a given parameter exists.
     *
     * @since 2.0.0
     */
    class Domain extends \WP_Ultimo\Dependencies\Rakit\Validation\Rule
    {
        /**
         * Error message to be returned when this value has been used.
         *
         * @since 2.0.0
         * @var string
         */
        protected $message = ':attribute :value is not valid';
        /**
         * Parameters that this rule accepts.
         *
         * @since 2.0.0
         * @var array
         */
        protected $fillableParams = array();
        // phpcs:ignore
        /**
         * Performs the actual check.
         *
         * @since 2.0.0
         *
         * @param mixed $value Value being checked.
         * @return boolean
         */
        public function check($value) : bool
        {
        }
    }
    /**
     * Adds a validation rules that allows us to check if a given parameter exists.
     *
     * @since 2.0.0
     */
    class Exists extends \WP_Ultimo\Dependencies\Rakit\Validation\Rule
    {
        /**
         * Error message to be returned when this value has been used.
         *
         * @since 2.0.0
         * @var string
         */
        protected $message = ':attribute :value is not valid';
        /**
         * Parameters that this rule accepts.
         *
         * @since 2.0.0
         * @var array
         */
        protected $fillableParams = array('model', 'column', 'except');
        // phpcs:ignore
        /**
         * Performs the actual check.
         *
         * @since 2.0.0
         *
         * @param mixed $value Value being checked.
         * @return boolean
         */
        public function check($value) : bool
        {
        }
    }
    /**
     * Adds a validation rules that allows us to check if a given parameter is unique.
     *
     * @since 2.0.0
     */
    class Price_Variations extends \WP_Ultimo\Dependencies\Rakit\Validation\Rule
    {
        /**
         * Error message to be returned when this value has been used.
         *
         * @since 2.0.0
         * @var string
         */
        protected $message = ':attribute is wrongly setup.';
        /**
         * Parameters that this rule accepts.
         *
         * @since 2.0.0
         * @var array
         */
        protected $fillableParams = array('duration', 'duration_unit');
        // phpcs:ignore
        /**
         * Performs the actual check.
         *
         * @since 2.0.0
         *
         * @param mixed $value Value being checked.
         * @return boolean
         */
        public function check($value) : bool
        {
        }
    }
    /**
     * Validates products.
     *
     * @since 2.0.4
     */
    class Products extends \WP_Ultimo\Dependencies\Rakit\Validation\Rule
    {
        /**
         * Error message to be returned when this value has been used.
         *
         * @since 2.0.4
         * @var string
         */
        protected $message = '';
        /**
         * Parameters that this rule accepts.
         *
         * @since 2.0.4
         * @var array
         */
        protected $fillableParams = array();
        // phpcs:ignore
        /**
         * Performs the actual check.
         *
         * @since 2.0.4
         *
         * @param mixed $products Value being checked.
         * @return boolean
         */
        public function check($products) : bool
        {
        }
    }
    /**
     * Validates template sites.
     *
     * @since 2.0.4
     */
    class Site_Template extends \WP_Ultimo\Dependencies\Rakit\Validation\Rule
    {
        /**
         * Error message to be returned when this value has been used.
         *
         * @since 2.0.4
         * @var string
         */
        protected $message = '';
        /**
         * Parameters that this rule accepts.
         *
         * @since 2.0.4
         * @var array
         */
        protected $fillableParams = array();
        // phpcs:ignore
        /**
         * Performs the actual check.
         *
         * @since 2.0.4
         *
         * @param mixed $template_id Value being checked.
         * @return boolean
         */
        public function check($template_id) : bool
        {
        }
    }
    /**
     * Adds a validation rules that allows us to check if a given parameter is unique.
     *
     * @since 2.0.0
     */
    class Unique_Site extends \WP_Ultimo\Dependencies\Rakit\Validation\Rule
    {
        /**
         * Error message to be returned when this value has been used.
         *
         * @since 2.0.0
         * @var string
         */
        protected $message = '';
        /**
         * Parameters that this rule accepts.
         *
         * @since 2.0.0
         * @var array
         */
        protected $fillableParams = array('self_id');
        // phpcs:ignore
        /**
         * Performs the actual check.
         *
         * @since 2.0.0
         *
         * @param mixed $value Value being checked.
         * @return boolean
         */
        public function check($value) : bool
        {
        }
        // end check;
        /**
         * Allows for hyphens to be used, since WordPress supports it.
         *
         * @since 2.0.0
         *
         * @param array $result_object The wpmu_validate_blog_signup result.
         * @return array
         */
        protected function revalidate_for_hyphens($result_object)
        {
        }
    }
    /**
     * Adds a validation rules that allows us to check if a given parameter is unique.
     *
     * @since 2.0.0
     */
    class Unique extends \WP_Ultimo\Dependencies\Rakit\Validation\Rule
    {
        /**
         * Error message to be returned when this value has been used.
         *
         * @since 2.0.0
         * @var string
         */
        protected $message = ':attribute :value has been used';
        /**
         * Parameters that this rule accepts.
         *
         * @since 2.0.0
         * @var array
         */
        protected $fillableParams = array('model', 'column', 'self_id');
        // phpcs:ignore
        /**
         * Performs the actual check.
         *
         * @since 2.0.0
         *
         * @param mixed $value Value being checked.
         * @return boolean
         */
        public function check($value) : bool
        {
        }
    }
}
namespace WP_Ultimo\Installers {
    /**
     * WP Ultimo base Installer Class.
     *
     * @since 2.0.0
     */
    class Base_Installer
    {
        /**
         * Keeps track of the current step.
         *
         * @since 2.0.0
         * @var string
         */
        protected $current_step;
        /**
         * Returns the list of migration steps.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_steps()
        {
        }
        // end get_steps;
        /**
         * Runs through all the steps to see if they are all done or not.
         *
         * @since 2.0.0
         *
         * @return boolean
         */
        public function all_done()
        {
        }
        // end all_done;
        /**
         * Handles the installer.
         *
         * This wraps the installer into a try catch block
         * so we can use that to rollback on database entries.
         *
         * @since 2.0.0
         *
         * @param bool|\WP_Error $status Status of the installer.
         * @param string         $installer The installer name.
         * @param object         $wizard Wizard class.
         * @return bool
         */
        public function handle($status, $installer, $wizard)
        {
        }
    }
    /**
     * WP Ultimo 1.X to 2.X migrator.
     *
     * @since 2.0.0
     */
    class Core_Installer extends \WP_Ultimo\Installers\Base_Installer
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Init hooks to handle edge cases such as Closte.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Returns the list of migration steps.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_steps()
        {
        }
        // end get_steps;
        /**
         * Installs our custom database tables.
         *
         * @since 2.0.0
         * @throws \Exception When an error occurs during the creation.
         * @return void
         */
        public function _install_database_tables()
        {
        }
        // end _install_database_tables;
        /**
         * Copies the sunsire.php file and adds the SUNRISE constant.
         *
         * @since 2.0.0
         * @throws \Exception When sunrise copying fails.
         * @return void
         */
        public function _install_sunrise()
        {
        }
    }
    /**
     * Installs default content during the setup install.
     *
     * @since 2.0.0
     */
    class Default_Content_Installer extends \WP_Ultimo\Installers\Base_Installer
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Loads dependencies for when WP Ultimo is not yet loaded.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Checks if we already created a template site.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function done_creating_template_site()
        {
        }
        // end done_creating_template_site;
        /**
         * Checks if we already created the base products.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function done_creating_products()
        {
        }
        // end done_creating_products;
        /**
         * Checks if we already created the base checkout form.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function done_creating_checkout_forms()
        {
        }
        // end done_creating_checkout_forms;
        /**
         * Checks if we already created the system emails and the template email.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function done_creating_emails()
        {
        }
        // end done_creating_emails;
        /**
         * Checks if we already created the custom login page.
         *
         * @since 2.0.0
         * @return bool
         */
        protected function done_creating_login_page()
        {
        }
        // end done_creating_login_page;
        /**
         * Returns the list of migration steps.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_steps()
        {
        }
        // end get_steps;
        // Default_Content_Installers start below
        /**
         * Creates a new template site as an example.
         *
         * @since 2.0.0
         * @throws \Exception When a site with the /template path already exists.
         * @return void
         */
        public function _install_create_template_site()
        {
        }
        // end _install_create_template_site;
        /**
         * Creates a example products.
         *
         * @since 2.0.0
         * @throws \Exception When the network already has products.
         * @return void
         */
        public function _install_create_products()
        {
        }
        // end _install_create_products;
        /**
         * Creates a new checkout form as an example.
         *
         * @since 2.0.0
         * @throws \Exception When a checkout form is already present.
         * @return void
         */
        public function _install_create_checkout()
        {
        }
        // end _install_create_checkout;
        /**
         * Creates the template email, invoice template and system emails.
         *
         * @since 2.0.0
         * @throws \Exception When the content is already present.
         * @return void
         */
        public function _install_create_emails()
        {
        }
        // end _install_create_emails;
        /**
         * Creates custom login page.
         *
         * @since 2.0.0
         * @throws \Exception When the content is already present.
         * @return void
         */
        public function _install_create_login_page()
        {
        }
    }
    /**
     * WP Ultimo 1.X to 2.X migrator.
     *
     * @since 2.0.0
     */
    class Migrator extends \WP_Ultimo\Installers\Base_Installer
    {
        use \WP_Ultimo\Traits\Singleton;
        const LOG_FILE_NAME = 'migrator-errors';
        /**
         * Holds the session object.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Session
         */
        public $session;
        /**
         * Errors holder.
         *
         * @since 2.0.0
         * @var array
         */
        public $errors;
        /**
         * Back traces holder.
         *
         * @since 2.0.7
         * @var array
         */
        public $back_traces;
        /**
         * Legacy settings cache.
         *
         * @since 2.0.0
         * @var array
         */
        protected $settings;
        /**
         * Dry run status.
         *
         * @since 2.0.7
         * @var boolean
         */
        protected $dry_run = true;
        /**
         * If we should run tests on a limited set or not.
         *
         * @since 2.0.7
         * @var boolean
         */
        protected $run_tests_on_limited_set = false;
        /**
         * List of ids of interest.
         *
         * @since 2.0.7
         * @var array
         */
        protected $ids_of_interest = array();
        /**
         * The status of our attempts to bypass server limitations.
         *
         * This will return false if the bypass was never tried, true if it was successful,
         * or a WP_Error object containing the errors.
         *
         * @since 2.0.7
         * @var bool|\WP_Error
         */
        protected $server_bypass_status = true;
        /**
         * Initializes the session object to keep track of errors.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Handle the parallel installers via the Async Caller.
         *
         * @since 2.0.7
         * @return array
         */
        public function handle_parallel_installers()
        {
        }
        // end handle_parallel_installers;
        /**
         * Handles unexpected shutdowns of the PHP process.
         *
         * @since 2.0.7
         *
         * @param \WP_Ultimo\Session $session The session handler object.
         * @param bool               $dry_run If we are in dry run mode or not.
         * @param string             $installer The name of the current installer.
         * @return void
         */
        public function on_shutdown($session, $dry_run, $installer)
        {
        }
        // end on_shutdown;
        /**
         * Checks if we are on the migration screen to prevent issues.
         *
         * @since 2.0.0
         * @return boolean
         */
        protected function is_migration_screen()
        {
        }
        // end is_migration_screen;
        /**
         * Checks if the migration is done.
         *
         * @since 2.0.7
         * @return boolean
         */
        public static function is_migration_done()
        {
        }
        // end is_migration_done;
        /**
         * Check if we are running on a network that runs Ultimo 1.X
         *
         * @since 2.0.0
         * @return boolean
         */
        public static function is_legacy_network()
        {
        }
        // end is_legacy_network;
        /**
         * Returns the list of errors detected.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_errors()
        {
        }
        // end get_errors;
        /**
         * Returns the list of _backtraces detected.
         *
         * @since 2.0.7
         * @return array
         */
        public function get_back_traces()
        {
        }
        // end get_back_traces;
        /**
         * Returns the list of migration steps.
         *
         * @since 2.0.0
         * @param bool $force_all If you want to get all the steps despite of dry run status.
         * @return array
         */
        public function get_steps($force_all = false)
        {
        }
        // end get_steps;
        /**
         * Tries to bypass server limitations such as memory and time limits.
         *
         * @since 2.0.7
         * @return void
         */
        protected function bypass_server_limits()
        {
        }
        // end bypass_server_limits;
        /**
         * Handles the installer.
         *
         * This wraps the installer into a try catch block
         * so we can use that to rollback on database entries.
         *
         * Migrator needs a different implementation to support
         * dry runs.
         *
         * @since 2.0.0
         *
         * @param bool|\WP_Error $status Status of the installer.
         * @param string         $installer The installer name.
         * @param object         $wizard Wizard class.
         * @return bool
         */
        public function handle($status, $installer, $wizard)
        {
        }
        // end handle;
        /**
         * Handles error messages and exceptions so we can display them and log them.
         *
         * @since 2.0.7
         *
         * @param \Throwable|null    $e The exception thrown.
         * @param \WP_Ultimo\Session $session THe WP Ultimo session object.
         * @param boolean            $dry_run If we are on a dry run or not.
         * @param string             $installer The name of the installer.
         * @return \WP_Error
         */
        public function handle_error_messages($e, $session, $dry_run = true, $installer = 'none')
        {
        }
        // end handle_error_messages;
        /**
         * Dumps ids of interest on the log so we can revise them later id needed.
         *
         * @since 2.0.7
         * @return void
         */
        public function log_ids_of_interest()
        {
        }
        // end log_ids_of_interest;
        /**
         * Add an id of interest to the list.
         *
         * @since 2.0.7
         *
         * @param string|array $id_or_ids One or more ids to be added.
         * @param string       $reason The reason why this is an id of interest.
         * @param string       $installer The installer name.
         * @return void
         */
        public function add_id_of_interest($id_or_ids, $reason, $installer)
        {
        }
        // end add_id_of_interest;
        /**
         * Generate the database dump as a backup.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return mixed
         */
        public function _install_dry_run_check()
        {
        }
        // end _install_dry_run_check;
        /**
         * Generate the database dump as a backup.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return mixed
         */
        public function _install_backup()
        {
        }
        // end _install_backup;
        /**
         * Returns the list of legacy settings on 1.X.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_old_settings()
        {
        }
        // end get_old_settings;
        /**
         * Returns the value of a particular legacy setting.
         *
         * @since 2.0.0
         *
         * @param string  $setting The setting key.
         * @param boolean $default Default value.
         * @return mixed
         */
        public function get_old_setting($setting, $default = false)
        {
        }
        // end get_old_setting;
        /**
         * Migrates the settings.
         *
         * @todo Needs implementing.
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_settings()
        {
        }
        // end _install_settings;
        /**
         * Register missing setting keys so they can be saved.
         *
         * @since 2.0.7
         *
         * @param array $to_migrate The list of settings to migrate.
         * @return array
         */
        public function fake_register_settings($to_migrate = array())
        {
        }
        // end fake_register_settings;
        /**
         * Migrates Plans.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_products()
        {
        }
        // end _install_products;
        /**
         * Verifies if we are inside a parallel request or not.
         *
         * @since 2.0.7
         * @return boolean
         */
        protected function is_parallel()
        {
        }
        // end is_parallel;
        /**
         * Get the installer name based on the request.
         *
         * This method is useful especially inside the dry_run test,
         * where all installers are run, but the only installer actually
         * being called is the dry_run check. With this method,
         * we can have access to the correct installer even on that
         * scenario.
         *
         * @since 2.0.7
         * @return string
         */
        protected function get_installer()
        {
        }
        // end get_installer;
        /**
         * Decides if we should run this in parallel, based on the request.
         *
         * @since 2.0.7
         *
         * @param int $total_records The total number of records.
         * @param int $threshold The threshold separating normal processing and parallel processing.
         * @return void
         */
        protected function maybe_run_in_parallel($total_records, $threshold = 100)
        {
        }
        // end maybe_run_in_parallel;
        /**
         * Builds an SQL limit clause to be used inside the installers.
         *
         * @since 2.0.7
         * @return string
         */
        protected function build_limit_clause()
        {
        }
        // end build_limit_clause;
        /**
         * Migrates Customers.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_customers()
        {
        }
        // end _install_customers;
        /**
         * Migrates Memberships.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_memberships()
        {
        }
        // end _install_memberships;
        /**
         * Migrates Transactions.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_transactions()
        {
        }
        // end _install_transactions;
        /**
         * Migrates Coupons.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_discount_codes()
        {
        }
        // end _install_discount_codes;
        /**
         * Migrates Sites.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_sites()
        {
        }
        // end _install_sites;
        /**
         * Migrates Template Sites Sites.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_site_templates()
        {
        }
        // end _install_site_templates;
        /**
         * Convert hard-coded thumbnail urls into v2 thumbnails.
         *
         * @since 2.0.0
         *
         * @param int $site_id The site template id.
         * @return int|false
         */
        protected function maybe_get_screenshot_url($site_id)
        {
        }
        // end maybe_get_screenshot_url;
        /**
         * Migrates domains.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_domains()
        {
        }
        // end _install_domains;
        /**
         * Migrates Checkout Forms.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_forms()
        {
        }
        // end _install_forms;
        /**
         * Migrates Emails.
         *
         * @todo Needs implementing.
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_emails()
        {
        }
        // end _install_emails;
        /**
         * Migrates Webhooks.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_webhooks()
        {
        }
        // end _install_webhooks;
        /**
         * Migrates other things.
         *
         * @since 2.0.0
         * @throws \Exception Halts the process on error.
         * @return void
         */
        protected function _install_other()
        {
        }
    }
}
namespace WP_Ultimo\Integrations\Host_Providers {
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    abstract class Base_Host_Provider
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Holds the id of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id;
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title;
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = '';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array();
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array();
        /**
         * Constants that are optional on wp-config.php.
         *
         * @since 2.0.0
         * @var array
         */
        protected $optional_constants = array();
        /**
         * Runs on singleton instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Loads the hooks and dependencies, but only if the hosting is enabled via is_enabled().
         *
         * @since 2.0.0
         */
        public final function __construct()
        {
        }
        // end __construct;
        /**
         * Let the class register itself on the manager, allowing us to access the integrations later via the slug.
         *
         * @since 2.0.0
         *
         * @param array $integrations List of integrations added so far.
         * @return array
         */
        public final function self_register($integrations)
        {
        }
        // end self_register;
        /**
         * Get the list of enabled host integrations.
         *
         * @since 2.0.0
         * @return array
         */
        protected function get_enabled_list()
        {
        }
        // end get_enabled_list;
        /**
         * Check if this integration is enabled.
         *
         * @since 2.0.0
         * @return boolean
         */
        public final function is_enabled()
        {
        }
        // end is_enabled;
        /**
         * Enables this integration.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function enable()
        {
        }
        // end enable;
        /**
         * Disables this integration.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function disable()
        {
        }
        // end disable;
        /**
         * Adds the host to the list of integrations.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_to_integration_list()
        {
        }
        // end add_to_integration_list;
        /**
         * Adds an admin notice telling the admin that they should probably enable this integration.
         *
         * @since 2.0.0
         * @return void
         */
        public function alert_provider_detected()
        {
        }
        // end alert_provider_detected;
        /**
         * Adds an admin notice telling the admin that the provider is not correctly setup.
         *
         * @since 2.0.0
         * @return void
         */
        public function alert_provider_not_setup()
        {
        }
        // end alert_provider_not_setup;
        /**
         * Get Fields for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Returns the integration id.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_id()
        {
        }
        // end get_id;
        /**
         * Returns the integration title.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Checks if a feature is supported, like auto-ssl for example.
         *
         * @since 2.0.0
         * @param string $feature Feature to check.
         * @return boolean
         */
        public function supports($feature)
        {
        }
        // end supports;
        /**
         * Initializes the hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_hooks()
        {
        }
        // end register_hooks;
        /**
         * Lets integrations add additional hooks.
         *
         * @since 2.0.7
         * @return void
         */
        public function additional_hooks()
        {
        }
        // end additional_hooks;
        /**
         * Can be used to load dependencies.
         *
         * @since 2.0.0
         * @return void
         */
        public function load_dependencies()
        {
        }
        // end load_dependencies;
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         *
         * @since 2.0.0
         * @return boolean
         */
        public abstract function detect();
        /**
         * Checks if the integration is correctly setup after enabled.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_setup()
        {
        }
        // end is_setup;
        /**
         * Returns a list of all constants, optional or not.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_all_constants()
        {
        }
        // end get_all_constants;
        /**
         * Adds the constants with their respective values into the wp-config.php.
         *
         * @since 2.0.0
         *
         * @param array $constant_values Key => Value of the necessary constants.
         * @return void
         */
        public function setup_constants($constant_values)
        {
        }
        // end setup_constants;
        /**
         * Generates a define string for manual insertion on-to wp-config.php.
         *
         * This is useful when the user is not willing to let WP Ultimo inject the code,
         * Or when the wp-config.php is not writable.
         *
         * @since 2.0.0
         *
         * @param array $constant_values Key => Value of the necessary constants.
         * @return string
         */
        public function get_constants_string($constant_values)
        {
        }
        // end get_constants_string;
        /**
         * Returns the explainer lines for the integration.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_explainer_lines()
        {
        }
        // end get_explainer_lines;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public abstract function on_add_domain($domain, $site_id);
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public abstract function on_remove_domain($domain, $site_id);
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public abstract function on_add_subdomain($subdomain, $site_id);
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public abstract function on_remove_subdomain($subdomain, $site_id);
        /**
         * Tests the connection with the API.
         *
         * Needs to be implemented by integrations.
         *
         * @since 2.0.0
         * @return void
         */
        public function test_connection()
        {
        }
        // end test_connection;
        /**
         * Returns the description of this integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the logo for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
    }
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    class Closte_Host_Provider extends \WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
    {
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id = 'closte';
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title = 'Closte';
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = '';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array('autossl', 'no-instructions', 'no-config');
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array('CLOSTE_CLIENT_API_KEY');
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function detect()
        {
        }
        // end detect;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_domain($domain, $site_id)
        {
        }
        // end on_add_domain;
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_domain($domain, $site_id)
        {
        }
        // end on_remove_domain;
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_subdomain($subdomain, $site_id)
        {
        }
        // end on_add_subdomain;
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_subdomain($subdomain, $site_id)
        {
        }
        // end on_remove_subdomain;
        /**
         * Tests the connection with the API.
         *
         * Needs to be implemented by integrations.
         *
         * @since 2.0.0
         * @return void
         */
        public function test_connection()
        {
        }
        // end test_connection;
        /**
         * Sends a request to Closte, with the right API key.
         *
         * @since  1.7.3
         * @param  string $endpoint Endpoint to send the call to.
         * @param  array  $data     Array containing the params to the call.
         * @return object
         */
        public function send_closte_api_request($endpoint, $data)
        {
        }
        // end send_closte_api_request;
        /**
         * Returns the description of this integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the logo for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
    }
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    class Cloudflare_Host_Provider extends \WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
    {
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id = 'cloudflare';
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title = 'Cloudflare';
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = '#';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array('autossl');
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array('WU_CLOUDFLARE_API_KEY', 'WU_CLOUDFLARE_ZONE_ID');
        /**
         * Add Cloudflare own DNS entries to the comparison table.
         *
         * @since 2.0.4
         *
         * @param array  $dns_records List of current dns records.
         * @param string $domain The domain name.
         * @return array
         */
        public function add_cloudflare_dns_entries($dns_records, $domain)
        {
        }
        // end add_cloudflare_dns_entries;
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         * Unfortunately, we don't have a good method of detecting if someone is running from cPanel.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function detect()
        {
        }
        // end detect;
        /**
         * Returns the list of installation fields.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Tests the connection with the Cloudflare API.
         *
         * @since 2.0.0
         * @return void
         */
        public function test_connection()
        {
        }
        // end test_connection;
        /**
         * Lets integrations add additional hooks.
         *
         * @since 2.0.7
         * @return void
         */
        public function additional_hooks()
        {
        }
        // end additional_hooks;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_domain($domain, $site_id)
        {
        }
        // end on_add_domain;
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_domain($domain, $site_id)
        {
        }
        // end on_remove_domain;
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_subdomain($subdomain, $site_id)
        {
        }
        // end on_add_subdomain;
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_subdomain($subdomain, $site_id)
        {
        }
        // end on_remove_subdomain;
        /**
         * Sends an API call to Cloudflare.
         *
         * @since 2.0.0
         *
         * @param string $endpoint The endpoint to call.
         * @param string $method The HTTP verb. Defaults to GET.
         * @param array  $data The date to send.
         * @return object|\WP_Error
         */
        protected function cloudflare_api_call($endpoint = 'client/v4/user/tokens/verify', $method = 'GET', $data = array())
        {
        }
        // end cloudflare_api_call;
        /**
         * Renders the instructions content.
         *
         * @since 2.0.0
         * @return void
         */
        public function get_instructions()
        {
        }
        // end get_instructions;
        /**
         * Returns the description of this integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the logo for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
        // end get_logo;
        /**
         * Returns the explainer lines for the integration.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_explainer_lines()
        {
        }
    }
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    class Cloudways_Host_Provider extends \WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
    {
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id = 'cloudways';
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title = 'Cloudways';
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = 'https://help.wpultimo.com/article/294-configuring-automatic-domain-syncing-with-cloudways';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array('autossl');
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array('WU_CLOUDWAYS_EMAIL', 'WU_CLOUDWAYS_API_KEY', 'WU_CLOUDWAYS_SERVER_ID', 'WU_CLOUDWAYS_APP_ID');
        /**
         * Constants that maybe present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $optional_constants = array('WU_CLOUDWAYS_EXTRA_DOMAINS');
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function detect()
        {
        }
        // end detect;
        /**
         * Returns the list of installation fields.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_domain($domain, $site_id)
        {
        }
        // end on_add_domain;
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_domain($domain, $site_id)
        {
        }
        // end on_remove_domain;
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_subdomain($subdomain, $site_id)
        {
        }
        // end on_add_subdomain;
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_subdomain($subdomain, $site_id)
        {
        }
        // end on_remove_subdomain;
        /**
         * Tests the connection with the Cloudways API.
         *
         * @since 2.0.0
         * @return void
         */
        public function test_connection()
        {
        }
        // end test_connection;
        /**
         * Returns an array of all the mapped domains currently on the network
         *
         * @since 1.6.0
         * @return array
         */
        public function get_all_mapped_domains()
        {
        }
        // end get_all_mapped_domains;
        /**
         * Get extra domains for Cloudways
         *
         * @since 1.6.1
         * @return array
         */
        protected function get_domain_list()
        {
        }
        // end get_domain_list;
        /**
         * Fetches and saves a Cloudways access token.
         *
         * @since 2.0.0
         * @return string
         */
        protected function get_cloudways_access_token()
        {
        }
        // end get_cloudways_access_token;
        /**
         * Sends a request to the Cloudways API.
         *
         * @since 2.0.0
         *
         * @param string $endpoint The API endpoint.
         * @param array  $data The data to send.
         * @param string $method The HTTP verb.
         * @return object|\WP_Error
         */
        protected function send_cloudways_request($endpoint, $data = array(), $method = 'POST')
        {
        }
        // end send_cloudways_request;
        /**
         * Renders the instructions content.
         *
         * @since 2.0.0
         * @return void
         */
        public function get_instructions()
        {
        }
        // end get_instructions;
        /**
         * Returns the description of this integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the logo for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
    }
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    class CPanel_Host_Provider extends \WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
    {
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id = 'cpanel';
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title = 'cPanel';
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = 'https://help.wpultimo.com/article/295-configuring-automatic-domain-syncing-with-cpanel';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array('autossl', 'no-instructions');
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array('WU_CPANEL_USERNAME', 'WU_CPANEL_PASSWORD', 'WU_CPANEL_HOST');
        /**
         * Constants that are optional on wp-config.php.
         *
         * @since 2.0.0
         * @var array
         */
        protected $optional_constants = array('WU_CPANEL_PORT', 'WU_CPANEL_ROOT_DIR');
        /**
         * Holds the API object.
         *
         * @since 2.0.0
         * @var WP_Ultimo\Integrations\Host_Providers\CPanel_API\CPanel_API
         */
        protected $api = null;
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         * Unfortunately, we don't have a good method of detecting if someone is running from cPanel.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function detect()
        {
        }
        // end detect;
        /**
         * Returns the list of installation fields.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_domain($domain, $site_id)
        {
        }
        // end on_add_domain;
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_domain($domain, $site_id)
        {
        }
        // end on_remove_domain;
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_subdomain($subdomain, $site_id)
        {
        }
        // end on_add_subdomain;
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_subdomain($subdomain, $site_id)
        {
        }
        // end on_remove_subdomain;
        /**
         * Load the CPanel API.
         *
         * @since 2.0.0
         * @return WU_CPanel
         */
        public function load_api()
        {
        }
        // end load_api;
        /**
         * Returns the Site URL.
         *
         * @since  1.6.2
         * @param null|int $site_id The site id.
         * @return string
         */
        public function get_site_url($site_id = null)
        {
        }
        // end get_site_url;
        /**
         * Returns the sub-domain version of the domain.
         *
         * @since 1.6.2
         * @param string $domain The domain to be used.
         * @param string $mapped_domain If this is a mapped domain.
         * @return string
         */
        public function get_subdomain($domain, $mapped_domain = true)
        {
        }
        // end get_subdomain;
        /**
         * Logs the results of the calls for debugging purposes
         *
         * @since 1.6.2
         * @param object $results Results of the cPanel call.
         * @return bool
         */
        public function log_calls($results)
        {
        }
        // end log_calls;
        /**
         * Returns the description of this integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the logo for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
        // end get_logo;
        /**
         * Tests the connection with the Cloudflare API.
         *
         * @since 2.0.0
         * @return void
         */
        public function test_connection()
        {
        }
        // end test_connection;
        /**
         * Returns the explainer lines for the integration.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_explainer_lines()
        {
        }
    }
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    class Gridpane_Host_Provider extends \WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
    {
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id = 'gridpane';
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title = 'Gridpane';
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = '';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array('autossl', 'no-config');
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array('WU_GRIDPANE');
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function detect()
        {
        }
        // end detect;
        /**
         * Enables this integration.
         *
         * @since 2.0.0
         * @return void
         */
        public function enable()
        {
        }
        // end enable;
        /**
         * Sends a request to the GridPane API.
         *
         * @since 2.0.0
         *
         * @param string $endpoint The endpoint to hit.
         * @param array  $data The post body to send to the API.
         * @param string $method The HTTP method.
         * @return mixed
         */
        public function send_gridpane_api_request($endpoint, $data = array(), $method = 'POST')
        {
        }
        // end send_gridpane_api_request;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return object\WP_Error
         */
        public function on_add_domain($domain, $site_id)
        {
        }
        // end on_add_domain;
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return object\WP_Error
         */
        public function on_remove_domain($domain, $site_id)
        {
        }
        // end on_remove_domain;
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_subdomain($subdomain, $site_id)
        {
        }
        // end on_add_subdomain;
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_subdomain($subdomain, $site_id)
        {
        }
        // end on_remove_subdomain;
        /**
         * Tests the connection with the Gridpane API.
         *
         * @since 2.0.0
         * @return void
         */
        public function test_connection()
        {
        }
        // end test_connection;
        /**
         * Renders the instructions content.
         *
         * @since 2.0.0
         * @return void
         */
        public function get_instructions()
        {
        }
        // end get_instructions;
        /**
         * Returns the description of this integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the logo for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
    }
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    class Runcloud_Host_Provider extends \WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
    {
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id = 'runcloud';
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title = 'RunCloud';
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = 'https://help.wpultimo.com/en/articles/2636845-configuring-automatic-domain-syncing-with-runcloud-io';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array('autossl');
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array('WU_RUNCLOUD_API_KEY', 'WU_RUNCLOUD_API_SECRET', 'WU_RUNCLOUD_SERVER_ID', 'WU_RUNCLOUD_APP_ID');
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function detect()
        {
        }
        // end detect;
        /**
         * Returns the list of installation fields.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_domain($domain, $site_id)
        {
        }
        // end on_add_domain;
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_domain($domain, $site_id)
        {
        }
        // end on_remove_domain;
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_subdomain($subdomain, $site_id)
        {
        }
        // end on_add_subdomain;
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_subdomain($subdomain, $site_id)
        {
        }
        // end on_remove_subdomain;
        /**
         * Tests the connection with the RunCloud API.
         *
         * @since 2.0.0
         * @return void
         */
        public function test_connection()
        {
        }
        // end test_connection;
        /**
         * Returns the base domain API url to our calls.
         *
         * @since 1.7.0
         * @param string $path Path relative to the main endpoint.
         * @return string
         */
        public function get_runcloud_base_url($path = '')
        {
        }
        // end get_runcloud_base_url;
        /**
         * Sends the request to a given runcloud URL with a given body.
         *
         * @since 1.7.0
         * @param string $url Endpoinbt to send the request to.
         * @param array  $data Data to be sent.
         * @param string $method HTTP Method to send. Defaults to POST.
         * @return array
         */
        public function send_runcloud_request($url, $data = array(), $method = 'POST')
        {
        }
        // end send_runcloud_request;
        /**
         * Treats the response, maybe returning the json decoded version
         *
         * @since 1.7.0
         * @param array $response The response.
         * @return mixed
         */
        public function maybe_return_runcloud_body($response)
        {
        }
        // end maybe_return_runcloud_body;
        /**
         * Returns the RunCloud.io domain id to remove.
         *
         * @since 1.7.0
         * @param string $domain The domain name being removed.
         * @return string
         */
        public function get_runcloud_domain_id($domain)
        {
        }
        // end get_runcloud_domain_id;
        /**
         * Checks if RunCloud has a SSL cert installed or not, and returns the ID.
         *
         * @since 1.10.4
         * @return bool|int
         */
        public function get_runcloud_ssl_id()
        {
        }
        // end get_runcloud_ssl_id;
        /**
         * Redeploys the SSL cert when a new domain is added.
         *
         * @since 1.10.4
         * @param int $ssl_id The SSL id on RunCloud.
         * @return void
         */
        public function redeploy_runcloud_ssl($ssl_id)
        {
        }
        // end redeploy_runcloud_ssl;
        /**
         * Renders the instructions content.
         *
         * @since 2.0.0
         * @return void
         */
        public function get_instructions()
        {
        }
        // end get_instructions;
        /**
         * Returns the description of this integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the logo for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
    }
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    class ServerPilot_Host_Provider extends \WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
    {
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id = 'serverpilot';
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title = 'ServerPilot';
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = 'https://help.wpultimo.com/en/articles/2632349-configuring-automatic-domain-syncing-with-serverpilot-io-with-autossl-support';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array('autossl');
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array('WU_SERVER_PILOT_CLIENT_ID', 'WU_SERVER_PILOT_API_KEY', 'WU_SERVER_PILOT_APP_ID');
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function detect()
        {
        }
        // end detect;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_domain($domain, $site_id)
        {
        }
        // end on_add_domain;
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_domain($domain, $site_id)
        {
        }
        // end on_remove_domain;
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_subdomain($subdomain, $site_id)
        {
        }
        // end on_add_subdomain;
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_subdomain($subdomain, $site_id)
        {
        }
        // end on_remove_subdomain;
        /**
         * Sends a request to ServerPilot, with the right API key.
         *
         * @since  1.7.3
         * @param  string $endpoint Endpoint to send the call to.
         * @param  array  $data     Array containing the params to the call.
         * @param  string $method   HTTP Method: POST, GET, PUT, etc.
         * @return object
         */
        public function send_server_pilot_api_request($endpoint, $data = array(), $method = 'POST')
        {
        }
        // end send_server_pilot_api_request;
        /**
         * Makes sure ServerPilot autoSSL is always on, when possible.
         *
         * @since 1.7.4
         * @return bool
         */
        public function turn_server_pilot_auto_ssl_on()
        {
        }
        // end turn_server_pilot_auto_ssl_on;
        /**
         * Get the current list of domains added on Server Pilot.
         *
         * @since 1.7.4
         * @return mixed
         */
        public function get_server_pilot_domains()
        {
        }
    }
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    class WPEngine_Host_Provider extends \WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
    {
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id = 'wpengine';
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title = 'WP Engine';
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = '';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array('no-instructions', 'no-config');
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array('WPE_API', 'WPE_PLUGIN_DIR');
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function detect()
        {
        }
        // end detect;
        /**
         * Can be used to load dependencies.
         *
         * @since 2.0.0
         * @return void
         */
        public function load_dependencies()
        {
        }
        // end load_dependencies;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_domain($domain, $site_id)
        {
        }
        // end on_add_domain;
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_domain($domain, $site_id)
        {
        }
        // end on_remove_domain;
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_subdomain($subdomain, $site_id)
        {
        }
        // end on_add_subdomain;
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_subdomain($subdomain, $site_id)
        {
        }
        // end on_remove_subdomain;
        /**
         * Returns the description of this integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the logo for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
        // end get_logo;
        /**
         * Tests the connection with the WP Engine API.
         *
         * @since 2.0.0
         * @return void
         */
        public function test_connection()
        {
        }
    }
    /**
     * This base class should be extended to implement new host integrations for SSL and domains.
     */
    class WPMUDEV_Host_Provider extends \WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
    {
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $id = 'wpmudev';
        /**
         * Keeps the title of the integration.
         *
         * @var string
         * @since 2.0.0
         */
        protected $title = 'WPMU DEV Hosting';
        /**
         * Link to the tutorial teaching how to make this integration work.
         *
         * @var string
         * @since 2.0.0
         */
        protected $tutorial_link = '';
        /**
         * Array containing the features this integration supports.
         *
         * @var array
         * @since 2.0.0
         */
        protected $supports = array('autossl', 'no-instructions', 'no-config');
        /**
         * Constants that need to be present on wp-config.php for this integration to work.
         *
         * @since 2.0.0
         * @var array
         */
        protected $constants = array('WPMUDEV_HOSTING_SITE_ID');
        /**
         * Picks up on tips that a given host provider is being used.
         *
         * We use this to suggest that the user should activate an integration module.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function detect()
        {
        }
        // end detect;
        /**
         * This method gets called when a new domain is mapped.
         *
         * @since 2.0.0
         * @param string $domain The domain name being mapped.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_domain($domain, $site_id)
        {
        }
        // end on_add_domain;
        /**
         * This method gets called when a mapped domain is removed.
         *
         * @since 2.0.0
         * @param string $domain The domain name being removed.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_domain($domain, $site_id)
        {
        }
        // end on_remove_domain;
        /**
         * This method gets called when a new subdomain is being added.
         *
         * This happens every time a new site is added to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being added to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_add_subdomain($subdomain, $site_id)
        {
        }
        // end on_add_subdomain;
        /**
         * This method gets called when a new subdomain is being removed.
         *
         * This happens every time a new site is removed to a network running on subdomain mode.
         *
         * @since 2.0.0
         * @param string $subdomain The subdomain being removed to the network.
         * @param int    $site_id ID of the site that is receiving that mapping.
         * @return void
         */
        public function on_remove_subdomain($subdomain, $site_id)
        {
        }
        // end on_remove_subdomain;
        /**
         * Tests the connection with the WPMUDEV API.
         *
         * @since 2.0.0
         * @return void
         */
        public function test_connection()
        {
        }
        // end test_connection;
        /**
         * Returns the description of this integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Returns the logo for the integration.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logo()
        {
        }
    }
}
namespace WP_Ultimo\Integrations\Host_Providers\CPanel_API {
    /**
     * CPanel API wrapper to send the calls.
     */
    class CPanel_API
    {
        /**
         * Kepps the host url for the cPanel.
         *
         * @since 2.0.0
         * @var string
         */
        private $host;
        /**
         * Holds the port of the cPanel.
         *
         * @since 2.0.0
         * @var int
         */
        private $port;
        /**
         * The cPanel username.
         *
         * @since 2.0.0
         * @var string
         */
        private $username;
        /**
         * The cPanel password. Yep =(
         *
         * @since 2.0.0
         * @var [type]
         */
        private $password;
        /**
         * Holds the log instance.
         *
         * @since 2.0.0
         * @var boolean|mixed
         */
        private $log;
        /**
         * Holds the name of the cookis file.
         *
         * @since 2.0.0
         * @var string
         */
        private $cookie_file;
        /**
         * Holds the curl file.
         *
         * @since 2.0.0
         * @var string
         */
        private $curlfile;
        /**
         * Holds the cookie tokens
         *
         * @since 2.0.0
         * @var string
         */
        private $cpsess;
        /**
         * Holds the cPanel url.
         *
         * @since 2.0.0
         * @var string
         */
        private $homepage;
        /**
         * Holds the execution url.
         *
         * @since 2.0.0
         * @var string
         */
        private $ex_page;
        /**
         * Creates the CPanel_API Object.
         *
         * @since 1.6.2
         * @param string  $username cPanel username.
         * @param string  $password cPanel password.
         * @param string  $host cPanel URL.
         * @param integer $port cPanel port.
         * @param boolean $log Log.
         */
        public function __construct($username, $password, $host, $port = 2083, $log = false)
        {
        }
        // end __construct;
        /**
         * Generate the Cookie File, that is used to make API requests to CPanel.
         *
         * @since 1.6.2
         * @return void
         */
        public function generate_cookie()
        {
        }
        // end generate_cookie;
        /**
         * Logs error or success messages.
         *
         * @since 1.6.2
         * @param string $message Message to be logged.
         * @return boolean
         */
        public function log($message)
        {
        }
        // end log;
        /**
         * Sends the request to the CPanel API.
         *
         * @since 1.6.2
         * @param string $url URL endpoint.
         * @param array  $params Request parameters to send.
         * @return mixed
         */
        private function request($url, $params = array())
        {
        }
        // end request;
        /**
         * Get the base URL to make the calls.
         *
         * @since 2.0.0
         * @return string
         */
        private function get_base_url()
        {
        }
        // end get_base_url;
        /**
         * Signs in on the cPanel.
         *
         * @since 1.6.2
         * @return boolean
         */
        private function sign_in()
        {
        }
        // end sign_in;
        /**
         * Executes API calls, taking the request to the right API version
         *
         * @since 1.6.2
         * @throws Exception Throwns exception when the api is invalid.
         * @param string $api API version.
         * @param string $module Module name, to build the endpoint.
         * @param string $function Endpoint function to call.
         * @param array  $parameters Parameters to the API endpoint.
         * @return boolean
         */
        public function execute($api, $module, $function, array $parameters = array())
        {
        }
        // end execute;
        /**
         * Send the request if the API being used is the UAPI (newer version)
         *
         * @since 1.6.2
         * @param string $module Module name, to build the endpoint.
         * @param string $function Endpoint function to call.
         * @param array  $parameters Parameters to the API endpoint.
         * @return mixed
         */
        public function uapi($module, $function, array $parameters = array())
        {
        }
        // end uapi;
        /**
         * Send the request if the API being used is the API2 (older version)
         *
         * @since 1.6.2
         * @param string $module Module name, to build the endpoint.
         * @param string $function Endpoint function to call.
         * @param array  $parameters Parameters to the API endpoint.
         * @return mixed
         */
        public function api2($module, $function, array $parameters = array())
        {
        }
    }
}
namespace WP_Ultimo\Invoices {
    /**
     * Handles the generation of PDF Invoices.
     *
     * @since 2.0.0
     */
    class Invoice
    {
        /**
         * Keeps the settings key for the top-bar.
         */
        const KEY = 'invoice_settings';
        /**
         * Order object to generate the line items.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Models\Payment
         */
        protected $payment;
        /**
         * The invoice attributes.
         *
         * @since 2.0.0
         * @var array
         */
        protected $attributes;
        /**
         * Instance of the printer. For now, we use mPDF.
         *
         * @since 2.0.0
         * @var \Mpdf\Mpdf
         */
        protected $printer;
        /**
         * Constructs the invoice object.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Cart $payment The payment.
         * @param array                    $atts Attributes to make available on template.
         */
        public function __construct($payment, $atts = array())
        {
        }
        // end __construct;
        /**
         * Magic getter for attributes.
         *
         * @since 2.0.0
         *
         * @param string $key The attribute name to get.
         * @return mixed
         */
        public function __get($key)
        {
        }
        // end __get;
        /**
         * Setups the printer object. Uses mPdf.
         *
         * @since 2.0.0
         * @return void
         */
        private function pdf_setup()
        {
        }
        // end pdf_setup;
        /**
         * Saves the PDF file to the disk.
         *
         * @since 2.0.0
         *
         * @param boolean $file_name The name of the file. Should include the .pdf extension.
         * @return void
         */
        public function save_file($file_name)
        {
        }
        // end save_file;
        /**
         * Prints the PDF file to the browser.
         *
         * @since 2.0.0
         * @return void
         */
        public function print_file()
        {
        }
        // end print_file;
        /**
         * Generates the HTML content of the Invoice template.
         *
         * @since 2.0.0
         * @return string
         */
        public function render()
        {
        }
        // end render;
        /**
         * Handles the PDF generation.
         *
         * @since 2.0.0
         *
         * @param string|false $file_name The file name, to save. Empty or false to print to the browser.
         * @return void
         */
        protected function pdf($file_name = false)
        {
        }
        // end pdf;
        /**
         * Get the value of payment.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_payment()
        {
        }
        // end get_payment;
        /**
         * Set the value of payment.
         *
         * @since 2.0.0
         * @param mixed $payment The Order object to add to the invoice.
         * @return void
         */
        public function set_payment($payment)
        {
        }
        // end set_payment;
        /**
         * Get the value of attributes.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_attributes()
        {
        }
        // end get_attributes;
        /**
         * Set the value of attributes.
         *
         * @since 2.0.0
         * @param mixed $attributes The list of attributes to add to the invoice.
         * @return void
         */
        public function set_attributes($attributes)
        {
        }
        // end set_attributes;
        /**
         * Generates the folder to keep invoices and returns the path.
         *
         * @since 2.0.0
         * @return string
         */
        public static function get_folder()
        {
        }
        // end get_folder;
        /**
         * Returns the list of saved settings to customize the invoices..
         *
         * @since 2.0.0
         * @return array
         */
        public static function get_settings()
        {
        }
        // end get_settings;
        /**
         * Save settings.
         *
         * @since 2.0.0
         *
         * @param array $settings_to_save List of settings to save.
         * @return boolean
         */
        public static function save_settings($settings_to_save)
        {
        }
    }
}
namespace WP_Ultimo\Limitations {
    /**
     * Base limit module class.
     *
     * @since 2.0.0
     */
    abstract class Limit implements \JsonSerializable
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id;
        /**
         * The limit data.
         *
         * Here, each module will have different schemas.
         * From simple int values for disk_space, for example,
         * to arrays with fields, like plugins and post_types.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $limit;
        /**
         * The on/off status of the module.
         *
         * Limitations are only applied if the module
         * is enabled.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $enabled;
        /**
         * Controls if this limit has its own limit.
         *
         * When the limit is inherited from other models,
         * such as memberships or products.
         *
         * @since 2.0.0
         * @var boolean
         */
        private $has_own_limit = true;
        /**
         * Controls if this limit has its own enabled status.
         *
         * When the enabled is inherited from other models,
         * such as memberships or products.
         *
         * @since 2.0.0
         * @var boolean
         */
        private $has_own_enabled = true;
        /**
         * Allows sub-type limits to set their own default value for enabled.
         *
         * @since 2.0.0
         * @var boolean
         */
        private $enabled_default_value = true;
        /**
         * Constructs the limit module.
         *
         * @since 2.0.0
         *
         * @param array $data The module data.
         */
        public function __construct($data)
        {
        }
        // end __construct;
        /**
         * Prepare for serialization.
         *
         * @since 2.0.0
         * @return array
         */
        public function __serialize()
        {
        }
        // end __serialize;
        /**
         * Handles un-serialization.
         *
         * @since 2.0.0
         *
         * @param array $data The un-serialized data.
         * @return void
         */
        public function __unserialize($data)
        {
        }
        // end __unserialize;
        /**
         * Sets up the module based on the module data.
         *
         * @since 2.0.0
         *
         * @param array $data The module data.
         * @return void
         */
        public function setup($data)
        {
        }
        // end setup;
        /**
         * Returns the id of the module.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_id()
        {
        }
        // end get_id;
        /**
         * Checks if a value is allowed under this limit.
         *
         * This function is what you should be calling when validating
         * limits. This method is final, so it can't be redefined.
         *
         * Limits should implement a check method that gets
         * called in here.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param string $type The type parameter.
         * @return bool
         */
        public final function allowed($value_to_check, $type = '')
        {
        }
        // end allowed;
        /**
         * The check method is what gets called when allowed is called.
         *
         * Each module needs to implement a check method, that returns a boolean.
         * This check can take any form the developer wants.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param mixed  $limit The list of limits in this modules.
         * @param string $type Type for sub-checking.
         * @return bool
         */
        public abstract function check($value_to_check, $limit, $type = '');
        /**
         * Gets the limit data.
         *
         * @since 2.0.0
         *
         * @param string $type Type for sub-checking.
         * @return mixed
         */
        public function get_limit($type = '')
        {
        }
        // end get_limit;
        /**
         * Checks if the module is enabled.
         *
         * @since 2.0.0
         *
         * @param string $type Type for sub-checking.
         * @return boolean
         */
        public function is_enabled($type = '')
        {
        }
        // end is_enabled;
        /**
         * Converts the limitations list to an array.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_array()
        {
        }
        // end to_array;
        /**
         * Prepares for serialization.
         *
         * @since 2.0.0
         * @return array
         */
        public function jsonSerialize()
        {
        }
        // end jsonSerialize;
        /**
         * Checks if this module has its own limit.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_own_limit()
        {
        }
        // end has_own_limit;
        /**
         * Checks if this module has its own enabled.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_own_enabled()
        {
        }
        // end has_own_enabled;
        /**
         * Handles enabled status on post submission.
         *
         * @since 2.0.0
         * @return bool
         */
        public function handle_enabled()
        {
        }
        // end handle_enabled;
        /**
         * Handles other elements when saving. Used for custom attributes.
         *
         * @since 2.0.0
         *
         * @param array $module The current module, extracted from the request.
         * @return array
         */
        public function handle_others($module)
        {
        }
        // end handle_others;
        /**
         * Handles limits on post submission.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function handle_limit()
        {
        }
        // end handle_limit;
        /**
         * Returns a default state.
         *
         * @since 2.0.0
         * @return array
         */
        public static function default_state()
        {
        }
    }
    /**
     * Limit manager for sites.
     *
     * @since 2.0.0
     */
    class Limit_Disk_Space extends \WP_Ultimo\Limitations\Limit
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'disk_space';
        /**
         * The check method is what gets called when allowed is called.
         *
         * Each module needs to implement a check method, that returns a boolean.
         * This check can take any form the developer wants.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param mixed  $limit The list of limits in this modules.
         * @param string $type Type for sub-checking.
         * @return bool
         */
        public function check($value_to_check, $limit, $type = '')
        {
        }
    }
    /**
     * Domain_Mapping Limit Module.
     *
     * @since 2.0.0
     */
    class Limit_Domain_Mapping extends \WP_Ultimo\Limitations\Limit
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'domain_mapping';
        /**
         * The mode of template assignment/selection.
         *
         * @since 2.0.0
         * @var string
         */
        protected $mode = 'default';
        /**
         * Allows sub-type limits to set their own default value for enabled.
         *
         * @since 2.0.0
         * @var boolean
         */
        private $enabled_default_value = true;
        /**
         * Sets up the module based on the module data.
         *
         * @since 2.0.0
         *
         * @param array $data The module data.
         * @return void
         */
        public function setup($data)
        {
        }
        // end setup;
        /**
         * Returns the mode. Can be one of three: default, assign_template and choose_available_templates.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_mode()
        {
        }
        // end get_mode;
        /**
         * The check method is what gets called when allowed is called.
         *
         * Each module needs to implement a check method, that returns a boolean.
         * This check can take any form the developer wants.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param mixed  $limit The list of limits in this modules.
         * @param string $type Type for sub-checking.
         * @return bool
         */
        public function check($value_to_check, $limit, $type = '')
        {
        }
        // end check;
        /**
         * Returns default permissions.
         *
         * @since 2.0.0
         *
         * @param string $type Type for sub-checking.
         * @return array
         */
        public function get_default_permissions($type)
        {
        }
        // end get_default_permissions;
        /**
         * Returns a default state.
         *
         * @since 2.0.0
         * @return array
         */
        public static function default_state()
        {
        }
    }
    /**
     * Plugins Limit Module.
     *
     * @since 2.0.0
     */
    class Limit_Plugins extends \WP_Ultimo\Limitations\Limit
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'plugins';
        /**
         * The check method is what gets called when allowed is called.
         *
         * Each module needs to implement a check method, that returns a boolean.
         * This check can take any form the developer wants.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param mixed  $limit The list of limits in this modules.
         * @param string $type Type for sub-checking.
         * @return bool
         */
        public function check($value_to_check, $limit, $type = '')
        {
        }
        // end check;
        /**
         * Adds a magic getter for plugins.
         *
         * @since 2.0.0
         *
         * @param string $plugin_name The plugin name.
         * @return object
         */
        public function __get($plugin_name)
        {
        }
        // end __get;
        /**
         * Returns a list of plugins by behavior and visibility.
         *
         * @since 2.0.0
         *
         * @param null|string $behavior The behaviour to search for.
         * @param null|string $visibility The visibility to search for.
         * @return array
         */
        public function get_by_type($behavior = null, $visibility = null)
        {
        }
        // end get_by_type;
        /**
         * Returns default permissions.
         *
         * @since 2.0.0
         *
         * @param string $type Type for sub-checking.
         * @return array
         */
        public function get_default_permissions($type)
        {
        }
        // end get_default_permissions;
        /**
         * Checks if a theme exists on the current module.
         *
         * @since 2.0.0
         *
         * @param string $plugin_name The theme name.
         * @return bool
         */
        public function exists($plugin_name)
        {
        }
        // end exists;
        /**
         * Checks if the module is enabled.
         *
         * @since 2.0.0
         *
         * @param string $type Type for sub-checking.
         * @return boolean
         */
        public function is_enabled($type = '')
        {
        }
    }
    /**
     * Subtypes Limit Module.
     *
     * @since 2.0.0
     */
    class Limit_Subtype extends \WP_Ultimo\Limitations\Limit
    {
        /**
         * The check method is what gets called when allowed is called.
         *
         * Each module needs to implement a check method, that returns a boolean.
         * This check can take any form the developer wants.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param mixed  $limit The list of limits in this modules.
         * @param string $type Type for sub-checking.
         * @return bool
         */
        public function check($value_to_check, $limit, $type = '')
        {
        }
        // end check;
        /**
         * Adds a magic getter for subtypes.
         *
         * @since 2.0.0
         *
         * @param string $sub_type The sub type.
         * @return object
         */
        public function __get($sub_type)
        {
        }
        // end __get;
        /**
         * Returns default permissions.
         *
         * @since 2.0.0
         *
         * @param string $type Type for sub-checking.
         * @return array
         */
        public function get_default_permissions($type)
        {
        }
        // end get_default_permissions;
        /**
         * Checks if a theme exists on the current module.
         *
         * @since 2.0.0
         *
         * @param string $type The type.
         * @return bool
         */
        public function exists($type)
        {
        }
        // end exists;
        /**
         * Handles limits on post submission.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function handle_limit()
        {
        }
    }
    /**
     * Post Types Limit Module.
     *
     * @since 2.0.0
     */
    class Limit_Post_Types extends \WP_Ultimo\Limitations\Limit_Subtype
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'post_types';
        /**
         * Check if we are already above the post quota.
         *
         * @since 2.0.0
         *
         * @param string $post_type The post type to check against.
         * @return boolean
         */
        public function is_post_above_limit($post_type)
        {
        }
        // end is_post_above_limit;
        /**
         * Get the post count for this site.
         *
         * @since 2.0.0
         *
         * @param string $post_type The post type to check against.
         * @return int
         */
        public static function get_post_count($post_type)
        {
        }
    }
    /**
     * Site_Templates Limit Module.
     *
     * @since 2.0.0
     */
    class Limit_Site_Templates extends \WP_Ultimo\Limitations\Limit
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'site_templates';
        /**
         * The mode of template assignment/selection.
         *
         * @since 2.0.0
         * @var string
         */
        protected $mode = 'default';
        /**
         * Allows sub-type limits to set their own default value for enabled.
         *
         * @since 2.0.0
         * @var boolean
         */
        private $enabled_default_value = true;
        /**
         * Sets up the module based on the module data.
         *
         * @since 2.0.0
         *
         * @param array $data The module data.
         * @return void
         */
        public function setup($data)
        {
        }
        // end setup;
        /**
         * Returns the mode. Can be one of three: default, assign_template and choose_available_templates.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_mode()
        {
        }
        // end get_mode;
        /**
         * The check method is what gets called when allowed is called.
         *
         * Each module needs to implement a check method, that returns a boolean.
         * This check can take any form the developer wants.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param mixed  $limit The list of limits in this modules.
         * @param string $type Type for sub-checking.
         * @return bool
         */
        public function check($value_to_check, $limit, $type = '')
        {
        }
        // end check;
        /**
         * Adds a magic getter for themes.
         *
         * @since 2.0.0
         *
         * @param string $template_id The template site id.
         * @return object
         */
        public function __get($template_id)
        {
        }
        // end __get;
        /**
         * Returns default permissions.
         *
         * @since 2.0.0
         *
         * @param string $type Type for sub-checking.
         * @return array
         */
        public function get_default_permissions($type)
        {
        }
        // end get_default_permissions;
        /**
         * Checks if a theme exists on the current module.
         *
         * @since 2.0.0
         *
         * @param string $template_id The template site id.
         * @return bool
         */
        public function exists($template_id)
        {
        }
        // end exists;
        /**
         * Get all themes.
         *
         * @since 2.0.0
         * @return array List of theme stylesheets.
         */
        public function get_all_templates()
        {
        }
        // end get_all_templates;
        /**
         * Get available themes.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_available_site_templates()
        {
        }
        // end get_available_site_templates;
        /**
         * Get the forced active theme for the current limitations.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_pre_selected_site_template()
        {
        }
        // end get_pre_selected_site_template;
        /**
         * Handles limits on post submission.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function handle_limit()
        {
        }
        // end handle_limit;
        /**
         * Handles other elements when saving. Used for custom attributes.
         *
         * @since 2.0.0
         *
         * @param array $module The current module, extracted from the request.
         * @return array
         */
        public function handle_others($module)
        {
        }
        // end handle_others;
        /**
         * Returns a default state.
         *
         * @since 2.0.0
         * @return array
         */
        public static function default_state()
        {
        }
    }
    /**
     * Sites Limit Module.
     *
     * @since 2.0.0
     */
    class Limit_Sites extends \WP_Ultimo\Limitations\Limit
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'sites';
        /**
         * The check method is what gets called when allowed is called.
         *
         * Each module needs to implement a check method, that returns a boolean.
         * This check can take any form the developer wants.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param mixed  $limit The list of limits in this modules.
         * @param string $type Type for sub-checking.
         * @return bool
         */
        public function check($value_to_check, $limit, $type = '')
        {
        }
    }
    /**
     * Themes Limit Module.
     *
     * @since 2.0.0
     */
    class Limit_Themes extends \WP_Ultimo\Limitations\Limit
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'themes';
        /**
         * The theme being currently forced for this site.
         *
         * @since 2.0.0
         * @var null|false|string Null when first initialized, false when no theme is forced or the theme name.
         */
        protected $forced_active_theme;
        /**
         * The check method is what gets called when allowed is called.
         *
         * Each module needs to implement a check method, that returns a boolean.
         * This check can take any form the developer wants.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param mixed  $limit The list of limits in this modules.
         * @param string $type Type for sub-checking.
         * @return bool
         */
        public function check($value_to_check, $limit, $type = '')
        {
        }
        // end check;
        /**
         * Adds a magic getter for themes.
         *
         * @since 2.0.0
         *
         * @param string $theme_name The theme name.
         * @return object
         */
        public function __get($theme_name)
        {
        }
        // end __get;
        /**
         * Returns default permissions.
         *
         * @since 2.0.0
         *
         * @param string $type Type for sub-checking.
         * @return array
         */
        public function get_default_permissions($type)
        {
        }
        // end get_default_permissions;
        /**
         * Checks if a theme exists on the current module.
         *
         * @since 2.0.0
         *
         * @param string $theme_name The theme name.
         * @return bool
         */
        public function exists($theme_name)
        {
        }
        // end exists;
        /**
         * Get all themes.
         *
         * @since 2.0.0
         * @return array List of theme stylesheets.
         */
        public function get_all_themes()
        {
        }
        // end get_all_themes;
        /**
         * Get available themes.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_available_themes()
        {
        }
        // end get_available_themes;
        /**
         * Get the forced active theme for the current limitations.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_forced_active_theme()
        {
        }
        // end get_forced_active_theme;
        /**
         * Checks if the module is enabled.
         *
         * @since 2.0.0
         *
         * @param string $type Type for sub-checking.
         * @return boolean
         */
        public function is_enabled($type = '')
        {
        }
    }
    /**
     * Users Limit Module.
     *
     * @since 2.0.0
     */
    class Limit_Users extends \WP_Ultimo\Limitations\Limit_Subtype
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'users';
    }
    /**
     * Visits Limit Module.
     *
     * @since 2.0.0
     */
    class Limit_Visits extends \WP_Ultimo\Limitations\Limit
    {
        /**
         * The module id.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id = 'visits';
        /**
         * The check method is what gets called when allowed is called.
         *
         * Each module needs to implement a check method, that returns a boolean.
         * This check can take any form the developer wants.
         *
         * @since 2.0.0
         *
         * @param mixed  $value_to_check Value to check.
         * @param mixed  $limit The list of limits in this modules.
         * @param string $type Type for sub-checking.
         * @return bool
         */
        public function check($value_to_check, $limit, $type = '')
        {
        }
    }
}
namespace WP_Ultimo\Limits {
    /**
     * Handles limitations to post types, uploads and more.
     *
     * @since 2.0.0
     */
    class Disk_Space_Limits
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Runs on the first and only instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Sets up the hooks and checks.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Changes the disk_space to the one on the product.
         *
         * @since 2.0.0
         *
         * @param string $disk_space The new disk space.
         * @return int
         */
        public function apply_disk_space_limitations($disk_space)
        {
        }
    }
    /**
     * Handles limitations to post types, uploads and more.
     *
     * @since 2.0.0
     */
    class Plugin_Limits
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Site-level plugins cache.
         *
         * @since 2.0.0
         * @var null|array
         */
        protected $plugins = null;
        /**
         * Network plugins cache.
         *
         * @since 2.0.0
         * @var null|array
         */
        protected $network_plugins = null;
        /**
         * Runs on the first and only instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Apply limitations if they are available.
         *
         * @since 2.0.0
         * @return void
         */
        public function load_limitations()
        {
        }
        // end load_limitations;
        /**
         * Registers scripts onto the plugins page.
         *
         * @since 2.0.5
         * @return void
         */
        public function admin_page_hooks()
        {
        }
        // end admin_page_hooks;
        /**
         * Automatically activate and deactivate plugins when the site is created or a upgrade happens.
         *
         * @since 2.0.0
         *
         * @param array                  $data Saved data.
         * @param \WP_Ultimo\Models\Site $site_object The site created.
         * @param bool                   $new If this site is a new one.
         * @return void
         */
        public function activate_and_inactive_plugins($data, $site_object, $new)
        {
        }
        // end activate_and_inactive_plugins;
        /**
         * Activate and Deactivate plugins on upgrades and downgrades.
         *
         * @since 2.0.5
         *
         * @param \WP_Ultimo\Models\Payment    $payment The payment object.
         * @param \WP_Ultimo\Models\Membership $membership The membership object.
         * @param \WP_Ultimo\Models\Customer   $customer The customer object.
         * @param \WP_Ultimo\Checkout\Cart     $cart The cart object.
         * @param string                       $type The cart type.
         * @return void
         */
        public function maybe_activate_and_inactive_plugins($payment, $membership, $customer, $cart, $type)
        {
        }
        // end maybe_activate_and_inactive_plugins;
        /**
         * Clear the actions of the plugins list table.
         *
         * @since 2.0.0
         *
         * @param array  $actions The list of plugin actions.
         * @param string $plugin_file The plugin path/slug.
         * @return array
         */
        public function clear_actions($actions, $plugin_file)
        {
        }
        // end clear_actions;
        /**
         * Clears the plugin list.
         *
         * This method is responsible for controlling
         * plugin visibility on the plugins list table.
         *
         * @since 2.0.0
         *
         * @param array $plugins The original list of plugins.
         * @return array
         */
        public function clear_plugin_list($plugins)
        {
        }
        // end clear_plugin_list;
        /**
         * Deactivates the network plugins that people are not allowed to use.
         *
         * We need different methods because keys are different network wide and on the sub-site level.
         *
         * @since 2.0.0
         *
         * @param array $plugins Array with the plugins activated.
         * @return array
         */
        public function deactivate_network_plugins($plugins)
        {
        }
        // end deactivate_network_plugins;
        /**
         * Deactivates the plugins that people are not allowed to use.
         *
         * @since 2.0.0
         *
         * @param array $plugins Array with the plugins activated.
         * @return array
         */
        public function deactivate_plugins($plugins)
        {
        }
        // end deactivate_plugins;
        /**
         * Remove the unused shortcodes after we disable plugins.
         *
         * @since 2.0.0
         *
         * @param string $content The post content.
         * @return string
         */
        public function clean_unused_shortcodes($content)
        {
        }
    }
    /**
     * Handles limitations to post types, uploads and more.
     *
     * @since 2.0.0
     */
    class Post_Type_Limits
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Runs on the first and only instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Emulates post types to avoid having to have plugins active on the main site.
         *
         * @since 2.0.6
         * @return void
         */
        public function register_emulated_post_types()
        {
        }
        // end register_emulated_post_types;
        /**
         * Prevents users from trashing posts and restoring them later to bypass the limitation.
         *
         * @since 2.0.0
         * @return void
         */
        public function limit_restoring()
        {
        }
        // end limit_restoring;
        /**
         * Limit the posts after the user reach his plan limits
         *
         * @since 1.0.0
         * @since 1.5.4 Checks for blocked post types
         */
        public function limit_posts()
        {
        }
        // end limit_posts;
        /**
         * Checks if the user is trying to publish a draft post.
         *
         * If that's the case, only allow him to do it if the post count is not above the quota.
         *
         * @since 1.7.0
         * @param array $data Info being saved on posts.
         * @param array $modified_data Data that is changing. We are interested in publish.
         * @return array
         */
        public function limit_draft_publishing($data, $modified_data)
        {
        }
        // end limit_draft_publishing;
        /**
         * Limits uploads of items to the media library.
         *
         * @since 2.0.0
         *
         * @param array $file $_FILE array being passed.
         * @return mixed
         */
        public function limit_media($file)
        {
        }
        // end limit_media;
        /**
         * Remove the upload tabs if the quota is over.
         *
         * @since 2.0.0
         *
         * @param array $tabs Tabs of the media gallery upload modal.
         * @return array
         */
        public function limit_tabs($tabs)
        {
        }
    }
    /**
     * Handles limitations to post types, uploads and more.
     *
     * @since 2.0.0
     */
    class Site_Template_Limits
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Runs on the first and only instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Sets up the hooks and checks.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Maybe filter the template selection options on the template selection field.
         *
         * @since 2.0.0
         *
         * @param array $attributes The template rendering attributes.
         * @return array
         */
        public function maybe_filter_template_selection_options($attributes)
        {
        }
        // end maybe_filter_template_selection_options;
        /**
         * Decides if we need to force the selection of a given template during the site creation.
         *
         * @since 2.0.0
         *
         * @param int                          $template_id The current template id.
         * @param \WP_Ultimo\Models\Membership $membership The membership object.
         * @return int
         */
        public function maybe_force_template_selection($template_id, $membership)
        {
        }
        // end maybe_force_template_selection;
        /**
         * Pre-selects a given template on the checkout screen depending on permissions.
         *
         * @since 2.0.0
         *
         * @param array                    $extra List if extra elements.
         * @param \WP_Ultimo\Checkout\Cart $cart The cart object.
         * @return array
         */
        public function maybe_force_template_selection_on_cart($extra, $cart)
        {
        }
    }
    /**
     * Handles limitations to post types, uploads and more.
     *
     * @since 2.0.0
     */
    class Theme_Limits
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * List of themes that are not available.
         *
         * @since 2.0.0
         * @var array
         */
        protected $themes_not_available = array();
        /**
         * Keep a cache of the results as the check is costly.
         *
         * @since 2.0.0
         * @var null|false|string
         */
        protected $forced_theme = null;
        /**
         * Runs on the first and only instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Apply limitations if they are available.
         *
         * @since 2.0.0
         * @return void
         */
        public function load_limitations()
        {
        }
        // end load_limitations;
        /**
         * Removes the activate button from not available themes.
         *
         * This uses a very hack-y approach due to a bug on WordPress
         * Core. The problem is that the WP code assumes that no one
         * with the capability of activating themes would be unable
         * to activate a theme (in cases of external factors for example).
         *
         * @todo Send patch to WordPress core.
         * @since 2.0.0
         * @return void
         */
        public function hacky_remove_activate_button()
        {
        }
        // end hacky_remove_activate_button;
        /**
         * Modifies the default WordPress theme page template.
         *
         * @since 2.0.0
         * @return void
         */
        public function modify_backbone_template()
        {
        }
        // end modify_backbone_template;
        /**
         * Checks if a theme needs to have the activate button removed.
         *
         * @since 2.0.0
         *
         * @param array $themes The list of themes available.
         * @return array
         */
        public function maybe_remove_activate_button($themes)
        {
        }
        // end maybe_remove_activate_button;
        /**
         * Force the activation of one particularly selected theme.
         *
         * @since 2.0.0
         *
         * @param string $stylesheet The default theme being used.
         * @return string
         */
        public function force_active_theme($stylesheet)
        {
        }
        // end force_active_theme;
        /**
         * Deactivates the plugins that people are not allowed to use.
         *
         * @since 2.0.0
         *
         * @param array $themes Array with the plugins activated.
         * @return array
         */
        public function add_extra_available_themes($themes)
        {
        }
    }
    /**
     * Handles trial limitations.
     *
     * @since 2.0.0
     */
    class Trial_Limits
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Runs on the first and only instantiation.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Apply limitations if they are available.
         *
         * @since 2.0.0
         * @return void
         */
        public function load_limitations()
        {
        }
    }
}
namespace WP_Ultimo\List_Tables {
    // end if;
    /**
     * Base List Table class. Extends WP_List_Table.
     *
     * All of WP Ultimo's list tables should extend this class.
     * It provides ajax-filtering and pagination out-of-the-box among other cool features.
     *
     * @since 2.0.0
     */
    class Base_List_Table extends \WP_List_Table
    {
        /**
         * Holds the id for this list table. Used on filters.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id;
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class;
        /**
         * Holds the labels, singular and plural, to be used when generating labels.
         *
         * @since 2.0.0
         * @var array
         */
        protected $labels = array('singular' => '', 'plural' => '');
        /**
         * Keeps track of the current view mode for this particular list table.
         *
         * @since 2.0.0
         * @var string
         */
        public $current_mode = 'list';
        /**
         * Sets the allowed modes.
         *
         * @since 2.0.0
         * @var array
         */
        public $modes = array('list' => 'List');
        /**
         * The list table context.
         *
         * Can be page, if the table is on a list page;
         * or widget, if the table is inside a widget.
         *
         * We use this to determine how to encapsulate the fields for filtering
         * and to support multiple list tables with ajax pagination per page.
         *
         * @since 2.0.0
         * @var string
         */
        public $context = 'page';
        /**
         * Returns the table id.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_table_id()
        {
        }
        // end get_table_id;
        /**
         * Changes the context of the list table.
         *
         * Available contexts are 'page' and 'widget'.
         *
         * @since 2.0.0
         *
         * @param string $context The new context to set.
         * @return void
         */
        public function set_context($context = 'page')
        {
        }
        // end set_context;
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         *
         * @param array $args Arguments of the list table.
         */
        public function __construct($args = array())
        {
        }
        // end __construct;
        /**
         * Adds the screen option fields.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_default_screen_options()
        {
        }
        // end add_default_screen_options;
        /**
         * Adds the select all button for the Grid Mode.
         *
         * @since 2.0.0
         *
         * @param string $which Bottom or top navbar.
         * @return void
         */
        protected function extra_tablenav($which)
        {
        }
        // end extra_tablenav;
        /**
         * Set the list display mode for the list table.
         *
         * @since 2.0.0
         * @return void
         */
        public function set_list_mode()
        {
        }
        // end set_list_mode;
        /**
         * Returns a label.
         *
         * @since 2.0.0
         *
         * @param string $label singular or plural.
         * @return string
         */
        public function get_label($label = 'singular')
        {
        }
        // end get_label;
        /**
         * Uses the query class to return the items to be displayed.
         *
         * @since 2.0.0
         *
         * @param integer $per_page Number of items to display per page.
         * @param integer $page_number Current page.
         * @param boolean $count If we should count records or return the actual records.
         * @return array
         */
        public function get_items($per_page = 5, $page_number = 1, $count = false)
        {
        }
        // end get_items;
        /**
         * General purpose get_items.
         *
         * @since 2.0.0
         *
         * @param array $query_args The query args.
         * @return mixed
         */
        protected function _get_items($query_args)
        {
        }
        // end _get_items;
        /**
         * Checks if we have any items at all.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_items()
        {
        }
        // end has_items;
        /**
         * Returns the total record count. Used on pagination.
         *
         * @since 2.0.0
         * @return int
         */
        public function record_count()
        {
        }
        // end record_count;
        /**
         * Returns the slug of the per_page option for this data type.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_per_page_option_name()
        {
        }
        // end get_per_page_option_name;
        /**
         * Returns the label for the per_page option for this data_type.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_per_page_option_label()
        {
        }
        // end get_per_page_option_label;
        /**
         * Uses the query class to determine if there's any searchable fields.
         * If that's the case, we automatically add the search field.
         *
         * @since 2.0.0
         * @return boolean
         */
        protected function has_search()
        {
        }
        // end has_search;
        /**
         * Generates the search field label, based on the table labels.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_search_input_label()
        {
        }
        // end get_search_input_label;
        /**
         * Prepare the list table before actually displaying records.
         *
         * @since 2.0.0
         * @return void
         */
        public function prepare_items()
        {
        }
        // end prepare_items;
        /**
         * Register Scripts that might be needed for ajax pagination and so on.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Adds the hidden fields necessary to handle pagination.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_ajax_filters()
        {
        }
        // end display_ajax_filters;
        /**
         * Handles the default display for list mode.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_view_list()
        {
        }
        // end display_view_list;
        /**
         * Handles the default display for grid mode.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_view_grid()
        {
        }
        // end display_view_grid;
        /**
         * Displays the table.
         *
         * Adds a Nonce field and calls parent's display method.
         *
         * @since 3.1.0
         * @access public
         */
        public function display()
        {
        }
        // end display;
        /**
         * Display the filters if they exist.
         *
         * @todo: refator
         * @since 2.0.0
         * @return void
         */
        public function filters()
        {
        }
        // end filters;
        /**
         * Overrides the single row method to create different methods depending on the mode.
         *
         * @since 2.0.0
         *
         * @param mixed $item The line item being displayed.
         * @return void
         */
        public function single_row($item)
        {
        }
        // end single_row;
        /**
         * Handles the item display for list mode.
         *
         * @since 2.0.0
         *
         * @param mixed $item The line item being displayed.
         * @return void
         */
        public function single_row_list($item)
        {
        }
        // end single_row_list;
        /**
         * Handles the item display for grid mode.
         *
         * @since 2.0.0
         *
         * @param mixed $item The line item being displayed.
         * @return void
         */
        public function single_row_grid($item)
        {
        }
        // end single_row_grid;
        /**
         * Displays a base div when there is not item.
         *
         * @since 2.0.0
         * @return void
         */
        public function no_items()
        {
        }
        // end no_items;
        /**
         * Returns an associative array containing the bulk action
         *
         * @return array
         */
        public function get_bulk_actions()
        {
        }
        // end get_bulk_actions;
        /**
         * Process single action.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_single_action()
        {
        }
        // end process_single_action;
        /**
         * Handles the bulk processing.
         *
         * @since 2.0.0
         * @return bool
         */
        public static function process_bulk_action()
        {
        }
        // end process_bulk_action;
        /**
         * Handles ajax requests for pagination and filtering.
         *
         * @since 2.0.0
         * @return void
         */
        public function ajax_response()
        {
        }
        // end ajax_response;
        /**
         * Render a column when no column specific method exist.
         *
         * @param array  $item Item object/array.
         * @param string $column_name Column name being displayed.
         *
         * @return string
         */
        public function column_default($item, $column_name)
        {
        }
        // end column_default;
        /**
         * Handles the default displaying of datetime columns.
         *
         * @since 2.0.0
         *
         * @param string $date Valid date to be used inside a strtotime call.
         * @return string
         */
        public function _column_datetime($date)
        {
        }
        // end _column_datetime;
        /**
         * Returns the membership object associated with this object.
         *
         * @since 2.0.0
         *
         * @param object $item Object.
         * @return string
         */
        public function column_membership($item)
        {
        }
        // end column_membership;
        /**
         * Returns the payment object associated with this object.
         *
         * @since 2.0.0
         *
         * @param object $item Object.
         * @return string
         */
        public function column_payment($item)
        {
        }
        // end column_payment;
        /**
         * Returns the customer object associated with this object.
         *
         * @since 2.0.0
         *
         * @param object $item Object.
         * @return string
         */
        public function column_customer($item)
        {
        }
        // end column_customer;
        /**
         * Returns the product object associated with this object.
         *
         * @since 2.0.0
         *
         * @param object $item Object.
         * @return string
         */
        public function column_product($item)
        {
        }
        // end column_product;
        /**
         * Returns the site object associated with this object.
         *
         * @since 2.0.0
         *
         * @param object $item Object.
         * @return string
         */
        public function column_blog_id($item)
        {
        }
        // end column_blog_id;
        /**
         * Display the column for feature image.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Product $item Product object.
         * @return string
         */
        public function column_featured_image_id($item)
        {
        }
        // end column_featured_image_id;
        /**
         * Render the bulk edit checkbox.
         *
         * @param WP_Ultimo\Models\Product $item Product object.
         *
         * @return string
         */
        public function column_cb($item)
        {
        }
        // end column_cb;
        /**
         * Return the js var name. This will be used on other places.
         *
         * @since 2.0.0
         * @return string
         */
        public function _get_js_var_name()
        {
        }
        // end _get_js_var_name;
        /**
         * Overrides the parent method to include the custom ajax functionality for WP Ultimo.
         *
         * @since 2.0.0
         * @return void
         */
        public function _js_vars()
        {
        }
        // end _js_vars;
        /**
         * Fills the filter array with values returned from the current request.
         *
         * @since 2.0.0
         *
         * @param string $name Filter name.
         * @return mixed
         */
        public function fill_normal_type($name)
        {
        }
        // end fill_normal_type;
        /**
         * Fills the data filter array with values returned from the current request.
         *
         * @since 2.0.0
         *
         * @param string $name Filter name.
         * @return mixed
         */
        public function fill_date_type($name)
        {
        }
        // end fill_date_type;
        /**
         * Get the default date filter options.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_default_date_filter_options()
        {
        }
        // end get_default_date_filter_options;
        /**
         * Returns the columns from the BerlinDB Schema.
         *
         * Schema columns are protected on BerlinDB, which makes it hard to reference them out context.
         * This is the reason for the reflection funkiness going on in here.
         * Maybe there's a better way to do it, but it works for now.
         *
         * @since 2.0.0
         *
         * @param array   $args Key => Value pair to search the return columns. e.g. array('searchable' => true).
         * @param string  $operator How to use the $args arrays in the search. As logic and's or or's.
         * @param boolean $field Field to return.
         * @return array.
         */
        protected function get_schema_columns($args = array(), $operator = 'and', $field = false)
        {
        }
        // end get_schema_columns;
        /**
         * Returns sortable columns on the schema.
         *
         * @return array
         */
        public function get_sortable_columns()
        {
        }
        // end get_sortable_columns;
        /**
         * Get the extra fields based on the request.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_fields()
        {
        }
        // end get_extra_fields;
        /**
         * Returns the date fields.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_date_fields()
        {
        }
        // end get_extra_date_fields;
        /**
         * Returns a list of filters on the request to be used on the query.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_query_fields()
        {
        }
        // end get_extra_query_fields;
        /**
         * Returns the hidden fields that are embedded into the page.
         *
         * These are used to make sure the URL on the browser is always up to date.
         * This makes sure that when a use refreshes, they don't loose the current filtering state.
         * This also makes filtered searches shareable via the URL =)
         *
         * @since 2.0.0
         * @return array
         */
        public function get_hidden_fields()
        {
        }
        // end get_hidden_fields;
        /**
         * Returns the pre-selected filters on the filter bar.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
    }
    /**
     * Broadcast List Table class.
     *
     * @since 2.0.0
     */
    class Broadcast_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Broadcasts\\Broadcast_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Overrides the checkbox column to disable the checkboxes on the email types.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Broadcast $item The broadcast object.
         * @return string
         */
        public function column_cb($item)
        {
        }
        // end column_cb;
        /**
         * Returns the markup for the type column.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Broadcast $item The broadcast object.
         * @return string
         */
        public function column_type($item)
        {
        }
        // end column_type;
        /**
         * Displays the name of the broadcast.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Broadcast $item The broadcast object.
         * @return string
         */
        public function column_the_content($item)
        {
        }
        // end column_the_content;
        /**
         * Displays the target customers of the broadcast.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Broadcast $item The broadcast object.
         * @return string
         */
        public function column_target_customers($item)
        {
        }
        // end column_target_customers;
        /**
         * Displays the target products of the broadcast.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Broadcast $item The broadcast object.
         * @return string
         */
        public function column_target_products($item)
        {
        }
        // end column_target_products;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Registers the necessary scripts and styles for this admin page.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Returns the pre-selected filters on the filter bar.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
    }
    /**
     * Checkout_Form List Table class.
     *
     * @since 2.0.0
     */
    class Checkout_Form_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Checkout_Forms\\Checkout_Form_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Displays the content of the product column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Checkout_Form $item Checkout Form object.
         * @return string
         */
        public function column_name($item)
        {
        }
        // end column_name;
        /**
         * Displays the slug of the form.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Checkout_Form $item Checkout Form object.
         * @return string
         */
        public function column_slug($item)
        {
        }
        // end column_slug;
        /**
         * Displays the number pof steps and fields.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Checkout_Form $item Checkout Form object.
         * @return string
         */
        public function column_steps($item)
        {
        }
        // end column_steps;
        /**
         * Displays the form shortcode.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Checkout_Form $item Checkout Form object.
         * @return string
         */
        public function column_shortcode($item)
        {
        }
        // end column_shortcode;
        /**
         * Handles the bulk processing adding duplication
         *
         * @since 2.0.0
         * @return void
         */
        public function process_single_action()
        {
        }
        // end process_single_action;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
    }
    /**
     * Customer List Table class.
     *
     * @since 2.0.0
     */
    class Customer_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Customers\\Customer_Query';
        /**
         * Initializes the table.
         *
         * @param array $args Table attributes.
         * @since 2.0.0
         */
        public function __construct($args = array())
        {
        }
        // end __construct;
        /**
         * Adds the extra search field when the search element is present.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_query_fields()
        {
        }
        // end get_extra_query_fields;
        /**
         * Displays the content of the name column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Customer $item Customer object.
         * @return string
         */
        public function column_name($item)
        {
        }
        // end column_name;
        /**
         * Displays the customer photo and special status.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Customer $item Customer object.
         * @return string
         */
        public function column_customer_status($item)
        {
        }
        // end column_customer_status;
        /**
         * Returns the number of memberships owned by this customer.
         *
         * @since 2.0.0
         *
         * @todo: Make this works.
         * @param WP_Ultimo\Models\Customer $item Customer object.
         * @return string
         */
        public function column_memberships($item)
        {
        }
        // end column_memberships;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Handles the item display for grid mode.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Customer $item The line item being displayed.
         * @return void
         */
        public function single_row_grid($item)
        {
        }
        // end single_row_grid;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Returns the pre-selected filters on the filter bar.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
        // end get_views;
        /**
         * Displays the last login.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Customer $item Customer object.
         * @return string The last login information.
         */
        public function column_last_login($item)
        {
        }
    }
    /**
     * Membership List Table class.
     *
     * @since 2.0.0
     */
    class Membership_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Memberships\\Membership_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Adds the extra search field when the search element is present.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_query_fields()
        {
        }
        // end get_extra_query_fields;
        /**
         * Displays the membership reference code.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Membership $item Membership object.
         * @return string
         */
        public function column_hash($item)
        {
        }
        // end column_hash;
        /**
         * Displays the status of the membership.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Membership $item Membership object.
         * @return string
         */
        public function column_status($item)
        {
        }
        // end column_status;
        /**
         * Displays the price of the membership.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Membership $item Membership object.
         * @return string
         */
        public function column_amount($item)
        {
        }
        // end column_amount;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Handles the default displaying of datetime columns.
         *
         * @since 2.0.0
         *
         * @param self $item The membership.
         * @return string
         */
        public function column_date_expiration($item)
        {
        }
        // end column_date_expiration;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Returns the pre-selected filters on the filter bar.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
    }
    /**
     * Membership List Table class.
     *
     * @since 2.0.0
     */
    class Customers_Membership_List_Table extends \WP_Ultimo\List_Tables\Membership_List_Table
    {
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Renders the inside column responsive.
         *
         * @since 2.0.0
         *
         * @param object $item The item being rendered.
         * @return void
         */
        public function column_responsive($item)
        {
        }
    }
    /**
     * Payment List Table class.
     *
     * @since 2.0.0
     */
    class Payment_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Payments\\Payment_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Adds the extra search field when the search element is present.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_query_fields()
        {
        }
        // end get_extra_query_fields;
        /**
         * Displays the payment reference code.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_hash($item)
        {
        }
        // end column_hash;
        /**
         * Displays the membership photo and special status.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_status($item)
        {
        }
        // end column_status;
        /**
         * Returns the number of subscriptions owned by this membership.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_product($item)
        {
        }
        // end column_product;
        /**
         * Displays the column for the total amount of the payment.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_total($item)
        {
        }
        // end column_total;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Returns the pre-selected filters on the filter bar.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
    }
    /**
     * Payment List Table class.
     *
     * @since 2.0.0
     */
    class Customers_Payment_List_Table extends \WP_Ultimo\List_Tables\Payment_List_Table
    {
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Renders the inside column responsive.
         *
         * @since 2.0.0
         *
         * @param object $item The item being rendered.
         * @return void
         */
        public function column_responsive($item)
        {
        }
    }
    /**
     * Site List Table class.
     *
     * @since 2.0.0
     */
    class Site_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Sites\\Site_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Overrides the parent method to add pending sites.
         *
         * @since 2.0.0
         *
         * @param integer $per_page Number of items to display per page.
         * @param integer $page_number Current page.
         * @param boolean $count If we should count records or return the actual records.
         * @return array
         */
        public function get_items($per_page = 5, $page_number = 1, $count = false)
        {
        }
        // end get_items;
        /**
         * Render the bulk edit checkbox.
         *
         * @param WP_Ultimo\Models\Site $item Site object.
         *
         * @return string
         */
        public function column_cb($item)
        {
        }
        // end column_cb;
        /**
         * Displays the content of the name column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Site $item Site object.
         * @return string
         */
        public function column_path($item)
        {
        }
        // end column_path;
        /**
         * Returns the date of the customer registration.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Site $item Site object.
         * @return string
         */
        public function column_date_registered($item)
        {
        }
        // end column_date_registered;
        /**
         * Returns the blog_id.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Site $item Site object.
         * @return string
         */
        public function column_blog_id($item)
        {
        }
        // end column_blog_id;
        /**
         * Displays the type of the site.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Site $item Site object.
         * @return string
         */
        public function column_type($item)
        {
        }
        // end column_type;
        /**
         * Column for the domains associated with this site.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Site $item Site object.
         * @return string
         */
        public function column_domains($item)
        {
        }
        // end column_domains;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Renders the customer card for grid mode.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Customer $item The customer being shown.
         * @return void
         */
        public function single_row_grid($item)
        {
        }
        // end single_row_grid;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Returns the pre-selected filters on the filter bar.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
        // end get_views;
        /**
         * Returns an associative array containing the bulk action
         *
         * @return array
         */
        public function get_bulk_actions()
        {
        }
        // end get_bulk_actions;
        /**
         * Handles the bulk processing.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_single_action()
        {
        }
    }
    /**
     * Site List Table class.
     *
     * @since 2.0.0
     */
    class Customers_Site_List_Table extends \WP_Ultimo\List_Tables\Site_List_Table
    {
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Renders the inside column responsive.
         *
         * @since 2.0.0
         *
         * @param object $item The item being rendered.
         * @return void
         */
        public function column_responsive($item)
        {
        }
        // end column_responsive;
        /**
         * Overrides the parent method to add pending sites.
         *
         * @since 2.0.0
         *
         * @param integer $per_page Number of items to display per page.
         * @param integer $page_number Current page.
         * @param boolean $count If we should count records or return the actual records.
         * @return array
         */
        public function get_items($per_page = 5, $page_number = 1, $count = false)
        {
        }
    }
    /**
     * Discount_Code List Table class.
     *
     * @since 2.0.0
     */
    class Discount_Code_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Discount_Codes\\Discount_Code_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Displays the content of the name column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Discount_Code $item Discount_Code object.
         * @return string
         */
        public function column_name($item)
        {
        }
        // end column_name;
        /**
         * Displays the content of the value column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Discount_Code $item Discount_Code object.
         *
         * @return string
         */
        public function column_value($item)
        {
        }
        // end column_value;
        /**
         * Displays the content of the setup fee value column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Discount_Code $item Discount_Code object.
         *
         * @return string
         */
        public function column_setup_fee_value($item)
        {
        }
        // end column_setup_fee_value;
        /**
         * Displays the use limitations.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Discount_Code $item Discount_Code object.
         * @return string
         */
        public function column_uses($item)
        {
        }
        // end column_uses;
        /**
         * Shows the code as a tag.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Discount_Code $item Discount_Code object.
         * @return string
         */
        public function column_coupon_code($item)
        {
        }
        // end column_coupon_code;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
    }
    /**
     * Domain List Table class.
     *
     * @since 2.0.0
     */
    class Domain_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Domains\\Domain_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Adds the extra search field when the search element is present.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_query_fields()
        {
        }
        // end get_extra_query_fields;
        /**
         * Displays the content of the domain column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Domain $item Domain object.
         * @return string
         */
        public function column_domain($item)
        {
        }
        // end column_domain;
        /**
         * Displays the content of the active column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Domain $item Domain object.
         * @return string
         */
        public function column_active($item)
        {
        }
        // end column_active;
        /**
         * Displays the content of the primary domain column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Domain $item Domain object.
         * @return string
         */
        public function column_primary_domain($item)
        {
        }
        // end column_primary_domain;
        /**
         * Displays the content of the secure column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Domain $item Domain object.
         * @return string
         */
        public function column_secure($item)
        {
        }
        // end column_secure;
        /**
         * Returns the markup for the stage column.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Domain $item The domain being displayed.
         * @return string
         */
        public function column_stage($item)
        {
        }
        // end column_stage;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
    }
    /**
     * Email List Table class.
     *
     * @since 2.0.0
     */
    class Email_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Emails\\Email_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Overrides the parent method to add pending sites.
         *
         * @since 2.0.0
         *
         * @param integer $per_page Number of items to display per page.
         * @param integer $page_number Current page.
         * @param boolean $count If we should count records or return the actual records.
         * @return array
         */
        public function get_items($per_page = 5, $page_number = 1, $count = false)
        {
        }
        // end get_items;
        /**
         * Displays the title of the email.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Email $item The email object.
         * @return string
         */
        public function column_title($item)
        {
        }
        // end column_title;
        /**
         * Displays the event of the email.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Email $item The email object.
         * @return string
         */
        public function column_event($item)
        {
        }
        // end column_event;
        /**
         * Displays the slug of the email.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Email $item The email object.
         * @return string
         */
        public function column_slug($item)
        {
        }
        // end column_slug;
        /**
         * Displays if the email is schedule for later send or not.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Email $item The email object.
         * @return string
         */
        public function column_schedule($item)
        {
        }
        // end column_schedule;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Handles the bulk processing adding duplication.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_single_action()
        {
        }
        // end process_single_action;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Returns the pre-selected filters on the filter bar.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
    }
    /**
     * Event List Table class.
     *
     * @since 2.0.0
     */
    class Event_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Events\\Event_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Returns the markup for the object_type column.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Event $item The event being displayed.
         * @return string
         */
        public function column_object_type($item)
        {
        }
        // end column_object_type;
        /**
         * Returns the markup for the initiator column.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Event $item The event being displayed.
         * @return string
         */
        public function column_initiator($item)
        {
        }
        // end column_initiator;
        /**
         * Returns the markup for the initiator column.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Event $item The event being displayed.
         * @return string
         */
        public function column_slug($item)
        {
        }
        // end column_slug;
        /**
         * Returns the markup for the message column.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Event $item The event being displayed.
         * @return string
         */
        public function column_message($item)
        {
        }
        // end column_message;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
    }
    /**
     * Site List Table class.
     *
     * @since 2.0.0
     */
    class Inside_Events_List_Table extends \WP_Ultimo\List_Tables\Event_List_Table
    {
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Renders the inside column responsive.
         *
         * @since 2.0.0
         *
         * @param object $item The item being rendered.
         * @return void
         */
        public function column_responsive($item)
        {
        }
    }
    /**
     * Payment List Table class.
     *
     * @since 2.0.0
     */
    class Line_Item_List_Table extends \WP_Ultimo\List_Tables\Payment_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Payments\\Payment_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Get the payment object.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Payment
         */
        public function get_payment()
        {
        }
        // end get_payment;
        /**
         * Overrides the parent get_items to add a total line.
         *
         * @since 2.0.0
         *
         * @param integer $per_page Items per page. This gets overridden as well.
         * @param integer $page_number The page number.
         * @param boolean $count Return as count or not.
         * @return array
         */
        public function get_items($per_page = 5, $page_number = 1, $count = false)
        {
        }
        // end get_items;
        /**
         * Displays the name of the product and description being hired.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Line_Item $item Payment object.
         * @return string
         */
        public function column_service($item)
        {
        }
        // end column_service;
        /**
         * Displays the tax rate for the item.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_unit_price($item)
        {
        }
        // end column_unit_price;
        /**
         * Displays the tax rate for the item.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_tax_total($item)
        {
        }
        // end column_tax_total;
        /**
         * Displays the tax rate for the item.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_discounts_total($item)
        {
        }
        // end column_discounts_total;
        /**
         * Displays the total column.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_total($item)
        {
        }
        // end column_total;
        /**
         * Displays the subtotal column.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_subtotal($item)
        {
        }
        // end column_subtotal;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Leaves no sortable items on the columns.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_sortable_columns()
        {
        }
    }
    /**
     * Product List Table class.
     *
     * @since 2.0.0
     */
    class Product_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Products\\Product_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Displays the content of the product column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Product $item Product object.
         * @return string
         */
        public function column_name($item)
        {
        }
        // end column_name;
        /**
         * Displays the type of the product.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Product $item Product object.
         * @return string
         */
        public function column_type($item)
        {
        }
        // end column_type;
        /**
         * Displays the slug of the product.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Product $item Product object.
         * @return string
         */
        public function column_slug($item)
        {
        }
        // end column_slug;
        /**
         * Displays the price of the product.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Product $item Product object.
         * @return string
         */
        public function column_amount($item)
        {
        }
        // end column_amount;
        /**
         * Displays the setup fee of the product.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Product $item Product object.
         * @return string
         */
        public function column_setup_fee($item)
        {
        }
        // end column_setup_fee;
        /**
         * Handles the bulk processing adding duplication.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_single_action()
        {
        }
        // end process_single_action;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Handles the item display for grid mode.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Product $item The line item being displayed.
         * @return void
         */
        public function single_row_grid($item)
        {
        }
        // end single_row_grid;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Returns the pre-selected filters on the filter bar.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
    }
    /**
     * Payment List Table class.
     *
     * @since 2.0.0
     */
    class Membership_Line_Item_List_Table extends \WP_Ultimo\List_Tables\Product_List_Table
    {
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Overrides the parent get_items to add a total line.
         *
         * @since 2.0.0
         *
         * @param integer $per_page Items per page. This gets overridden as well.
         * @param integer $page_number The page number.
         * @param boolean $count Return as count or not.
         * @return array
         */
        public function get_items($per_page = 5, $page_number = 1, $count = false)
        {
        }
        // end get_items;
        /**
         * Renders the inside column responsive.
         *
         * @since 2.0.0
         *
         * @param object $item The item being rendered.
         * @return void
         */
        public function column_responsive($item)
        {
        }
    }
    /**
     * Membership List Table class.
     *
     * @since 2.0.0
     */
    class Membership_List_Table_Widget extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Memberships\\Membership_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Uses the query class to return the items to be displayed.
         *
         * @since 2.0.0
         *
         * @param integer $per_page Number of items to display per page.
         * @param integer $page_number Current page.
         * @param boolean $count If we should count records or return the actual records.
         * @return array
         */
        public function get_items($per_page = 5, $page_number = 1, $count = false)
        {
        }
        // end get_items;
        /**
         * Adds the extra search field when the search element is present.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_query_fields()
        {
        }
        // end get_extra_query_fields;
        /**
         * Displays the membership reference code.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Membership $item Membership object.
         * @return string
         */
        public function column_hash($item)
        {
        }
        // end column_hash;
        /**
         * Displays the status of the membership.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Membership $item Membership object.
         * @return string
         */
        public function column_status($item)
        {
        }
        // end column_status;
        /**
         * Displays the price of the membership.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Membership $item Membership object.
         * @return string
         */
        public function column_amount($item)
        {
        }
        // end column_amount;
        /**
         * Displays the customer of the membership.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Membership $item Membership object.
         * @return string
         */
        public function column_customer($item)
        {
        }
        // end column_customer;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Overrides the parent method to include the custom ajax functionality for WP Ultimo.
         *
         * @since 2.0.0
         * @return void
         */
        public function _js_vars()
        {
        }
    }
    /**
     * Site List Table class.
     *
     * @since 2.0.0
     */
    class Memberships_Site_List_Table extends \WP_Ultimo\List_Tables\Customers_Site_List_Table
    {
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Renders the inside column responsive.
         *
         * @since 2.0.0
         *
         * @param object $item The item being rendered.
         * @return void
         */
        public function column_responsive($item)
        {
        }
    }
    /**
     * Payment List Table class.
     *
     * @since 2.0.0
     */
    class Payment_Line_Item_List_Table extends \WP_Ultimo\List_Tables\Line_Item_List_Table
    {
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Renders the inside column responsive.
         *
         * @since 2.0.0
         *
         * @param object $item The item being rendered.
         * @return void
         */
        public function column_responsive($item)
        {
        }
    }
    /**
     * Payment List Table class.
     *
     * @since 2.0.0
     */
    class Payment_List_Table_Widget extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Payments\\Payment_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Uses the query class to return the items to be displayed.
         *
         * @since 2.0.0
         *
         * @param integer $per_page Number of items to display per page.
         * @param integer $page_number Current page.
         * @param boolean $count If we should count records or return the actual records.
         * @return array
         */
        public function get_items($per_page = 5, $page_number = 1, $count = false)
        {
        }
        // end get_items;
        /**
         * Displays the payment reference code.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_hash($item)
        {
        }
        // end column_hash;
        /**
         * Displays the membership photo and special status.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_status($item)
        {
        }
        // end column_status;
        /**
         * Displays the customer of the membership.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Membership $item Membership object.
         * @return string
         */
        public function column_customer($item)
        {
        }
        // end column_customer;
        /**
         * Displays the column for the total amount of the payment.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Payment $item Payment object.
         * @return string
         */
        public function column_total($item)
        {
        }
        // end column_total;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return void.
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Overrides the parent method to include the custom ajax functionality for WP Ultimo.
         *
         * @since 2.0.0
         * @return void
         */
        public function _js_vars()
        {
        }
    }
    /**
     * Membership List Table class.
     *
     * @since 2.0.0
     */
    class Site_Customer_List_Table extends \WP_Ultimo\List_Tables\Customer_List_Table
    {
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Renders the inside column responsive.
         *
         * @since 2.0.0
         *
         * @param object $item The item being rendered.
         * @return void
         */
        public function column_responsive($item)
        {
        }
    }
    /**
     * Domain List Table class.
     *
     * @since 2.0.0
     */
    class Sites_Domain_List_Table extends \WP_Ultimo\List_Tables\Domain_List_Table
    {
        /**
         * Context widget.
         *
         * @since 2.0.0
         * @var string
         */
        public $context = 'widget';
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Renders the inside column responsive.
         *
         * @since 2.0.0
         *
         * @param object $item The item being rendered.
         * @return void
         */
        public function column_responsive($item)
        {
        }
    }
    /**
     * Webhook List Table class.
     *
     * @since 2.0.0
     */
    class Webhook_List_Table extends \WP_Ultimo\List_Tables\Base_List_Table
    {
        /**
         * Holds the query class for the object being listed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Webhooks\\Webhook_Query';
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Displays the content of the name column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Webhook $item Webhook object.
         * @return string
         */
        public function column_name($item)
        {
        }
        // end column_name;
        /**
         * Displays the content of the webhook url column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Webhook $item Webhook object.
         * @return string
         */
        public function column_webhook_url($item)
        {
        }
        // end column_webhook_url;
        /**
         * Displays the content of the event column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Webhook $item Webhook object.
         * @return string
         */
        public function column_event($item)
        {
        }
        // end column_event;
        /**
         * Displays the content of the count column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Webhook $item Webhook object.
         * @return string
         */
        public function column_count($item)
        {
        }
        // end column_count;
        /**
         * Displays the content of the integration column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Webhook $item Webhook object.
         * @return string
         */
        public function column_integration($item)
        {
        }
        // end column_integration;
        /**
         * Displays the content of the active column.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Webhook $item Webhook object.
         * @return string
         */
        public function column_active($item)
        {
        }
        // end column_active;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Returns the filters for this page.
         *
         * @since 2.0.0
         * @return boolean|array
         */
        public function get_filters()
        {
        }
    }
}
namespace WP_Ultimo\List_Tables\Customer_Panel {
    /**
     * Payment List Table class.
     *
     * @since 2.0.0
     */
    class Invoice_List_Table extends \WP_Ultimo\List_Tables\Payment_List_Table
    {
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Clears the bulk actions.
         *
         * @since 2.0.0
         *
         * @param string $which Top or bottom.
         * @return array
         */
        public function bulk_actions($which = '')
        {
        }
    }
    /**
     * Product List Table class.
     *
     * @since 2.0.0
     */
    class Product_List_Table extends \WP_Ultimo\List_Tables\Product_List_Table
    {
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Resets the filters.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Resets bulk actions.
         *
         * @since 2.0.0
         *
         * @param string $which Top or bottom.
         * @return array
         */
        public function bulk_actions($which = '')
        {
        }
        // end bulk_actions;
        /**
         * Renders the customer card for grid mode.
         *
         * @since 2.0.0
         *
         * @param WP_Ultimo\Models\Customer $item The customer being shown.
         * @return void
         */
        public function single_row_grid($item)
        {
        }
    }
    /**
     * Site List Table class.
     *
     * @since 2.0.0
     */
    class Site_List_Table extends \WP_Ultimo\List_Tables\Site_List_Table
    {
        /**
         * Initializes the table.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Returns the list of columns for this particular List Table.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_columns()
        {
        }
        // end get_columns;
        /**
         * Clears filters.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_filters()
        {
        }
        // end get_filters;
        /**
         * Clears views.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_views()
        {
        }
        // end get_views;
        /**
         * Get the extra fields based on the request.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_fields()
        {
        }
    }
}
namespace WP_Ultimo\Loaders {
    /**
     * Registers our custom tables.
     *
     * @since 2.0.0
     */
    class Table_Loader
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Loads the table objects for our custom tables.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Returns all the table objects.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_tables()
        {
        }
        // end get_tables;
        /**
         * Checks if we have all the tables installed.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_installed()
        {
        }
    }
}
namespace WP_Ultimo\Managers {
    /**
     * Adds a lighter ajax option to WP Ultimo.
     *
     * @since 1.9.14
     */
    class Base_Manager
    {
    }
    /**
     * Handles the ajax form registering, rendering, and permissions checking.
     *
     * @since 2.0.0
     */
    class Block_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds wp-ultimo as a Block category on Gutenberg.
         *
         * @since 2.0.0
         *
         * @param array    $categories List of categories.
         * @param \WP_Post $post Post being edited.
         * @return array
         */
        public function add_wp_ultimo_block_category($categories, $post)
        {
        }
    }
    /**
     * Handles processes related to products.
     *
     * @since 2.0.0
     */
    class Broadcast_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'broadcast';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Broadcast';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Add unseen broadcast messages.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_unseen_broadcast_notices()
        {
        }
        // end add_unseen_broadcast_notices;
        /**
         * Handles the broadcast message send via modal.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function handle_broadcast()
        {
        }
        // end handle_broadcast;
        /**
         * Saves the broadcast message in the database
         *
         * @since 2.0.0
         *
         * @param array $args With the message arguments.
         * @return Broadcast|\WP_Error
         */
        public function save_broadcast($args)
        {
        }
        // end save_broadcast;
        /**
         * Returns targets for a specific broadcast.
         *
         * @since 2.0.0
         *
         * @param string $object_id The broadcast object id.
         * @param string $type The broadcast target type.
         * @return array Return the broadcast targets for the specific type.
         */
        public function get_broadcast_targets($object_id, $type)
        {
        }
        // end get_broadcast_targets;
        /**
         * Returns all customer from targets.
         *
         * @since 2.0.0
         *
         * @param string $object_id The broadcast object id.
         * @return array Return the broadcast targets for the specific type.
         */
        public function get_all_notice_customer_targets($object_id)
        {
        }
    }
    /**
     * Handles processes related to checkout forms.
     *
     * @since 2.0.0
     */
    class Checkout_Form_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'checkout_form';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Checkout_Form';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
    }
    /**
     * Handles processes related to webhooks.
     *
     * @since 2.0.0
     */
    class Customer_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'customer';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Customer';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Handle the resend verification email ajax action.
         *
         * @since 2.0.4
         * @return void
         */
        public function handle_resend_verification_email()
        {
        }
        // end handle_resend_verification_email;
        /**
         * Handle heartbeat response sent.
         *
         * @since 2.0.0
         *
         * @param array $response The Heartbeat response.
         * @return array $response The Heartbeat response
         */
        public function on_heartbeat_send($response)
        {
        }
        // end on_heartbeat_send;
        /**
         * Saves the IP address and last_login date onto the user.
         *
         * @since 2.0.0
         *
         * @param WP_User $user The WP User object of the user that logged in.
         * @return void
         */
        public function log_ip_and_last_login($user)
        {
        }
        // end log_ip_and_last_login;
        /**
         * Watches the change in customer verification status to take action when needed.
         *
         * @since 2.0.0
         *
         * @param string  $old_status The old status of the customer verification.
         * @param string  $new_status The new status of the customer verification.
         * @param integer $customer_id Customer ID.
         * @return void
         */
        public function transition_customer_email_verification($old_status, $new_status, $customer_id)
        {
        }
        // end transition_customer_email_verification;
        /**
         * Verifies a customer by checking the email key.
         *
         * If only one membership is available and that's pending,
         * we set it to active. That will trigger the publication of
         * pending websites as well.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_verify_email_address()
        {
        }
        // end maybe_verify_email_address;
        /**
         * Maybe adds the customer to the main site.
         *
         * @since 2.0.0
         *
         * @param Customer $customer The customer object.
         * @param Checkout $checkout The checkout object.
         * @return void
         */
        public function maybe_add_to_main_site($customer, $checkout)
        {
        }
    }
    /**
     * Handles processes related to events.
     *
     * @since 2.0.0
     */
    class Discount_Code_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'discount_code';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Discount_Code';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Listens for payments received in order to increase the discount code uses.
         *
         * @since 2.0.4
         *
         * @param \WP_Ultimo\Models\Payment $payment The payment received.
         * @return void
         */
        public function maybe_add_use_on_payment_received($payment)
        {
        }
    }
    /**
     * Handles processes related to domain mappings.
     *
     * @since 2.0.0
     */
    class Domain_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'domain';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Domain';
        /**
         * Holds a list of the current integrations for domain mapping.
         *
         * @since 2.0.0
         * @var array
         */
        protected $integrations = array();
        /**
         * Returns the list of available host integrations.
         *
         * This needs to be a filterable method to allow integrations to self-register.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_integrations()
        {
        }
        // end get_integrations;
        /**
         * Get the instance of one of the integrations classes.
         *
         * @since 2.0.0
         *
         * @param string $id The id of the integration. e.g. runcloud.
         * @return WP_Ultimo\Integrations\Host_Providers\Base_Host_Provider
         */
        public function get_integration_instance($id)
        {
        }
        // end get_integration_instance;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Triggers subdomain mapping events on site creation.
         *
         * @since 2.0.0
         *
         * @param \WP_Site $site The site being added.
         * @return void
         */
        public function handle_site_created($site)
        {
        }
        // end handle_site_created;
        /**
         * Triggers subdomain mapping events on site deletion.
         *
         * @since 2.0.0
         *
         * @param \WP_Site $site The site being removed.
         * @return void
         */
        public function handle_site_deleted($site)
        {
        }
        // end handle_site_deleted;
        /**
         * Triggers the do_event of the payment successful.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Domain     $domain The domain.
         * @param \WP_Ultimo\Models\Site       $site The site.
         * @param \WP_Ultimo\Models\Membership $membership The membership.
         * @return void
         */
        public function handle_domain_created($domain, $site, $membership)
        {
        }
        // end handle_domain_created;
        /**
         * Remove send domain removal event.
         *
         * @since 2.0.0
         *
         * @param boolean                  $result The result of the deletion.
         * @param \WP_Ultimo\Models\Domain $domain The domain being deleted.
         * @return void
         */
        public function handle_domain_deleted($result, $domain)
        {
        }
        // end handle_domain_deleted;
        /**
         * Add all domain mapping settings.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_domain_mapping_settings()
        {
        }
        // end add_domain_mapping_settings;
        /**
         * Returns the default instructions for domain mapping.
         *
         * @since 2.0.0
         * @return string
         */
        public function default_domain_mapping_instructions()
        {
        }
        // end default_domain_mapping_instructions;
        /**
         * Gets the instructions, filtered and without the shortcodes.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_domain_mapping_instructions()
        {
        }
        // end get_domain_mapping_instructions;
        /**
         * Creates the event to save the transition.
         *
         * @since 2.0.0
         *
         * @param mixed $old_value The old value, before the transition.
         * @param mixed $new_value The new value, after the transition.
         * @param int   $item_id The id of the element transitioning.
         * @return void
         */
        public function send_domain_to_host($old_value, $new_value, $item_id)
        {
        }
        // end send_domain_to_host;
        /**
         * Checks the DNS and SSL status of a domain.
         *
         * @since 2.0.0
         *
         * @param int $domain_id The domain mapping ID.
         * @param int $tries Number of tries.
         * @return void
         */
        public function async_process_domain_stage($domain_id, $tries = 0)
        {
        }
        // end async_process_domain_stage;
        /**
         * Alternative implementation for PHP's native dns_get_record.
         *
         * @since 2.0.0
         * @param string $domain The domain to check.
         * @return array
         */
        public static function dns_get_record($domain)
        {
        }
        // end dns_get_record;
        /**
         * Get the DNS records for a given domain.
         *
         * @since 2.0.0
         * @return void
         */
        public function get_dns_records()
        {
        }
        // end get_dns_records;
        /**
         * Takes the list of domains and set them to non-primary when a new primary is added.
         *
         * This is triggered when a new domain is added as primary_domain.
         *
         * @since 2.0.0
         *
         * @param array $domains List of domain ids.
         * @return void
         */
        public function async_remove_old_primary_domains($domains)
        {
        }
        // end async_remove_old_primary_domains;
        /**
         * Tests the integration in the Wizard context.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function test_integration()
        {
        }
        // end test_integration;
        /**
         * Loads all the host provider integrations we have available.
         *
         * @since 2.0.0
         * @return void
         */
        public function load_integrations()
        {
        }
    }
    /**
     * Handles processes related to emails.
     *
     * @since 2.0.0
     */
    class Email_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'email';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Email';
        /**
         * All default system emails and their original content.
         *
         * @since 2.0.0
         * @var array
         */
        protected $registered_default_system_emails;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Send the email related to the current event.
         *
         * @param string $slug Slug of the event.
         * @param array  $payload Payload of the event.
         * @return void.
         */
        public function send_system_email($slug, $payload)
        {
        }
        // end send_system_email;
        /**
         * Attach a file by a URL
         *
         * @since 2.0.0
         *
         * @param string $file_url The URL of the file to attach.
         * @param string $file_name The name to save the file with.
         * @param string $email_subject The email subject, to avoid attaching a file to the wrong email.
         * @return void
         */
        public function attach_file_by_url($file_url, $file_name, $email_subject = '')
        {
        }
        // end attach_file_by_url;
        /**
         * Add all email fields.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_email_fields()
        {
        }
        // end add_email_fields;
        /**
         * Register in the global variable all the default system emails.
         *
         * @since 2.0.0
         *
         * @param array $args System email params.
         * @return void.
         */
        public function register_default_system_email($args)
        {
        }
        // end register_default_system_email;
        /**
         * Create a system email.
         *
         * @since 2.0.0
         *
         * @param array $args with the system email details to register.
         * @return bool
         */
        public function create_system_email($args)
        {
        }
        // end create_system_email;
        /**
         * Register all default system emails.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function create_all_system_emails()
        {
        }
        // end create_all_system_emails;
        /**
         * Register all default system emails.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function register_all_default_system_emails()
        {
        }
        // end register_all_default_system_emails;
        /**
         * Get a single or all default registered system emails.
         *
         * @since 2.0.0
         *
         * @param string $slug Default system email slug.
         * @return array All default system emails.
         */
        public function get_default_system_emails($slug = '')
        {
        }
        // end get_default_system_emails;
        /**
         * Check if the system email already exists.
         *
         * @param mixed $slug Email slug to use as reference.
         * @return Base_Model|false Return email object or false.
         */
        public function is_created($slug)
        {
        }
        // end is_created;
        /**
         * Get the default template email.
         *
         * @since 2.0.0
         *
         * @param string $slug With the event slug.
         * @return array With the email template.
         */
        public function get_event_placeholders($slug = '')
        {
        }
        // end get_event_placeholders;
        /**
         * Sends a schedule email.
         *
         * @since 2.0.0
         *
         * @param array  $to Email targets.
         * @param string $subject Email subject.
         * @param string $template Email content.
         * @param array  $headers Email headers.
         * @param array  $attachments Email attachments.
         * @return mixed
         */
        public function send_schedule_system_email($to, $subject, $template, $headers, $attachments)
        {
        }
        // end send_schedule_system_email;
        /**
         * Log failures on the WordPress mailer, just so we have a copy of the issues for debugging.
         *
         * @since 2.0.0
         *
         * @param WP_Error $error The error with the mailer.
         * @return void.
         */
        public function log_mailer_failure($error)
        {
        }
    }
    /**
     * Handles processes related to events.
     *
     * @since 2.0.0
     */
    class Event_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'event';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Event';
        /**
         * Holds the list of available events for webhooks.
         *
         * @since 2.0.0
         * @var array
         */
        protected $events = array();
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Returns the payload to be displayed in the payload preview field.
         * Log model transitions.
         *
         * @since 2.0.0
         *
         * @param string     $model The model name.
         * @param array      $data The data being saved, serialized.
         * @param array      $data_unserialized The data being saved, un-serialized.
         * @param Base_Model $object The object being saved.
         * @return void
         */
        public function log_transitions($model, $data, $data_unserialized, $object)
        {
        }
        // end log_transitions;
        /**
         * Returns the payload to be displayed in the payload preview field.
         *
         * @since 2.0.0
         * @return void
         */
        public function event_payload_preview()
        {
        }
        // end event_payload_preview;
        /**
         * Returns the list of event types to register.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_event_type_as_options()
        {
        }
        // end get_event_type_as_options;
        /**
         * Add a new event.
         *
         * @since 2.0.0
         *
         * @param string $slug The slug of the event. Something like payment_received.
         * @param array  $payload with the events information.
         *
         * @return array with returns message for now.
         */
        public function do_event($slug, $payload)
        {
        }
        // end do_event;
        /**
         * Register a new event to be used as param.
         *
         * @since 2.0.0
         *
         * @param string $slug The slug of the event. Something like payment_received.
         * @param array  $args with the events information.
         *
         * @return true
         */
        public function register_event($slug, $args)
        {
        }
        // end register_event;
        /**
         * Returns the list of available webhook events.
         *
         * @since 2.0.0
         * @return array $events with all events.
         */
        public function get_events()
        {
        }
        // end get_events;
        /**
         * Returns the list of available webhook events.
         *
         * @since 2.0.0
         *
         * @param string $slug of the event.
         * @return array $event with event params.
         */
        public function get_event($slug)
        {
        }
        // end get_event;
        /**
         * Saves event in the database.
         *
         * @param string $slug of the event.
         * @param array  $payload with event params.
         * @return void.
         */
        public function save_event($slug, $payload)
        {
        }
        // end save_event;
        /**
         * Registers the list of default events.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_all_events()
        {
        }
        // end register_all_events;
        /**
         * Every day, deletes old events that we don't want to keep.
         *
         * @since 2.0.0
         * @return bool
         */
        public function clean_old_events()
        {
        }
        // end clean_old_events;
        /**
         * Create a endpoint to retrieve all available event hooks.
         *
         * @since 2.0.0
         *
         * @return mixed
         */
        public function hooks_endpoint()
        {
        }
        // end hooks_endpoint;
        /**
         * Return all event types for the REST API request.
         *
         * @since 2.0.0
         *
         * @param WP_REST_Request $request The request sent.
         * @return mixed
         */
        public function get_hooks_rest($request)
        {
        }
    }
    /**
     * Keeps track of registered field templates.
     *
     * @since 2.0.0
     */
    class Field_Templates_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Initialize the managers with the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Serve the HTML markup for the templates.
         *
         * @since 2.0.0
         * @return void
         */
        public function serve_field_template()
        {
        }
        // end serve_field_template;
        /**
         * Returns the list of registered signup field types.
         *
         * Developers looking for add new types of fields to the signup
         * should use the filter wu_checkout_forms_field_types to do so.
         *
         * @see wu_checkout_forms_field_types
         *
         * @since 2.0.0
         * @return array
         */
        public function get_field_templates()
        {
        }
        // end get_field_templates;
        /**
         * Get the field templates for a field type. Returns only the class names.
         *
         * @since 2.0.0
         *
         * @param string $field_type The field type id.
         * @return array
         */
        public function get_templates($field_type)
        {
        }
        // end get_templates;
        /**
         * Get the instance of the template class.
         *
         * @since 2.0.0
         *
         * @param string $field_type The field type id.
         * @param string $field_template_id The field template id.
         * @return object
         */
        public function get_template_class($field_type, $field_template_id)
        {
        }
        // end get_template_class;
        /**
         * Returns the field templates as a key => title array of options.
         *
         * @since 2.0.0
         *
         * @param string $field_type The field type id.
         * @return array
         */
        public function get_templates_as_options($field_type)
        {
        }
        // end get_templates_as_options;
        /**
         * Returns the field templates as a key => info_array array of fields.
         *
         * @since 2.0.0
         *
         * @param string $field_type The field type id.
         * @return array
         */
        public function get_templates_info($field_type)
        {
        }
        // end get_templates_info;
        /**
         * Instantiate a field template.
         *
         * @since 2.0.0
         *
         * @param string $class_name The class name.
         * @return \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
         */
        public function instantiate_field_template($class_name)
        {
        }
        // end instantiate_field_template;
        /**
         * Returns an array with all fields, instantiated.
         *
         * @since 2.0.0
         * @param string $field_type The field type id.
         * @return array
         */
        public function get_instantiated_field_types($field_type)
        {
        }
        // end get_instantiated_field_types;
        /**
         * Render preview block.
         *
         * @since 2.0.0
         *
         * @param string $field_type The field type id.
         * @return string
         */
        public function render_preview_block($field_type)
        {
        }
    }
    /**
     * Handles the ajax form registering, rendering, and permissions checking.
     *
     * @since 2.0.0
     */
    class Form_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Keeps the registered forms.
         *
         * @since 2.0.0
         * @var array
         */
        protected $registered_forms = array();
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Displays the form unavailable message.
         *
         * This is returned when the form doesn't exist, or the
         * logged user doesn't have the required permissions to see the form.
         *
         * @since 2.0.0
         * @param \WP_Error|false $error Error message, if applicable.
         * @return void
         */
        public function display_form_unavailable($error = false)
        {
        }
        // end display_form_unavailable;
        /**
         * Renders a registered form, when requested.
         *
         * @since 2.0.0
         * @return void
         */
        public function display_form()
        {
        }
        // end display_form;
        /**
         * Handles the submission of a registered form.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_form()
        {
        }
        // end handle_form;
        /**
         * Checks that the form exists and that the user has permission to see it.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function security_checks()
        {
        }
        // end security_checks;
        /**
         * Returns a list of all the registered gateways.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_registered_forms()
        {
        }
        // end get_registered_forms;
        /**
         * Checks if a form is already registered.
         *
         * @since 2.0.0
         *
         * @param string $id The id of the form.
         * @return boolean
         */
        public function is_form_registered($id)
        {
        }
        // end is_form_registered;
        /**
         * Returns a registered form.
         *
         * @since 2.0.0
         *
         * @param string $id The id of the form to return.
         * @return array
         */
        public function get_form($id)
        {
        }
        // end get_form;
        /**
         * Registers a new Ajax Form.
         *
         * Ajax forms are forms that get loaded via an ajax call using thickbox (or rather our fork).
         * This is useful for displaying inline edit forms that support Vue and our
         * Form/Fields API.
         *
         * @since 2.0.0
         *
         * @param string $id Form id.
         * @param array  $atts Form attributes, check wp_parse_atts call below.
         * @return void
         */
        public function register_form($id, $atts = array())
        {
        }
        // end register_form;
        /**
         * Returns the ajax URL for a given form.
         *
         * @since 2.0.0
         *
         * @param string $form_id The id of the form to return.
         * @param array  $atts List of parameters, check wp_parse_args below.
         * @return string
         */
        public function get_form_url($form_id, $atts = array())
        {
        }
        // end get_form_url;
        /**
         * Register the confirmation modal form to delete a customer.
         *
         * @since 2.0.0
         */
        public function register_action_forms()
        {
        }
        // end register_action_forms;
        /**
         * Renders the deletion confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_model_delete_form()
        {
        }
        // end render_model_delete_form;
        /**
         * Handles the deletion of customer.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_model_delete_form()
        {
        }
        // end handle_model_delete_form;
        /**
         * Renders the deletion confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_bulk_action_form()
        {
        }
        // end render_bulk_action_form;
        /**
         * Handles the deletion of customer.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_bulk_action_form()
        {
        }
        // end handle_bulk_action_form;
        /**
         * Default handler for bulk actions.
         *
         * @since 2.0.0
         *
         * @param string $action The action.
         * @param string $model The model.
         * @param array  $ids The ids list.
         * @return void
         */
        public function default_bulk_action_handler($action, $model, $ids)
        {
        }
    }
    /**
     * Manages the registering and activation of gateways.
     *
     * @since 2.0.0
     */
    class Gateway_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Lists the registered gateways.
         *
         * @since 2.0.0
         * @var array
         */
        protected $registered_gateways = array();
        /**
         * Lists the gateways that are enabled.
         *
         * @since 2.0.0
         * @var array
         */
        protected $enabled_gateways = array();
        /**
         * Keeps a list of the gateways with auto-renew.
         *
         * @since 2.0.0
         * @var array
         */
        protected $auto_renewable_gateways = array();
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Runs after all plugins have been loaded to allow for add-ons to hook into it correctly.
         *
         * @since 2.0.0
         * @return void
         */
        public function on_load()
        {
        }
        // end on_load;
        /**
         * Checks if we need to process webhooks received by gateways.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_process_webhooks()
        {
        }
        // end maybe_process_webhooks;
        /**
         * Checks if we need to process webhooks received by legacy gateways.
         *
         * @since 2.0.4
         * @return void
         */
        public function maybe_process_v1_webhooks()
        {
        }
        // end maybe_process_v1_webhooks;
        /**
         * Let gateways deal with their confirmation steps.
         *
         * This is the case for PayPal Express.
         *
         * @since 2.0.0
         * @return void
         */
        public function process_gateway_confirmations()
        {
        }
        // end process_gateway_confirmations;
        /**
         * Adds the field that enabled and disables Payment Gateways on the settings.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_gateway_selector_field()
        {
        }
        // end add_gateway_selector_field;
        /**
         * Returns the list of registered gateways as options for the gateway selector setting.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_gateways_as_options()
        {
        }
        // end get_gateways_as_options;
        /**
         * Loads the default gateways.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_default_gateways()
        {
        }
        // end add_default_gateways;
        /**
         * Checks if a gateway was already registered.
         *
         * @since 2.0.0
         * @param string $id The id of the gateway.
         * @return boolean
         */
        public function is_gateway_registered($id)
        {
        }
        // end is_gateway_registered;
        /**
         * Returns a list of all the registered gateways
         *
         * @since 2.0.0
         * @return array
         */
        public function get_registered_gateways()
        {
        }
        // end get_registered_gateways;
        /**
         * Returns a particular Gateway registered
         *
         * @since 2.0.0
         * @param string $id The id of the gateway.
         * @return array
         */
        public function get_gateway($id)
        {
        }
        // end get_gateway;
        /**
         * Adds a new Gateway to the System. Used by gateways to make themselves visible.
         *
         * @since 2.0.0
         *
         * @param string $id ID of the gateway. This is how we will identify the gateway in the system.
         * @param string $title Name of the gateway.
         * @param string $desc A description of the gateway to help super admins understand what services they integrate with.
         * @param string $class_name Gateway class name.
         * @param bool   $hidden If we need to hide this gateway publicly.
         * @return bool
         */
        public function register_gateway($id, $title, $desc, $class_name, $hidden = false)
        {
        }
        // end register_gateway;
        /**
         * Adds additional hooks for each of the gateway registered.
         *
         * @since 2.0.0
         *
         * @param string $class_name Gateway class name.
         * @return void
         */
        public function install_hooks($class_name)
        {
        }
        // end install_hooks;
        /**
         * Returns an array with the list of gateways that support auto-renew.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_auto_renewable_gateways()
        {
        }
    }
    /**
     * Handles processes related to products.
     *
     * @since 2.0.0
     */
    class Job_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
    }
    /**
     * Handles processes related to limitations.
     *
     * @since 2.0.0
     */
    class Limitation_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Handles async plugin activation and deactivation.
         *
         * @since 2.0.0
         *
         * @param string       $action The action to perform, can be either 'activate' or 'deactivate'.
         * @param int          $site_id The site ID.
         * @param string|array $plugins The plugin or list of plugins to (de)activate.
         * @param boolean      $network_wide If we want to (de)activate it network-wide.
         * @param boolean      $silent IF we should do the process silently - true by default.
         * @return bool
         */
        public function async_handle_plugins($action, $site_id, $plugins, $network_wide = false, $silent = true)
        {
        }
        // end async_handle_plugins;
        /**
         * Switch themes via Job Queue.
         *
         * @since 2.0.0
         *
         * @param int    $site_id The site ID.
         * @param string $theme_stylesheet The theme stylesheet.
         * @return true
         */
        public function async_switch_theme($site_id, $theme_stylesheet)
        {
        }
        // end async_switch_theme;
        /**
         * Register the modal windows to confirm resetting the limitations.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the upgrade to unlock modal screen.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_upgrade_to_unlock()
        {
        }
        // end render_upgrade_to_unlock;
        /**
         * Handles the upgrade to unlock modal screen submission.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_upgrade_to_unlock()
        {
        }
        // end handle_upgrade_to_unlock;
        /**
         * Renders the conformation modal to reset limitations.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_confirm_limitations_reset()
        {
        }
        // end render_confirm_limitations_reset;
        /**
         * Handles the reset of permissions.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_confirm_limitations_reset()
        {
        }
        // end handle_confirm_limitations_reset;
        /**
         * Returns the type of the object that has limitations.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Trait\Trait_Limitable $object Model to test.
         * @return string
         */
        public function get_object_type($object)
        {
        }
        // end get_object_type;
        /**
         * Injects the limitations panels when necessary.
         *
         * @since 2.0.0
         *
         * @param array                                   $sections List of tabbed widget sections.
         * @param \WP_Ultimo\Models\Trait\Trait_Limitable $object The model being edited.
         * @return array
         */
        public function add_limitation_sections($sections, $object)
        {
        }
        // end add_limitation_sections;
        /**
         * Generates the override notice.
         *
         * @since 2.0.0
         *
         * @param boolean $show Wether or not to show the field.
         * @param array   $additional_checks Array containing javascript conditions that need to be met.
         * @return array
         */
        protected function override_notice($show = false, $additional_checks = array())
        {
        }
        // end override_notice;
        /**
         * Register the user roles fields
         *
         * @since 2.0.0
         *
         * @param array                                   $sections Sections and fields.
         * @param \WP_Ultimo\Models\Trait\Trait_Limitable $object The object being edit.
         * @return void
         */
        public function register_user_fields(&$sections, $object)
        {
        }
        // end register_user_fields;
        /**
         * Register the post type fields
         *
         * @since 2.0.0
         *
         * @param array                                   $sections Sections and fields.
         * @param \WP_Ultimo\Models\Trait\Trait_Limitable $object The object being edit.
         * @return void
         */
        public function register_post_type_fields(&$sections, $object)
        {
        }
        // end register_post_type_fields;
        /**
         * Returns the list of fields for the site tab.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Trait\Trait_Limitable $object The model being edited.
         * @return array
         */
        protected function get_sites_fields($object)
        {
        }
        // end get_sites_fields;
        /**
         * Returns the HTML markup for the plugin selector list.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Trait\Trait_Limitable $object The model being edited.
         * @return string
         */
        public function get_plugin_selection_list($object)
        {
        }
        // end get_plugin_selection_list;
        /**
         * Returns the HTML markup for the plugin selector list.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Trait\Trait_Limitable $object The model being edited.
         * @param array                                   $section The section array.
         * @return string
         */
        public function get_theme_selection_list($object, &$section)
        {
        }
        // end get_theme_selection_list;
        /**
         * Returns a list of all plugins available as options, excluding WP Ultimo.
         *
         * We also exclude a couple more.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_all_plugins()
        {
        }
        // end get_all_plugins;
        /**
         * Returns a list of all themes available as options, after filtering.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_all_themes()
        {
        }
        // end get_all_themes;
        /**
         * Returns the exclusion list for plugins.
         *
         * We don't want people forcing WP Ultimo to be deactivated, do we?
         *
         * @since 2.0.0
         * @return array
         */
        protected function plugin_exclusion_list()
        {
        }
        // end plugin_exclusion_list;
        /**
         * Returns the exclusion list for themes.
         *
         * @since 2.0.0
         * @return array
         */
        protected function theme_exclusion_list()
        {
        }
    }
    /**
     * Handles processes related to memberships.
     *
     * @since 2.0.0
     */
    class Membership_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'membership';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Membership';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Processes a delayed site publish action.
         *
         * @since 2.0.0
         *
         * @param int $membership_id The membership id.
         * @return bool|\WP_Error
         */
        public function async_publish_pending_site($membership_id)
        {
        }
        // end async_publish_pending_site;
        /**
         * Processes a membership swap.
         *
         * @since 2.0.0
         *
         * @param int $membership_id The membership id.
         * @return bool|\WP_Error
         */
        public function async_membership_swap($membership_id)
        {
        }
        // end async_membership_swap;
        /**
         * Watches the change in payment status to take action when needed.
         *
         * @todo Publishing sites should be done in async.
         *
         * @since 2.0.0
         *
         * @param string  $old_status The old status of the membership.
         * @param string  $new_status The new status of the membership.
         * @param integer $membership_id Payment ID.
         * @return void
         */
        public function transition_membership_status($old_status, $new_status, $membership_id)
        {
        }
        // end transition_membership_status;
        /**
         * Mark the membership date of cancellation.
         *
         * @since 2.0.0
         *
         * @param string $old_value Old status value.
         * @param string $new_value New status value.
         * @param int    $item_id The membership id.
         * @return void
         */
        public function mark_cancelled_date($old_value, $new_value, $item_id)
        {
        }
        // end mark_cancelled_date;
        /**
         * Transfer a membership from a user to another.
         *
         * @since 2.0.0
         *
         * @param int $membership_id The ID of the membership being transferred.
         * @param int $target_customer_id The new owner.
         * @return mixed
         */
        public function async_transfer_membership($membership_id, $target_customer_id)
        {
        }
        // end async_transfer_membership;
        /**
         * Delete a membership.
         *
         * @since 2.0.0
         *
         * @param int $membership_id The ID of the membership being deleted.
         * @return mixed
         */
        public function async_delete_membership($membership_id)
        {
        }
    }
    /**
     * Handles processes related to notes.
     *
     * @since 2.0.0
     */
    class Notes_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'notes';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Notes';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Register ajax forms that we use for object.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Add all domain mapping settings.
         *
         * @since 2.0.0
         *
         * @param array  $sections Array sections.
         * @param object $object   The object.
         *
         * @return array
         */
        public function add_notes_options_section($sections, $object)
        {
        }
        // end add_notes_options_section;
        /**
         * Renders the notes form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_add_note_modal()
        {
        }
        // end render_add_note_modal;
        /**
         * Handles the notes form.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_add_note_modal()
        {
        }
        // end handle_add_note_modal;
        /**
         * Renders the clear notes confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_clear_notes_modal()
        {
        }
        // end render_clear_notes_modal;
        /**
         * Handles the clear notes modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_clear_notes_modal()
        {
        }
        // end handle_clear_notes_modal;
        /**
         * Renders the delete note confirmation form.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_delete_note_modal()
        {
        }
        // end render_delete_note_modal;
        /**
         * Handles the delete note modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_delete_note_modal()
        {
        }
    }
    /**
     * Handles processes related to notifications.
     *
     * @since 2.0.0
     */
    class Notification_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Hide notifications on subsites if settings was enabled.
         *
         * @since 2.0.0
         * @return void
         */
        public function hide_notifications_subsites()
        {
        }
        // end hide_notifications_subsites;
        /**
         * Keeps the allowed callbacks.
         *
         * @since 2.0.0
         *
         * @param array $callbacks The callbacks attached.
         * @return array
         */
        public function clear_callback_list($callbacks)
        {
        }
        // end clear_callback_list;
        /**
         * Filter the WP Ultimo settings to add Notifications Options
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function add_settings()
        {
        }
    }
    /**
     * Handles processes related to payments.
     *
     * @since 2.0.0
     */
    class Payment_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'payment';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Payment';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Triggers the do_event of the payment successful.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Payment        $payment The payment.
         * @param \WP_Ultimo\Models\Membership     $membership The membership.
         * @param \WP_Ultimo\Gateways\Base_Gateway $gateway The gateway.
         * @return void
         */
        public function handle_payment_success($payment, $membership, $gateway)
        {
        }
        // end handle_payment_success;
        /**
         * Adds an init endpoint to render the invoices.
         *
         * @todo rewrite this to use rewrite rules.
         * @since 2.0.0
         * @return void
         */
        public function invoice_viewer()
        {
        }
        // end invoice_viewer;
        /**
         * Transfer a payment from a user to another.
         *
         * @since 2.0.0
         *
         * @param int $payment_id The ID of the payment being transferred.
         * @param int $target_customer_id The new owner.
         * @return mixed
         */
        public function async_transfer_payment($payment_id, $target_customer_id)
        {
        }
        // end async_transfer_payment;
        /**
         * Delete a payment.
         *
         * @since 2.0.0
         *
         * @param int $payment_id The ID of the payment being deleted.
         * @return mixed
         */
        public function async_delete_payment($payment_id)
        {
        }
        // end async_delete_payment;
        /**
         * Watches the change in payment status to take action when needed.
         *
         * @since 2.0.0
         *
         * @param string  $old_status The old status of the payment.
         * @param string  $new_status The new status of the payment.
         * @param integer $payment_id Payment ID.
         * @return void
         */
        public function transition_payment_status($old_status, $new_status, $payment_id)
        {
        }
    }
    /**
     * Handles processes related to products.
     *
     * @since 2.0.0
     */
    class Product_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'product';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Product';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
    }
    /**
     * Keeps track of the registered signup field types.
     *
     * @since 2.0.0
     */
    class Signup_Fields_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Keeps the instantiated fields.
         *
         * @since 2.0.0
         * @var array
         */
        protected $instantiated_field_types;
        /**
         * Returns the list of registered signup field types.
         *
         * Developers looking for add new types of fields to the signup
         * should use the filter wu_checkout_forms_field_types to do so.
         *
         * @see wu_checkout_forms_field_types
         *
         * @since 2.0.0
         * @return array
         */
        public function get_field_types()
        {
        }
        // end get_field_types;
        /**
         * Instantiate a field type.
         *
         * @since 2.0.0
         *
         * @param string $class_name The class name.
         * @return \WP_Ultimo\Checkout\Signup_Fields\Base_Signup_Field
         */
        public function instantiate_field_type($class_name)
        {
        }
        // end instantiate_field_type;
        /**
         * Returns an array with all fields, instantiated.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_instantiated_field_types()
        {
        }
        // end get_instantiated_field_types;
        /**
         * Returns a list of all the required fields that must be present on a CF.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_required_fields()
        {
        }
        // end get_required_fields;
        /**
         * Returns a list of all the user fields.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_user_fields()
        {
        }
        // end get_user_fields;
        /**
         * Returns a list of all the site fields.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_site_fields()
        {
        }
        // end get_site_fields;
        /**
         * Returns a list of all editor fields registered.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_all_editor_fields()
        {
        }
    }
    /**
     * Handles processes related to sites.
     *
     * @since 2.0.0
     */
    class Site_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'site';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Site';
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Triggers the do_event of the site publish successful.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Site       $site The site.
         * @param \WP_Ultimo\Models\Membership $membership The payment.
         * @return void
         */
        public function handle_site_published($site, $membership)
        {
        }
        // end handle_site_published;
        /**
         * Locks the site front-end if the site is not public.
         *
         * @todo Let the admin chose the behavior. Maybe redirect to main site?
         *
         * @since 2.0.0
         * @return void
         */
        public function lock_site()
        {
        }
        // end lock_site;
        /**
         * Takes screenshots asynchronously.
         *
         * @since 2.0.0
         *
         * @param int $site_id The site ID.
         * @return mixed
         */
        public function async_get_site_screenshot($site_id)
        {
        }
        // end async_get_site_screenshot;
        /**
         * Listens for the ajax endpoint and generate the screenshot.
         *
         * @since 2.0.0
         * @return void
         */
        public function get_site_screenshot()
        {
        }
        // end get_site_screenshot;
        /**
         * Add the additional sizes required by WP Ultimo.
         *
         * Add for the main site only.
         *
         * @since 2.0.0
         * @return void
         */
        public function additional_thumbnail_sizes()
        {
        }
        // end additional_thumbnail_sizes;
        /**
         * Adds a notification if the no-index setting is active.
         *
         * @since 1.9.8
         * @return void
         */
        public function add_no_index_warning()
        {
        }
        // end add_no_index_warning;
        /**
         * Renders the no indexing warning.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_no_index_warning()
        {
        }
        // end render_no_index_warning;
        /**
         * Prevents Search Engines from indexing Site Templates.
         *
         * @since 1.6.0
         * @return void
         */
        public function prevent_site_template_indexing()
        {
        }
        // end prevent_site_template_indexing;
        /**
         * Check if sub-site has a custom logo and change login logo.
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function custom_login_logo()
        {
        }
        // end custom_login_logo;
        /**
         * Replaces the WordPress url with the site url.
         *
         * @since 2.0.0
         * @return string
         */
        public function login_header_url()
        {
        }
        // end login_header_url;
        /**
         * Replaces the WordPress text with the site name.
         *
         * @since 2.0.0
         * @return string
         */
        public function login_header_text()
        {
        }
        // end login_header_text;
        /**
         * Add notices to default site page, recommending the WP Ultimo option.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_notices_to_default_site_page()
        {
        }
        // end add_notices_to_default_site_page;
        /**
         * Add search and replace filter to be used on site duplication
         *
         * @since 1.6.2
         * @param array $search_and_replace List to search and replace.
         * @param int   $from_site_id original site id.
         * @param int   $to_site_id New site id.
         * @return array
         */
        public function search_and_replace_on_duplication($search_and_replace, $from_site_id, $to_site_id)
        {
        }
        // end search_and_replace_on_duplication;
        /**
         * Get search and replace settings
         *
         * @since 1.7.0
         * @return array
         */
        public function get_search_and_replace_settings()
        {
        }
        // end get_search_and_replace_settings;
        /**
         * Handles search and replace for new blogs from WordPress.
         *
         * @since 1.7.0
         * @param array  $data The date being saved.
         * @param object $site The site object.
         * @return void
         */
        public static function search_and_replace_for_new_site($data, $site)
        {
        }
        // end search_and_replace_for_new_site;
        /**
         * Makes sure the search and replace array have no illegal values, such as null, false, etc
         *
         * @since 1.7.3
         * @param array $search_and_replace The search and replace list.
         * @return array
         */
        public function filter_illegal_search_keys($search_and_replace)
        {
        }
        // end filter_illegal_search_keys;
        /**
         * Handle the deletion of pending sites.
         *
         * @since 2.0.0
         *
         * @param string $action The action.
         * @param string $model The model.
         * @param array  $ids The ids list.
         * @return void
         */
        public function handle_delete_pending_sites($action, $model, $ids)
        {
        }
        // end handle_delete_pending_sites;
        /**
         * Hide the super admin user from the sub-site table list.
         *
         * @since 2.0.0
         *
         * @param array $args List table user search arguments.
         * @return array
         */
        public function hide_super_admin_from_list($args)
        {
        }
    }
    /**
     * Handles processes related to limitations.
     *
     * @since 2.0.0
     */
    class Visits_Manager
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Check if the limits for visits was set. If that's the case, lock the site.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_lock_site()
        {
        }
        // end maybe_lock_site;
        /**
         * Counts visits to network sites.
         *
         * This needs to be extremely light-weight.
         * The flow happens more or less like this:
         * 1. Gets the site current total;
         * 2. Adds one and re-save;
         * 3. Checks limits and see if we need to flush caches and such;
         * 4. Delegate these heavy tasks to action_scheduler.
         *
         * @since 2.0.0
         * @return void
         */
        public function count_visits()
        {
        }
        // end count_visits;
        /**
         * Flush known caching plugins, offers hooks to add more plugins in the future
         *
         * @since 1.7.0
         * @return void
         */
        public function flush_known_caches()
        {
        }
        // end flush_known_caches;
        /**
         * Enqueues the visits count script when necessary.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_visit_counter_script()
        {
        }
    }
    /**
     * Handles processes related to webhooks.
     *
     * @since 2.0.0
     */
    class Webhook_Manager extends \WP_Ultimo\Managers\Base_Manager
    {
        use \WP_Ultimo\Apis\Rest_Api, \WP_Ultimo\Apis\WP_CLI, \WP_Ultimo\Traits\Singleton;
        /**
         * The manager slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = 'webhook';
        /**
         * The model class associated to this manager.
         *
         * @since 2.0.0
         * @var string
         */
        protected $model_class = '\\WP_Ultimo\\Models\\Webhook';
        /**
         * Holds the list of available events for webhooks.
         *
         * @since 2.0.0
         * @var array
         */
        protected $events = array();
        /**
         * Holds the list of all webhooks.
         *
         * @since 2.0.0
         * @var array
         */
        protected $webhooks = array();
        /**
         * Instantiate the necessary hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Adds the listeners to the webhook callers, extend this by adding actions to wu_register_webhook_listeners
         *
         * @todo This needs to have a switch, allowing us to turn it on and off.
         * @return void.
         */
        public function register_webhook_listeners()
        {
        }
        // end register_webhook_listeners;
        /**
         * Sends all the webhooks that are triggered by a specific event.
         *
         * @since 2.0.0
         *
         * @param array $args with events slug and payload.
         * @return void
         */
        public function send_webhooks($args)
        {
        }
        // end send_webhooks;
        /**
         * Sends a specific webhook.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Webhook $webhook The webhook to send.
         * @param array                     $data Key-value array of data to send.
         * @param boolean                   $blocking Decides if we want to wait for a response to keep a log.
         * @return mixed.
         */
        public function send_webhook($webhook, $data, $blocking = true)
        {
        }
        // end send_webhook;
        /**
         * Send a test event of the webhook
         *
         * @return void
         */
        public function send_test_event()
        {
        }
        // end send_test_event;
        /**
         * Reads the log file and displays the content.
         *
         * @return void.
         */
        public function serve_logs()
        {
        }
        // end serve_logs;
        /**
         * Maybe decodes JSON, if valid JSON.
         *
         * APIs are strange. Sometimes they don't return valid JSON content.
         *
         * @since 2.0.0
         *
         * @param string $string JSON to decode.
         * @return string
         */
        protected function maybe_json_decode($string)
        {
        }
        // end maybe_json_decode;
        /**
         * Log a webhook sent for later reference.
         *
         * @since 2.0.0
         *
         * @param string $slug The name of the event.
         * @param int    $id The id of the webhook sent.
         * @param string $url The URL called by the webhook.
         * @param array  $data The array with data to be sent.
         * @param mixed  $response The response got on webhook call.
         * @return void
         */
        protected function log_event($slug, $id, $url, $data, $response)
        {
        }
    }
}
namespace WP_Ultimo\Models {
    /**
     * Post Base model class. Implements the Base Model.
     *
     * This class is the base class that is extended by all of our data types
     * with a title/content structure.
     *
     * @since 2.0.0
     */
    class Post_Base_Model extends \WP_Ultimo\Models\Base_Model
    {
        /**
         * Author ID.
         *
         * @since 2.0.0
         * @var int
         */
        protected $author_id = '';
        /**
         * Post type.
         *
         * @since 2.0.0
         * @var string
         */
        protected $type = '';
        /**
         * Post title.
         *
         * @since 2.0.0
         * @var string
         */
        protected $title = '';
        /**
         * Post title.
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = '';
        /**
         * Post content.
         *
         * @since 2.0.0
         * @var string
         */
        protected $content = '';
        /**
         * Post excerpt.
         *
         * @since 2.0.0
         * @var string
         */
        protected $excerpt = '';
        /**
         * The post list order. Useful when ordering posts in a list.
         *
         * @since 2.0.0
         * @var int
         */
        protected $list_order = 10;
        /**
         * The post status.
         *
         * @since 2.0.0
         * @var string
         */
        protected $status = '';
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Posts\\Post_Query';
        /**
         * Get author ID.
         *
         * @return int
         */
        public function get_author_id()
        {
        }
        // end get_author_id;
        /**
         * Set author ID.
         *
         * @param int $author_id The author ID.
         */
        public function set_author_id($author_id)
        {
        }
        // end set_author_id;
        /**
         * Get post type.
         *
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Set post type.
         *
         * @param string $type Post type.
         */
        public function set_type($type)
        {
        }
        // end set_type;
        /**
         * Get post title.
         *
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Set post title.
         *
         * @param string $title Post title.
         */
        public function set_title($title)
        {
        }
        // end set_title;
        /**
         * Get post content.
         *
         * @return string
         */
        public function get_content()
        {
        }
        // end get_content;
        /**
         * Set post content.
         *
         * @param string $content Post content.
         */
        public function set_content($content)
        {
        }
        // end set_content;
        /**
         * Get post excerpt.
         *
         * @return string
         */
        public function get_excerpt()
        {
        }
        // end get_excerpt;
        /**
         * Set post excerpt.
         *
         * @param string $excerpt Post excerpt.
         */
        public function set_excerpt($excerpt)
        {
        }
        // end set_excerpt;
        /**
         * Get post creation date.
         *
         * @return string
         */
        public function get_date_created()
        {
        }
        // end get_date_created;
        /**
         * Set post creation date.
         *
         * @param string $date_created Post creation date.
         */
        public function set_date_created($date_created)
        {
        }
        // end set_date_created;
        /**
         * Get post last modification date.
         *
         * @return string
         */
        public function get_date_modified()
        {
        }
        // end get_date_modified;
        /**
         * Set post last modification date.
         *
         * @param string $date_modified Post last modification date.
         */
        public function set_date_modified($date_modified)
        {
        }
        // end set_date_modified;
        /**
         * Get the post list order.
         *
         * @return int
         */
        public function get_list_order()
        {
        }
        // end get_list_order;
        /**
         * Set the post list order.
         *
         * @param int $list_order The post list order.
         */
        public function set_list_order($list_order)
        {
        }
        // end set_list_order;
        /**
         * Get the post status.
         *
         * @return string
         */
        public function get_status()
        {
        }
        // end get_status;
        /**
         * Set the post status.
         *
         * @param string $status The post status.
         */
        public function set_status($status)
        {
        }
        // end set_status;
        /**
         * Save (create or update) the model on the database,
         * setting creation and modification dates first.
         *
         * @since 2.0.0
         * @return bool
         */
        public function save()
        {
        }
    }
    /**
     * Broadcast model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Broadcast extends \WP_Ultimo\Models\Post_Base_Model
    {
        /**
         * Post model.
         *
         * @since 2.0.0
         * @var string
         */
        public $model = 'broadcast';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Broadcasts\\Broadcast_Query';
        /**
         * Post type.
         *
         * @since 2.0.0
         * @var string
         */
        protected $type = 'broadcast_notice';
        /**
         * Set the allowed types to prevent saving wrong types.
         *
         * @since 2.0.0
         * @var array
         */
        protected $allowed_types = array('broadcast_email', 'broadcast_notice');
        /**
         * Set the allowed status to prevent saving wrong status.
         *
         * @since 2.0.0
         * @var array
         */
        protected $allowed_status = array('publish', 'draft');
        /**
         * Broadcast status.
         *
         * @since 2.0.0
         * @var string
         */
        protected $status = 'publish';
        /**
         * Notice type
         *
         * @since 2.0.0
         * @var string
         */
        protected $notice_type;
        /**
         * Constructs the object via the constructor arguments
         *
         * @since 2.0.7
         *
         * @param mixed $object Std object with model parameters.
         */
        public function __construct($object = null)
        {
        }
        // end __construct;
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Get the id of the original 1.X model that was used to generate this item on migration.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_migrated_from_id()
        {
        }
        // end get_migrated_from_id;
        /**
         * Set the id of the original 1.X model that was used to generate this item on migration.
         *
         * @since 2.0.0
         * @param int $migrated_from_id The ID of the original 1.X model that was used to generate this item on migration.
         * @return void
         */
        public function set_migrated_from_id($migrated_from_id)
        {
        }
        // end set_migrated_from_id;
        /**
         * Get name of the broadcast
         *
         * @since 2.0.0
         * @return string
         */
        public function get_name()
        {
        }
        // end get_name;
        /**
         * Get title of the broadcast
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Get notice type
         *
         * @since 2.0.0
         * @return string
         */
        public function get_notice_type()
        {
        }
        // end get_notice_type;
        /**
         * Get the message targets.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_message_targets()
        {
        }
        // end get_message_targets;
        /**
         * Set the message product and/or customer targets.
         *
         * @since 2.0.0
         *
         * @param string $message_targets The targets for this broadcast.
         * @return void
         */
        public function set_message_targets($message_targets)
        {
        }
        // end set_message_targets;
        /**
         * Set the type of the notice.
         *
         * @since 2.0.0
         *
         * @param string $notice_type Can be info, success, warning or danger.
         * @options info,success,warning,danger
         * @return void
         */
        public function set_notice_type($notice_type)
        {
        }
        // end set_notice_type;
        /**
         * Set title using the name parameter.
         *
         * @since 2.0.0
         *
         * @param string $name This broadcast name, which is used as broadcast title as well.
         * @return void
         */
        public function set_name($name)
        {
        }
        // end set_name;
        /**
         * Adds checks to prevent saving the model with the wrong type.
         *
         * @since 2.0.0
         *
         * @param string $type The type being set.
         * @return void
         */
        public function set_type($type)
        {
        }
        // end set_type;
        /**
         * * Adds checks to prevent saving the model with the wrong status.
         *
         * @since 2.0.0
         *
         * @param string $status The status being set.
         * @return void
         */
        public function set_status($status)
        {
        }
    }
    /**
     * Checkout Form model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Checkout_Form extends \WP_Ultimo\Models\Base_Model
    {
        /**
         * The name of the checkout form.
         *
         * @since 2.0.0
         * @var string
         */
        protected $name;
        /**
         * Slug of the checkout form.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $slug;
        /**
         * Is this checkout form active?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $active = true;
        /**
         * Payload of the event.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $settings;
        /**
         * Custom CSS code.
         *
         * @since 2.0.0
         * @var string
         */
        protected $custom_css;
        /**
         * Countries allowed on this checkout.
         *
         * @since 2.0.0
         * @var string
         */
        protected $allowed_countries;
        /**
         * Thank you page id, if set.
         *
         * @since 2.0.0
         * @var int
         */
        protected $thank_you_page_id;
        /**
         * Custom Snippets code.
         *
         * @since 2.0.0
         * @var string
         */
        protected $conversion_snippets;
        /**
         * Set a template to use.
         *
         * @since 2.0.0
         * @var string can be either 'blank', 'single-step' or 'multi-step'
         */
        protected $template;
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Checkout_Forms\\Checkout_Form_Query';
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Get the object type associated with this event.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_slug()
        {
        }
        // end get_slug;
        /**
         * Set the checkout form slug
         *
         * @since 2.0.0
         *
         * @param string $slug The checkout form slug. It needs to be unique and preferably make it clear what it is about. E.g. my_checkout_form.
         * @return void
         */
        public function set_slug($slug)
        {
        }
        // end set_slug;
        /**
         * Get the name of the checkout form.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_name()
        {
        }
        // end get_name;
        /**
         * Set the name of the checkout form.
         *
         * @since 2.0.0
         * @param string $name Your checkout form name, which is used as checkout form title as well.
         * @return void
         */
        public function set_name($name)
        {
        }
        // end set_name;
        /**
         * Get is this checkout form active?
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_active()
        {
        }
        // end is_active;
        /**
         * Set is this checkout form active?
         *
         * @since 2.0.0
         * @param boolean $active Set this checkout form as active (true), which means available to be used, or inactive (false).
         * @return void
         */
        public function set_active($active)
        {
        }
        // end set_active;
        /**
         * Get custom CSS code.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_custom_css()
        {
        }
        // end get_custom_css;
        /**
         * Set custom CSS code.
         *
         * @since 2.0.0
         * @param string $custom_css Custom CSS code for the checkout form.
         * @return void
         */
        public function set_custom_css($custom_css)
        {
        }
        // end set_custom_css;
        /**
         * Get settings of the event.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_settings()
        {
        }
        // end get_settings;
        /**
         * Set settings of the checkout form.
         *
         * @since 2.0.0
         * @param mixed $settings The checkout form settings and configurations.
         * @return void
         */
        public function set_settings($settings)
        {
        }
        // end set_settings;
        /**
         * Returns a specific step by the step name.
         *
         * @since 2.0.0
         *
         * @param string $step_name Name of the step. E.g. 'account'.
         * @return array|false
         */
        public function get_step($step_name)
        {
        }
        // end get_step;
        /**
         * Returns a specific field by the step name and field name.
         *
         * @since 2.0.0
         *
         * @param string $step_name Name of the step. E.g. 'account'.
         * @param string $field_name Name of the field. E.g. 'username'.
         * @return array|false
         */
        public function get_field($step_name, $field_name)
        {
        }
        // end get_field;
        /**
         * Returns all the fields from all steps.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_all_fields()
        {
        }
        // end get_all_fields;
        /**
         * Get fields that are meta-related.
         *
         * @since 2.0.0
         *
         * @param string $meta_type The meta type.
         * @return array
         */
        public function get_all_meta_fields($meta_type = 'customer_meta')
        {
        }
        // end get_all_meta_fields;
        /**
         * Returns the number of steps in this form.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_step_count()
        {
        }
        // end get_step_count;
        /**
         * Returns the number of fields on this form.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_field_count()
        {
        }
        // end get_field_count;
        /**
         * Returns the shortcode that needs to be placed to embed this form.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_shortcode()
        {
        }
        // end get_shortcode;
        /**
         * Sets an template for blank.
         *
         * @since 2.0.0
         *
         * @param string $template The type of the template.
         * @return void
         */
        public function use_template($template = 'single-step')
        {
        }
        // end use_template;
        /**
         * Get the contents of the single step template.
         *
         * @since 2.0.0
         * @return array
         */
        private function get_single_step_template()
        {
        }
        // end get_single_step_template;
        /**
         * Get the contents of the multi step template.
         *
         * @since 2.0.0
         * @return array
         */
        private function get_multi_step_template()
        {
        }
        // end get_multi_step_template;
        /**
         * Converts the steps from classic WP Ultimo 1.X to the 2.0 format.
         *
         * @since 2.0.0
         *
         * @param array $steps The steps to convert.
         * @param array $old_settings The old settings.
         * @return array
         */
        public static function convert_steps_to_v2($steps, $old_settings = array())
        {
        }
        // end convert_steps_to_v2;
        /**
         * Checks if this signup has limitations on countries.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_country_lock()
        {
        }
        // end has_country_lock;
        /**
         * Get countries allowed on this checkout.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_allowed_countries()
        {
        }
        // end get_allowed_countries;
        /**
         * Set countries allowed on this checkout.
         *
         * @since 2.0.0
         * @param string $allowed_countries The allowed countries that can access this checkout.
         * @return void
         */
        public function set_allowed_countries($allowed_countries)
        {
        }
        // end set_allowed_countries;
        /**
         * Checks if this checkout form has a custom thank you page.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_thank_you_page()
        {
        }
        // end has_thank_you_page;
        /**
         * Get custom thank you page, if set.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_thank_you_page_id()
        {
        }
        // end get_thank_you_page_id;
        /**
         * Set custom thank you page, if set.
         *
         * @since 2.0.0
         * @param int $thank_you_page_id The thank you page ID. This page is shown after a successful purchase.
         * @return void
         */
        public function set_thank_you_page_id($thank_you_page_id)
        {
        }
        // end set_thank_you_page_id;
        /**
         * Get Snippets to run on thank you page.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_conversion_snippets()
        {
        }
        // end get_conversion_snippets;
        /**
         * Set snippets to run on thank you page.
         *
         * @since 2.0.0
         * @param string $conversion_snippets Snippets to run on thank you page.
         * @return void
         */
        public function set_conversion_snippets($conversion_snippets)
        {
        }
        // end set_conversion_snippets;
        /**
         * Save (create or update) the model on the database.
         *
         * Overrides the save method to set the template.
         * This is used on CLI creation.
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function save()
        {
        }
        // end save;
        /**
         * Get can be either 'blank', 'single-step' or 'multi-step'.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_template()
        {
        }
        // end get_template;
        /**
         * Set the template mode. THis is mostly used on CLI.
         *
         * @since 2.0.0
         * @param string $template Template mode. Can be either 'blank', 'single-step' or 'multi-step'.
         * @options blank,single-step,multi-step
         * @return void
         */
        public function set_template($template)
        {
        }
        // end set_template;
        /**
         * Custom fields for back-end upgrade/downgrades and such.
         *
         * @since 2.0.0
         * @return array
         */
        public static function membership_change_form_fields()
        {
        }
    }
    /**
     * Customer model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Customer extends \WP_Ultimo\Models\Base_Model
    {
        use \WP_Ultimo\Models\Traits\Billable, \WP_Ultimo\Models\Traits\Notable;
        /**
         * User ID of the associated user.
         *
         * @since 2.0.0
         * @var int
         */
        protected $user_id;
        /**
         * The type of customer.
         *
         * Almost a 100% of the time this will be 'customer'
         * but since we use this table to store support-agents as well
         * this can be 'support-agent'.
         *
         * @see \WP_Ultimo\Models\Support_Agent
         *
         * @since 2.0.0
         * @var string
         */
        protected $type;
        /**
         * Date when the customer was created.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_registered;
        /**
         * Email verification status - either `none`, `pending`, or `verified`.
         *
         * @since 2.0.0
         * @var string
         */
        protected $email_verification;
        /**
         * Date this customer last logged in.
         *
         * @since 2.0.0
         * @var string
         */
        protected $last_login;
        /**
         * Whether or not the customer has trialed before.
         *
         * @since 2.0.0
         * @var null|bool
         */
        protected $has_trialed;
        /**
         * If this customer is a VIP customer or not.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $vip = false;
        /**
         * List of IP addresses used by this customer.
         *
         * @since 2.0.0
         * @var string
         */
        protected $ips;
        /**
         * The form used to signup.
         *
         * @since 2.0.0
         * @var string
         */
        protected $signup_form;
        /**
         * Extra information about this customer.
         *
         * @since 2.0.0
         * @var array
         */
        protected $extra_information;
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Customers\\Customer_Query';
        /**
         * Prepare data before it is stored into the database.
         *
         * @since 2.0.0
         */
        public function prepare_extra_information_to_save()
        {
        }
        // end prepare_extra_information_to_save;
        /**
         * Save (create or update) the model on the database.
         *
         * @since 2.0.0
         */
        public function save()
        {
        }
        // end save;
        /**
         * Save the extra information of the customer
         *
         * @since 2.0.0
         *
         * @param array $data The object data that will be stored.
         * @return void
         */
        public function save_extra_information($data)
        {
        }
        // end save_extra_information;
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Get user ID of the associated user.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_user_id()
        {
        }
        // end get_user_id;
        /**
         * Set user ID of the associated user.
         *
         * @since 2.0.0
         * @param int $user_id The WordPress user ID attached to this customer.
         * @return void
         */
        public function set_user_id($user_id)
        {
        }
        // end set_user_id;
        /**
         * Returns the user associated with this customer.
         *
         * @since 2.0.0
         * @return WP_User
         */
        public function get_user()
        {
        }
        // end get_user;
        /**
         * Returns the customer's display name.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_display_name()
        {
        }
        // end get_display_name;
        /**
         * Returns the default billing address.
         *
         * Classes that implement this trait need to implement
         * this method.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Objects\Billing_Address
         */
        public function get_default_billing_address()
        {
        }
        // end get_default_billing_address;
        /**
         * Returns the customer country.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_country()
        {
        }
        // end get_country;
        /**
         * Returns the customer's username.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_username()
        {
        }
        // end get_username;
        /**
         * Returns the customer's email address.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_email_address()
        {
        }
        // end get_email_address;
        /**
         * Get date when the customer was created.
         *
         * @since 2.0.0
         * @param bool $formatted To format or not.
         * @return string
         */
        public function get_date_registered($formatted = true)
        {
        }
        // end get_date_registered;
        /**
         * Set date when the customer was created.
         *
         * @since 2.0.0
         * @param string $date_registered Date when the customer was created.
         * @return void
         */
        public function set_date_registered($date_registered)
        {
        }
        // end set_date_registered;
        /**
         * Get email verification status - either `none`, `pending`, or `verified`.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_email_verification()
        {
        }
        // end get_email_verification;
        /**
         * Set email verification status - either `none`, `pending`, or `verified`.
         *
         * @since 2.0.0
         * @param string $email_verification Email verification status - either `none`, `pending`, or `verified`.
         * @return void
         */
        public function set_email_verification($email_verification)
        {
        }
        // end set_email_verification;
        /**
         * Get date this customer last logged in.
         *
         * @since 2.0.0
         * @param bool $formatted To format or not.
         * @return string
         */
        public function get_last_login($formatted = true)
        {
        }
        // end get_last_login;
        /**
         * Set date this customer last logged in.
         *
         * @since 2.0.0
         * @param string $last_login Date this customer last logged in.
         * @return void
         */
        public function set_last_login($last_login)
        {
        }
        // end set_last_login;
        /**
         * Get whether or not the customer has trialed before.
         *
         * @since 2.0.0
         * @return null|bool
         */
        public function has_trialed()
        {
        }
        // end has_trialed;
        /**
         * Set whether or not the customer has trialed before.
         *
         * @since 2.0.0
         * @param bool $has_trialed Whether or not the customer has trialed before.
         * @return void
         */
        public function set_has_trialed($has_trialed)
        {
        }
        // end set_has_trialed;
        /**
         * Get if this customer is a VIP customer or not.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_vip()
        {
        }
        // end is_vip;
        /**
         * Set if this customer is a VIP customer or not.
         *
         * @since 2.0.0
         * @param bool $vip If this customer is a VIP customer or not.
         * @return void
         */
        public function set_vip($vip)
        {
        }
        // end set_vip;
        /**
         * Get list of IP addresses used by this customer.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_ips()
        {
        }
        // end get_ips;
        /**
         * Returns the last IP address recorded for the customer.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_last_ip()
        {
        }
        // end get_last_ip;
        /**
         * Set list of IP addresses used by this customer.
         *
         * @since 2.0.0
         * @param array $ips List of IP addresses used by this customer.
         * @return void
         */
        public function set_ips($ips)
        {
        }
        // end set_ips;
        /**
         * Adds a new IP to the IP list.
         *
         * @since 2.0.0
         *
         * @param string $ip New IP address to add.
         * @return void
         */
        public function add_ip($ip)
        {
        }
        // end add_ip;
        /**
         * Updates the last login, as well as the ip and country if necessary.
         *
         * @since 2.0.0
         *
         * @param boolean $update_ip If we want to update the IP address.
         * @param boolean $update_country_and_state If we want to update country and state.
         * @return boolean
         */
        public function update_last_login($update_ip = true, $update_country_and_state = false)
        {
        }
        // end update_last_login;
        /**
         * Get extra information.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_extra_information()
        {
        }
        // end get_extra_information;
        /**
         * Set featured extra information.
         *
         * @since 2.0.0
         * @param string $extra_information Any extra information related to this customer.
         * @return void
         */
        public function set_extra_information($extra_information)
        {
        }
        // end set_extra_information;
        /**
         * Returns the subscriptions attached to this customer.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_memberships()
        {
        }
        // end get_memberships;
        /**
         * Returns the sites attached to this customer.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_sites()
        {
        }
        // end get_sites;
        /**
         * Returns all pending sites associated with a customer.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_pending_sites()
        {
        }
        // end get_pending_sites;
        /**
         * The the primary site ID if available.
         *
         * In cases where none is set, we:
         * - return the id of the first site on the list off sites
         * belonging to this customer;
         * - or return the main site id.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_primary_site_id()
        {
        }
        // end get_primary_site_id;
        /**
         * Returns the payments attached to this customer.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_payments()
        {
        }
        // end get_payments;
        /**
         * By default, we just use the to_array method, but you can rewrite this.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_search_results()
        {
        }
        // end to_search_results;
        /**
         * Get the customer type.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_type()
        {
        }
        // end get_type;
        /**
         * Get the customer type.
         *
         * @since 2.0.0
         * @param string $type The customer type. Can be 'customer'.
         * @options customer
         * @return void
         */
        public function set_type($type)
        {
        }
        // end set_type;
        /**
         * Gets the total grossed by the customer so far.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_total_grossed()
        {
        }
        // end get_total_grossed;
        /**
         * Get if the customer is online or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_online()
        {
        }
        // end is_online;
        /**
         * Saves a verification key.
         *
         * @since 2.0.0
         * @return bool
         */
        public function generate_verification_key()
        {
        }
        // end generate_verification_key;
        /**
         * Returns the saved verification key.
         *
         * @since 2.0.0
         * @return string|bool
         */
        public function get_verification_key()
        {
        }
        // end get_verification_key;
        /**
         * Disabled the verification by setting the key to false.
         *
         * @since 2.0.0
         * @return bool
         */
        public function disable_verification_key()
        {
        }
        // end disable_verification_key;
        /**
         * Returns the link of the email verification endpoint.
         *
         * @since 2.0.0
         * @return string|bool
         */
        public function get_verification_url()
        {
        }
        // end get_verification_url;
        /**
         * Send verification email.
         *
         * @since 2.0.4
         * @return void
         */
        public function send_verification_email()
        {
        }
        // end send_verification_email;
        /**
         * Get the form used to signup.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_signup_form()
        {
        }
        // end get_signup_form;
        /**
         * Set the form used to signup.
         *
         * @since 2.0.0
         * @param string $signup_form The form used to signup.
         * @return void
         */
        public function set_signup_form($signup_form)
        {
        }
    }
    /**
     * Domain model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Domain extends \WP_Ultimo\Models\Base_Model
    {
        /**
         * Blog ID of the site associated with this domain.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $blog_id;
        /**
         * The domain name mapped.
         *
         * @since 2.0.0
         * @var string
         */
        protected $domain = '';
        /**
         * Is this domain active?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $active = true;
        /**
         * Is this a primary_domain? Requests to other mapped domains will resolve to the primary.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $primary_domain = false;
        /**
         * Should this domain be forced to be used only on HTTPS?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $secure = false;
        /**
         * Stages of domain mapping
         *
         * - checking-dns
         * - checking-ssl-cert
         * - done
         *
         * @since 2.0.0
         * @var string
         */
        protected $stage = 'checking-dns';
        /**
         * Date when this was created.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_created;
        /**
         * List of stages that should force the domain to an inactive status.
         *
         * @since 2.0.0
         * @var array
         */
        const INACTIVE_STAGES = array('checking-dns', 'checking-ssl-cert', 'failed');
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Domains\\Domain_Query';
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Returns the domain address mapped.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_domain()
        {
        }
        // end get_domain;
        /**
         * Sets the domain of this model object;
         *
         * @since 2.0.0
         *
         * @param string $domain Your Domain name. You don't need to put http or https in front of your domain in this field. e.g: example.com.
         * @return void
         */
        public function set_domain($domain)
        {
        }
        // end set_domain;
        /**
         * Gets the URL with schema and all.
         *
         * @since 2.0.0
         *
         * @param string $path The path to add to the end of the url.
         * @return string
         */
        public function get_url($path = '')
        {
        }
        // end get_url;
        /**
         * Get the ID of the corresponding site.
         *
         * @access public
         * @since  2.0
         * @return int
         */
        public function get_blog_id()
        {
        }
        // end get_blog_id;
        /**
         * Sets the blog_id of this model object;
         *
         * @since 2.0.0
         *
         * @param int $blog_id The blog ID attached to this domain.
         * @return void
         */
        public function set_blog_id($blog_id)
        {
        }
        // end set_blog_id;
        /**
         * Get the ID of the corresponding site.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_site_id()
        {
        }
        // end get_site_id;
        /**
         * Get the site object for this particular mapping.
         *
         * @since 2.0.0
         * @return WP_Site|false
         */
        public function get_site()
        {
        }
        // end get_site;
        /**
         * Check if this particular mapping is active.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_active()
        {
        }
        // end is_active;
        /**
         * Sets the active state of this model object;
         *
         * @since 2.0.0
         *
         * @param boolean $active Set this domain as active (true), which means available to be used, or inactive (false).
         * @return void
         */
        public function set_active($active)
        {
        }
        // end set_active;
        /**
         * Check if this is a primary domain.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_primary_domain()
        {
        }
        // end is_primary_domain;
        /**
         * Sets the primary_domain state of this model object;
         *
         * @since 2.0.0
         *
         * @param boolean $primary_domain Define true to set this as primary domain of a site, meaning it's the main url, or set false.
         * @return void
         */
        public function set_primary_domain($primary_domain)
        {
        }
        // end set_primary_domain;
        /**
         * Check if we should use this domain securely (via HTTPS).
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_secure()
        {
        }
        // end is_secure;
        /**
         * Sets the secure state of this model object;
         *
         * @since 2.0.0
         *
         * @param boolean $secure If this domain has some SSL security or not.
         * @return void
         */
        public function set_secure($secure)
        {
        }
        // end set_secure;
        /**
         * Get the stage in which this domain is in at the moment.
         *
         * This is used to check the stage of the domain lifecycle.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_stage()
        {
        }
        // end get_stage;
        /**
         * Sets the stage of this model object;
         *
         * @since 2.0.0
         *
         * @param string $stage The state of the domain model object. Can be one of this options: checking-dns, checking-ssl-cert, done-without-ssl, done and failed.
         * @return void
         */
        public function set_stage($stage)
        {
        }
        // end set_stage;
        /**
         * Check if this domain is on a inactive stage.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_inactive_stage()
        {
        }
        // end has_inactive_stage;
        /**
         * Returns the Label for a given stage level.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_stage_label()
        {
        }
        // end get_stage_label;
        /**
         * Gets the classes for a given stage level.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_stage_class()
        {
        }
        // end get_stage_class;
        /**
         * Get date when this was created..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_created()
        {
        }
        // end get_date_created;
        /**
         * Set date when this was created..
         *
         * @since 2.0.0
         * @param string $date_created Date when the domain was created. If no date is set, the current date and time will be used.
         * @return void
         */
        public function set_date_created($date_created)
        {
        }
        // end set_date_created;
        /**
         * Check if the domain is correctly set-up in terms of DNS resolution.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_correct_dns()
        {
        }
        // end has_correct_dns;
        /**
         * Checks if the current domain has a valid SSL certificate that covers it.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_valid_ssl_certificate()
        {
        }
        // end has_valid_ssl_certificate;
        /**
         * Save (create or update) the model on the database.
         *
         * Needs to override the parent implementation
         * to clear the cache.
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function save()
        {
        }
        // end save;
        /**
         * Delete the model from the database.
         *
         * @since 2.0.0
         *
         * @return WP_Error|bool
         */
        public function delete()
        {
        }
        // end delete;
        /**
         * Get mapping by site ID
         *
         * @since 2.0.0
         *
         * @param int|stdClass $site Site ID, or site object from {@see get_blog_details}.
         * @return Domain|WP_Error|null Mapping on success, WP_Error if error occurred, or null if no mapping found.
         */
        public static function get_by_site($site)
        {
        }
        // end get_by_site;
        /**
         * Gets mappings by domain names
         *
         * Note: This is used in sunrise, so unfortunately, we can't use the Query model.
         *
         * @since 2.0.0
         *
         * @param array|string $domains Domain names to search for.
         * @return object
         */
        public static function get_by_domain($domains)
        {
        }
    }
    /**
     * Email model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Email extends \WP_Ultimo\Models\Post_Base_Model
    {
        /**
         * Post model.
         *
         * @since 2.0.0
         * @var string
         */
        public $model = 'email';
        /**
         * Callback function for turning IDs into objects
         *
         * @since  2.0.0
         * @access public
         * @var mixed
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Emails\\Email_Query';
        /**
         * Post type.
         *
         * @since 2.0.0
         * @var string
         */
        protected $type = 'system_email';
        /**
         * Set the allowed types to prevent saving wrong types.
         *
         * @since 2.0.0
         * @var array
         */
        protected $allowed_types = array('system_email');
        /**
         * Email slug.
         *
         * @since 2.0.0
         * @var string
         */
        protected $slug = '';
        /**
         * Post status.
         *
         * @since 2.0.0
         * @var string
         */
        protected $allowed_status = array('publish', 'draft');
        /**
         * If this email is going to be send later.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $schedule;
        /**
         * If we should send this to a customer or to the network admin.
         *
         * Can be either 'customer' or 'admin'.
         *
         * @since 2.0.0
         * @var string
         */
        protected $target;
        /**
         * Checks if we should send a copy of the email to the admin.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $send_copy_to_admin;
        /**
         * The event of this email.
         *
         * This determines when this email is going to be triggered.
         *
         * @since 2.0.0
         * @var string
         */
        protected $event;
        /**
         * The active status of an email.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $active;
        /**
         * Whether or not this is a legacy email.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $legacy;
        /**
         * Plain or HTML.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $style;
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Get event of the email
         *
         * @since 2.0.0
         * @return string
         */
        public function get_event()
        {
        }
        // end get_event;
        /**
         * Get title of the email
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * Get title of the email using get_name
         *
         * @since 2.0.0
         * @return string
         */
        public function get_name()
        {
        }
        // end get_name;
        /**
         * Get style of the email
         *
         * @since 2.0.0
         * @return string
         */
        public function get_style()
        {
        }
        // end get_style;
        /**
         * Set the style.
         *
         * @since 2.0.0
         *
         * @param string $style The email style. Can be 'html' or 'plain-text'.
         * @options html,plain-text
         * @return void
         */
        public function set_style($style)
        {
        }
        // end set_style;
        /**
         * Get if the email has a schedule.
         *
         * @since 2.0.0
         * @return string
         */
        public function has_schedule()
        {
        }
        // end has_schedule;
        /**
         * Set the email schedule.
         *
         * @since 2.0.0
         * @param bool $schedule Whether or not this is a scheduled email.
         * @return void
         */
        public function set_schedule($schedule)
        {
        }
        // end set_schedule;
        /**
         * Set the email schedule.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_schedule_type()
        {
        }
        // end get_schedule_type;
        /**
         * Get schedule send in days of the email
         *
         * @since 2.0.0
         * @return string
         */
        public function get_send_days()
        {
        }
        // end get_send_days;
        /**
         * Get schedule send in hours of the email.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_send_hours()
        {
        }
        // end get_send_hours;
        /**
         * Returns a timestamp in the future when this email should be sent.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_when_to_send()
        {
        }
        // end get_when_to_send;
        /**
         * Get email slug.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_slug()
        {
        }
        // end get_slug;
        /**
         * Get the custom sender option.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_custom_sender()
        {
        }
        // end get_custom_sender;
        /**
         * Get the custom sender name.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_custom_sender_name()
        {
        }
        // end get_custom_sender_name;
        /**
         * Get the custom sender email.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_custom_sender_email()
        {
        }
        // end get_custom_sender_email;
        /**
         * Adds checks to prevent saving the model with the wrong type.
         *
         * @since 2.0.0
         *
         * @param string $type The type being set.
         * @return void
         */
        public function set_type($type)
        {
        }
        // end set_type;
        /**
         * Set the email event.
         *
         * @since 2.0.0
         *
         * @param string $event The event that needs to be fired for this email to be sent.
         * @return void
         */
        public function set_event($event)
        {
        }
        // end set_event;
        /**
         * Set if the email is schedule.
         *
         * @since 2.0.0
         *
         * @param string $email_schedule if the send will be schedule.
         * @return void
         */
        public function set_email_schedule($email_schedule)
        {
        }
        // end set_email_schedule;
        /**
         * Set the schedule date in hours.
         *
         * @since 2.0.0
         *
         * @param string $send_hours The amount of hours that the email will wait before is sent.
         * @return void
         */
        public function set_send_hours($send_hours)
        {
        }
        // end set_send_hours;
        /**
         * Set the schedule date in days.
         *
         * @since 2.0.0
         *
         * @param string $send_days The amount of days that the email will wait before is sent.
         * @return void
         */
        public function set_send_days($send_days)
        {
        }
        // end set_send_days;
        /**
         * Set the schedule type.
         *
         * @since 2.0.0
         *
         * @param string $schedule_type The type of schedule. Can be 'days' or 'hours'.
         * @options days,hours
         * @return void
         */
        public function set_schedule_type($schedule_type)
        {
        }
        // end set_schedule_type;
        /**
         * Set title using the name parameter.
         *
         * @since 2.0.0
         *
         * @param string $name The name being set as title.
         * @return void
         */
        public function set_name($name)
        {
        }
        // end set_name;
        /**
         * Set the slug.
         *
         * @since 2.0.0
         *
         * @param string $slug The slug being set.
         * @return void
         */
        public function set_slug($slug)
        {
        }
        // end set_slug;
        /**
         * Set the custom sender.
         *
         * @since 2.0.0
         *
         * @param boolean $custom_sender If has a custom sender.
         * @return void
         */
        public function set_custom_sender($custom_sender)
        {
        }
        // end set_custom_sender;
        /**
         * Set the custom sender name.
         *
         * @since 2.0.0
         *
         * @param string $custom_sender_name The name of the custom sender. E.g. From: John Doe.
         * @return void
         */
        public function set_custom_sender_name($custom_sender_name)
        {
        }
        // end set_custom_sender_name;
        /**
         * Set the custom sender email.
         *
         * @since 2.0.0
         *
         * @param string $custom_sender_email The email of the custom sender. E.g. From: johndoe@gmail.com.
         * @return void
         */
        public function set_custom_sender_email($custom_sender_email)
        {
        }
        // end set_custom_sender_email;
        /**
         * Get if we should send this to a customer or to the network admin.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_target()
        {
        }
        // end get_target;
        /**
         * Set if we should send this to a customer or to the network admin.
         *
         * @since 2.0.0
         * @param string $target If we should send this to a customer or to the network admin. Can be 'customer' or 'admin'.
         * @options customer,admin
         * @return void
         */
        public function set_target($target)
        {
        }
        // end set_target;
        /**
         * Gets the list of targets for an email.
         *
         * @since 2.0.0
         *
         * @param array $payload The payload of the email being sent. Used to get the customer id.
         * @return array
         */
        public function get_target_list($payload = array())
        {
        }
        // end get_target_list;
        /**
         * Returns the list of super admin targets.
         *
         * @since 2.0.0
         * @return array
         */
        public static function get_super_admin_targets()
        {
        }
        // end get_super_admin_targets;
        /**
         * Get if we should send a copy of the email to the admin.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function get_send_copy_to_admin()
        {
        }
        // end get_send_copy_to_admin;
        /**
         * Set if we should send a copy of the email to the admin.
         *
         * @since 2.0.0
         * @param boolean $send_copy_to_admin Checks if we should send a copy of the email to the admin.
         * @return void
         */
        public function set_send_copy_to_admin($send_copy_to_admin)
        {
        }
        // end set_send_copy_to_admin;
        /**
         * Get the active status of an email.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_active()
        {
        }
        // end is_active;
        /**
         * Set the active status of an email.
         *
         * @since 2.0.0
         * @param bool $active Set this email as active (true), which means available will fire when the event occur, or inactive (false).
         * @return void
         */
        public function set_active($active)
        {
        }
        // end set_active;
        /**
         * Get whether or not this is a legacy email.
         *
         * @since 2.0.0
         * @return bool
         */
        public function is_legacy()
        {
        }
        // end is_legacy;
        /**
         * Set whether or not this is a legacy email.
         *
         * @since 2.0.0
         * @param bool $legacy Whether or not this is a legacy email.
         * @return void
         */
        public function set_legacy($legacy)
        {
        }
    }
    /**
     * Event model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Event extends \WP_Ultimo\Models\Base_Model
    {
        const SEVERITY_SUCCESS = 1;
        const SEVERITY_NEUTRAL = 2;
        const SEVERITY_INFO = 3;
        const SEVERITY_WARNING = 4;
        const SEVERITY_FATAL = 5;
        /**
         * Severity of the problem.
         *
         * @since 2.0.0
         * @var int
         */
        protected $severity;
        /**
         * Date when the event was created.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_created;
        /**
         * Initiator of this event.
         *
         * Events can be run by WP Ultimo, saved as 'system', or
         * by people (admins, customers), saved as 'manual'.
         *
         * @since 2.0.0
         * @var string
         */
        protected $initiator;
        /**
         * The author of the action, saved as the user_id.
         *
         * @since 2.0.0
         * @var int
         */
        protected $author_id = 0;
        /**
         * Object type associated with this event.
         *
         * Can be one one the following:
         * - network, for events concerning the entire network;
         * - site, for events that concern a specific site;
         * - customer, for events that concern a specific customer;
         * - domain, for events that concern a specific domain;
         * - membership, for events that concern a specific membership;
         *
         * @since 2.0.0
         * @var string
         */
        protected $object_type;
        /**
         * ID of the related objects.
         *
         * @since 2.0.0
         * @var int
         */
        protected $object_id;
        /**
         * Slug of the event.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $slug;
        /**
         * Payload of the event.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $payload;
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Events\\Event_Query';
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Get severity of the problem..
         *
         * @since 2.0.0
         * @return int
         */
        public function get_severity()
        {
        }
        // end get_severity;
        /**
         * Returns the Label for a given severity level.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_severity_label()
        {
        }
        // end get_severity_label;
        /**
         * Gets the classes for a given severity level.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_severity_class()
        {
        }
        // end get_severity_class;
        /**
         * Set severity of the problem..
         *
         * @since 2.0.0
         * @param int $severity Severity of the problem.
         * @return void
         */
        public function set_severity($severity)
        {
        }
        // end set_severity;
        /**
         * Get date when the event was created..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_created()
        {
        }
        // end get_date_created;
        /**
         * Set date when the event was created..
         *
         * @since 2.0.0
         * @param string $date_created Date when the event was created.
         * @return void
         */
        public function set_date_created($date_created)
        {
        }
        // end set_date_created;
        /**
         * Get payload of the event..
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_payload()
        {
        }
        // end get_payload;
        /**
         * Set payload of the event..
         *
         * @since 2.0.0
         * @param mixed $payload Payload of the event.
         * @return void
         */
        public function set_payload($payload)
        {
        }
        // end set_payload;
        /**
         * Get message for the event.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_message()
        {
        }
        // end get_message;
        /**
         * Interpolates the value of a message and its placeholders with the contents of the payload.
         *
         * @since 2.0.0
         *
         * @param string $message The message with placeholders.
         * @param array  $payload Key => value based array.
         * @return string
         */
        public function interpolate_message($message, $payload)
        {
        }
        // end interpolate_message;
        /**
         * Returns the default system messages for events.
         *
         * @since 2.0.0
         *
         * @param string $slug The slug of the event.
         * @return string
         */
        public static function get_default_system_messages($slug)
        {
        }
        // end get_default_system_messages;
        /**
         * Get by people (admins, customers), saved as 'manual'.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_initiator()
        {
        }
        // end get_initiator;
        /**
         * Set by people (admins, customers), saved as 'manual'.
         *
         * @since 2.0.0
         *
         * @param string $initiator The type of user responsible for initiating the event. There are two options: Manual and System. By default, the event is saved as manual.
         * @return void
         */
        public function set_initiator($initiator)
        {
        }
        // end set_initiator;
        /**
         * Get the author of the action, saved as the user_id.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_author_id()
        {
        }
        // end get_author_id;
        /**
         * Returns the user associated with this author.
         *
         * @since 2.0.0
         * @return WP_User
         */
        public function get_author_user()
        {
        }
        // end get_author_user;
        /**
         * Returns the authors' display name.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_author_display_name()
        {
        }
        // end get_author_display_name;
        /**
         * Returns the authors' email address.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_author_email_address()
        {
        }
        // end get_author_email_address;
        /**
         * Set the author of the action, saved as the user_id.
         *
         * @since 2.0.0
         * @param int $author_id The user responsible for creating the event. By default, the event is saved with the current user_id.
         * @return void
         */
        public function set_author_id($author_id)
        {
        }
        // end set_author_id;
        /**
         * Get the object of this event.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_object()
        {
        }
        // end get_object;
        /**
         * Polyfill for the get_object method.
         *
         * @since 2.0.0
         * @return false|object
         */
        public function get_membership()
        {
        }
        // end get_membership;
        /**
         * Polyfill for the get_object method.
         *
         * @since 2.0.0
         * @return false|object
         */
        public function get_product()
        {
        }
        // end get_product;
        /**
         * Polyfill for the get_object method.
         *
         * @since 2.0.0
         * @return false|object
         */
        public function get_site()
        {
        }
        // end get_site;
        /**
         * Polyfill for the get_object method.
         *
         * @since 2.0.0
         * @return false|object
         */
        public function get_customer()
        {
        }
        // end get_customer;
        /**
         * Polyfill for the get_object method.
         *
         * @since 2.0.0
         * @return false|object
         */
        public function get_payment()
        {
        }
        // end get_payment;
        /**
         * Get the object type associated with this event.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_object_type()
        {
        }
        // end get_object_type;
        /**
         * Set the object type associated with this event.
         *
         * @since 2.0.0
         * @param string $object_type The type of object related to this event. It's usually the model name.
         * @return void
         */
        public function set_object_type($object_type)
        {
        }
        // end set_object_type;
        /**
         * Get the object type associated with this event.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_slug()
        {
        }
        // end get_slug;
        /**
         * Set the object type associated with this event.
         *
         * @since 2.0.0
         * @param string $slug The event slug. It needs to be unique and preferably make it clear what it is about. Example: account_created is about creating an account.
         * @return void
         */
        public function set_slug($slug)
        {
        }
        // end set_slug;
        /**
         * Get iD of the related objects..
         *
         * @since 2.0.0
         * @return int
         */
        public function get_object_id()
        {
        }
        // end get_object_id;
        /**
         * Set iD of the related objects.
         *
         * @since 2.0.0
         * @param int $object_id The ID of the related objects.
         * @return void
         */
        public function set_object_id($object_id)
        {
        }
        // end set_object_id;
        /**
         * Transform the object into an assoc array.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_array()
        {
        }
        // end to_array;
        /**
         * Override to clear event count.
         *
         * @since 2.0.0
         * @return int|false
         */
        public function save()
        {
        }
    }
    /**
     * Payment model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Payment extends \WP_Ultimo\Models\Base_Model
    {
        use \WP_Ultimo\Models\Traits\Notable;
        /**
         * ID of the product of this payment.
         *
         * @since 2.0.0
         * @var int
         */
        protected $product_id;
        /**
         * ID of the customer attached to this payment.
         *
         * @since 2.0.0
         * @var int
         */
        protected $customer_id;
        /**
         * Membership ID.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $membership_id;
        /**
         * Parent payment.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $parent_id;
        /**
         * Currency for this payment. 3-letter currency code.
         *
         * @since 2.0.0
         * @var string
         */
        protected $currency;
        /**
         * Value before taxes, discounts, fees and etc.
         *
         * @since 2.0.0
         * @var float
         */
        protected $subtotal = 0;
        /**
         * Refund total in this payment.
         *
         * @since 2.0.0
         * @var float
         */
        protected $refund_total = 0;
        /**
         * The total value in discounts.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $discount_total = 0;
        /**
         * The amount, in currency, of the tax.
         *
         * @since 2.0.0
         * @var float
         */
        protected $tax_total = 0;
        /**
         * Discount code used.
         *
         * @since 2.0.0
         * @var string
         */
        protected $discount_code;
        /**
         * Total value of the payment.
         *
         * This takes into account fees, discounts, credits, etc.
         *
         * @since 2.0.0
         * @var float
         */
        protected $total = 0;
        /**
         * Status of the status.
         *
         * @since 2.0.0
         * @var string
         */
        protected $status;
        /**
         * Gateway used to process this payment.
         *
         * @since 2.0.0
         * @var string
         */
        protected $gateway;
        /**
         * ID of the payment on the gateway, if it exists.
         *
         * @since 2.0.0
         * @var string
         */
        protected $gateway_payment_id;
        /**
         * Array containing representations of the line items on this payment.
         *
         * @since 2.0.0
         * @var \WP_Ultimo\Checkout\Line_Item[]
         */
        protected $line_items;
        /**
         * Sequential invoice number assigned to this payment.
         *
         * @since 2.0.0
         * @var int
         */
        protected $invoice_number;
        /**
         * Holds if we need to cancel the membership on refund.
         *
         * @since 2.0.0
         * @var bool
         */
        protected $cancel_membership_on_refund;
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Payments\\Payment_Query';
        /**
         * Adds magic methods to return formatted values automatically.
         *
         * @since 2.0.0
         *
         * @param string $name Method name.
         * @param array  $args List of arguments.
         * @throws \BadMethodCallException Throws exception when method is not found.
         * @return mixed
         */
        public function __call($name, $args)
        {
        }
        // end __call;
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Gets the customer object associated with this payment.
         *
         * @todo Implement this.
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Customer;
         */
        public function get_customer()
        {
        }
        // end get_customer;
        /**
         * Get the value of customer_id.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_customer_id()
        {
        }
        // end get_customer_id;
        /**
         * Set the value of customer_id.
         *
         * @since 2.0.0
         * @param mixed $customer_id The ID of the customer attached to this payment.
         * @return void
         */
        public function set_customer_id($customer_id)
        {
        }
        // end set_customer_id;
        /**
         * Gets the membership object associated with this payment.
         *
         * @todo Implement this.
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Membership;
         */
        public function get_membership()
        {
        }
        // end get_membership;
        /**
         * Get membership ID.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_membership_id()
        {
        }
        // end get_membership_id;
        /**
         * Set membership ID.
         *
         * @since 2.0.0
         * @param mixed $membership_id The ID of the membership attached to this payment.
         * @return void
         */
        public function set_membership_id($membership_id)
        {
        }
        // end set_membership_id;
        /**
         * Get parent payment ID.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_parent_id()
        {
        }
        // end get_parent_id;
        /**
         * Set parent payment ID.
         *
         * @since 2.0.0
         * @param mixed $parent_id The ID from another payment that this payment is related to.
         * @return void
         */
        public function set_parent_id($parent_id)
        {
        }
        // end set_parent_id;
        /**
         * Get currency for this payment. 3-letter currency code.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_currency()
        {
        }
        // end get_currency;
        /**
         * Set currency for this payment. 3-letter currency code.
         *
         * @since 2.0.0
         * @param string $currency The currency of this payment. It's a 3-letter code. E.g. 'USD'.
         * @return void
         */
        public function set_currency($currency)
        {
        }
        // end set_currency;
        /**
         * Get value before taxes, discounts, fees and etc.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_subtotal()
        {
        }
        // end get_subtotal;
        /**
         * Set value before taxes, discounts, fees and etc.
         *
         * @since 2.0.0
         * @param float $subtotal Value before taxes, discounts, fees and other changes.
         * @return void
         */
        public function set_subtotal($subtotal)
        {
        }
        // end set_subtotal;
        /**
         * Get refund total in this payment.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_refund_total()
        {
        }
        // end get_refund_total;
        /**
         * Set refund total in this payment.
         *
         * @since 2.0.0
         * @param float $refund_total Total amount refunded.
         * @return void
         */
        public function set_refund_total($refund_total)
        {
        }
        // end set_refund_total;
        /**
         * Get the amount, in currency, of the tax.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_tax_total()
        {
        }
        // end get_tax_total;
        /**
         * Set the amount, in currency, of the tax.
         *
         * @since 2.0.0
         * @param float $tax_total The amount, in currency, of the tax.
         * @return void
         */
        public function set_tax_total($tax_total)
        {
        }
        // end set_tax_total;
        /**
         * Get discount code used.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_discount_code()
        {
        }
        // end get_discount_code;
        /**
         * Set discount code used.
         *
         * @since 2.0.0
         * @param string $discount_code Discount code used.
         * @return void
         */
        public function set_discount_code($discount_code)
        {
        }
        // end set_discount_code;
        /**
         * Get this takes into account fees, discounts, credits, etc.
         *
         * @since 2.0.0
         * @return float
         */
        public function get_total()
        {
        }
        // end get_total;
        /**
         * Set this takes into account fees, discounts, credits, etc.
         *
         * @since 2.0.0
         * @param float $total This takes into account fees, discounts and credits.
         * @return void
         */
        public function set_total($total)
        {
        }
        // end set_total;
        /**
         * Returns the Label for a given severity level.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_status_label()
        {
        }
        // end get_status_label;
        /**
         * Gets the classes for a given class.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_status_class()
        {
        }
        // end get_status_class;
        /**
         * Get status of the status.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_status()
        {
        }
        // end get_status;
        /**
         * Set status of the status.
         *
         * @since 2.0.0
         * @param string $status The payment status: Can be 'pending', 'completed', 'refunded', 'partially-refunded', 'partially-paid', 'failed', 'cancelled' or other values added by third-party add-ons.
         * @options \WP_Ultimo\Database\Payments\Payment_Status
         * @return void
         */
        public function set_status($status)
        {
        }
        // end set_status;
        /**
         * Get gateway used to process this payment.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_gateway()
        {
        }
        // end get_gateway;
        /**
         * Set gateway used to process this payment.
         *
         * @since 2.0.0
         * @param string $gateway ID of the gateway being used on this payment.
         * @return void
         */
        public function set_gateway($gateway)
        {
        }
        // end set_gateway;
        /**
         * Returns the payment method used. Usually it is the public name of the gateway.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_payment_method()
        {
        }
        // end get_payment_method;
        /**
         * Returns the product associated to this payment.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Product|false
         */
        public function get_product()
        {
        }
        // end get_product;
        /**
         * Checks if this payment has line items.
         *
         * This is used to decide if we need to add the payment as a line-item of itself.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_line_items()
        {
        }
        // end has_line_items;
        /**
         * Returns the line items for this payment.
         *
         * Line items are also \WP_Ultimo\Models\Payment objects, with the
         * type 'line-item'.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_line_items()
        {
        }
        // end get_line_items;
        /**
         * Set the line items of this payment.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Line_Item[] $line_items THe line items.
         * @return void
         */
        public function set_line_items($line_items)
        {
        }
        // end set_line_items;
        /**
         * Add a new line item.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Checkout\Line_Item $line_item The line item.
         * @return void
         */
        public function add_line_item($line_item)
        {
        }
        // end add_line_item;
        /**
         * Returns an array containing the subtotal per tax rate.
         *
         * @since 2.0.0
         * @return array $tax_rate => $tax_total.
         */
        public function get_tax_breakthrough()
        {
        }
        // end get_tax_breakthrough;
        /**
         * Recalculate payment totals.
         *
         * @todo needs refactoring to use line_items.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Models\Payment
         */
        public function recalculate_totals()
        {
        }
        // end recalculate_totals;
        /**
         * Checks if this payment is payable still.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_payable()
        {
        }
        // end is_payable;
        /**
         * Returns the link to pay for this payment.
         *
         * @since 2.0.0
         * @return false|string Returns false if the payment is not in a payable status.
         */
        public function get_payment_url()
        {
        }
        // end get_payment_url;
        /**
         * Get iD of the product of this payment.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_product_id()
        {
        }
        // end get_product_id;
        /**
         * Set iD of the product of this payment.
         *
         * @since 2.0.0
         * @param int $product_id The ID of the product of this payment.
         * @return void
         */
        public function set_product_id($product_id)
        {
        }
        // end set_product_id;
        /**
         * Generates the Invoice URL.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_invoice_url()
        {
        }
        // end get_invoice_url;
        /**
         * Get iD of the payment on the gateway, if it exists.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_gateway_payment_id()
        {
        }
        // end get_gateway_payment_id;
        /**
         * Set iD of the payment on the gateway, if it exists.
         *
         * @since 2.0.0
         * @param string $gateway_payment_id The ID of the payment on the gateway, if it exists.
         * @return void
         */
        public function set_gateway_payment_id($gateway_payment_id)
        {
        }
        // end set_gateway_payment_id;
        /**
         * By default, we just use the to_array method, but you can rewrite this.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_search_results()
        {
        }
        // end to_search_results;
        /**
         * Get the total value in discounts.
         *
         * @since 2.0.0
         * @return integer
         */
        public function get_discount_total()
        {
        }
        // end get_discount_total;
        /**
         * Set the total value in discounts.
         *
         * @since 2.0.0
         * @param integer $discount_total The total value of the discounts applied to this payment.
         * @return void
         */
        public function set_discount_total($discount_total)
        {
        }
        // end set_discount_total;
        /**
         * Get the invoice number actually saved on the payment.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_saved_invoice_number()
        {
        }
        // end get_saved_invoice_number;
        /**
         * Get sequential invoice number assigned to this payment.
         *
         * @since 2.0.0
         * @return int
         */
        public function get_invoice_number()
        {
        }
        // end get_invoice_number;
        /**
         * Set sequential invoice number assigned to this payment.
         *
         * @since 2.0.0
         * @param int $invoice_number Sequential invoice number assigned to this payment.
         * @return void
         */
        public function set_invoice_number($invoice_number)
        {
        }
        // end set_invoice_number;
        /**
         * Remove all non-recurring items from the payment.
         *
         * This is usually used when creating a new pending payment for
         * a membership that needs to be manually renewed.
         *
         * @since 2.0.0
         * @return self
         */
        public function remove_non_recurring_items()
        {
        }
        // end remove_non_recurring_items;
        /**
         * Get holds if we need to cancel the membership on refund..
         *
         * @since 2.0.0
         * @return bool
         */
        public function should_cancel_membership_on_refund()
        {
        }
        // end should_cancel_membership_on_refund;
        /**
         * Set holds if we need to cancel the membership on refund..
         *
         * @since 2.0.0
         * @param bool $cancel_membership_on_refund Holds if we need to cancel the membership on refund.
         * @return void
         */
        public function set_cancel_membership_on_refund($cancel_membership_on_refund)
        {
        }
        // end set_cancel_membership_on_refund;
        /**
         * Handles a payment refund.
         *
         * This DOES NOT contact the gateway to refund a payment.
         * It only updates the payment status to respond to a refund
         * confirmation that originated from the gateway.
         *
         * An example of how that would work:
         * 1. Admin issues a refund on the admin panel;
         * 2. PayPal (for example), process the refund request
         *    and sends back a IPN (webhook call) telling WP Ultimo
         *    that the refund was issued successfully;
         * 3. The IPN handler listens for that event and calls this
         *    to reflect the refund in the original WU payment.
         *
         * @since 2.0.0
         *
         * @param boolean      $amount The amount to refund.
         * @param null|boolean $should_cancel_membership_on_refund If we should cancel a membership as well.
         * @return void|bool
         */
        public function refund($amount = false, $should_cancel_membership_on_refund = null)
        {
        }
        // end refund;
        /**
         * Creates a copy of the given model adn resets it's id to a 'new' state.
         *
         * @since 2.0.0
         * @return \WP_Ultimo\Model\Base_Model
         */
        public function duplicate()
        {
        }
    }
    /**
     * Webhook model class. Implements the Base Model.
     *
     * @since 2.0.0
     */
    class Webhook extends \WP_Ultimo\Models\Base_Model
    {
        /**
         * The name of the webhook.
         *
         * @since 2.0.0
         * @var string
         */
        protected $name = '';
        /**
         * URL to be called when this webhook is triggered.
         *
         * @since 2.0.0
         * @var string
         */
        protected $webhook_url = '';
        /**
         * Event that should trigger this webhook.
         *
         * @since 2.0.0
         * @var string
         */
        protected $event = '';
        /**
         * The number of times this webhook was triggered.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $event_count = 0;
        /**
         * Is this webhook active?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $active = true;
        /**
         * Is this webhook hidden?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hidden = false;
        /**
         * Integration name.
         *
         * @since 2.0.0
         * @var string
         */
        protected $integration = 'manual';
        /**
         * Date when this was created.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_created;
        /**
         * Date when this webhook last failed.
         *
         * @since 2.0.0
         * @var string
         */
        protected $date_last_failed;
        /**
         * Query Class to the static query methods.
         *
         * @since 2.0.0
         * @var string
         */
        protected $query_class = '\\WP_Ultimo\\Database\\Webhooks\\Webhook_Query';
        /**
         * Set the validation rules for this particular model.
         *
         * To see how to setup rules, check the documentation of the
         * validation library we are using: https://github.com/rakit/validation
         *
         * @since 2.0.0
         * @link https://github.com/rakit/validation
         * @return array
         */
        public function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Get the value of name.
         *
         * @return string
         */
        public function get_name()
        {
        }
        // end get_name;
        /**
         * Set the value of name.
         *
         * @param string $name Webhook name, which is used as product title as well.
         */
        public function set_name($name)
        {
        }
        // end set_name;
        /**
         * Get the value of webhook_url.
         *
         * @return string
         */
        public function get_webhook_url()
        {
        }
        // end get_webhook_url;
        /**
         * Set the value of webhook_url.
         *
         * @param string $webhook_url The URL used for the webhook call.
         */
        public function set_webhook_url($webhook_url)
        {
        }
        // end set_webhook_url;
        /**
         * Get the value of event.
         *
         * @return string
         */
        public function get_event()
        {
        }
        // end get_event;
        /**
         * Set the value of event.
         *
         * @param string $event The event that needs to be fired for this webhook to be sent.
         */
        public function set_event($event)
        {
        }
        // end set_event;
        /**
         * Get the value of event_count.
         *
         * @return int The number of times this webhook was triggered and sent.
         */
        public function get_event_count()
        {
        }
        // end get_event_count;
        /**
         * Set the value of event_count.
         *
         * @param int $event_count How many times this webhook was sent.
         */
        public function set_event_count($event_count)
        {
        }
        // end set_event_count;
        /**
         * Check if this particular mapping is active.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_active()
        {
        }
        // end is_active;
        /**
         * Sets the active state of this model object;
         *
         * @since 2.0.0
         *
         * @param boolean $active Set this webhook as active (true), which means available will fire when the event occur, or inactive (false).
         * @return void
         */
        public function set_active($active)
        {
        }
        // end set_active;
        /**
         * Get is this webhook hidden?
         *
         * @return boolean.
         */
        public function is_hidden()
        {
        }
        // end is_hidden;
        /**
         * Set is this webhook hidden?
         *
         * @param boolean $hidden Is this webhook hidden.
         */
        public function set_hidden($hidden)
        {
        }
        // end set_hidden;
        /**
         * Get integration name.
         *
         * @return string
         */
        public function get_integration()
        {
        }
        // end get_integration;
        /**
         * Get date when this was created..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_created()
        {
        }
        // end get_date_created;
        /**
         * Get date when this was created..
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_last_failed()
        {
        }
        // end get_date_last_failed;
        /**
         * Set date when this was created..
         *
         * @since 2.0.0
         * @param string $date_created Date when this was created.
         * @return void
         */
        public function set_date_created($date_created)
        {
        }
        // end set_date_created;
        /**
         * Set integration name.
         *
         * @param string $integration The integration that created this webhook.
         */
        public function set_integration($integration)
        {
        }
        // end set_integration;
        /**
         * Get the last fail date.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_date_last_fail()
        {
        }
        // end get_date_last_fail;
        /**
         * Set the last fail date.
         *
         * @param string $date_last_fail  The date when this webhook last fail.
         */
        public function set_date_last_fail($date_last_fail)
        {
        }
    }
}
namespace WP_Ultimo\Objects {
    /**
     * Billing Address class
     *
     * @since 2.0.0
     */
    class Billing_Address
    {
        /**
         * The Billing Address content.
         *
         * @since 2.0.0
         * @var array
         */
        protected $attributes = array();
        /**
         * Initializes the object.
         *
         * @since 2.0.0
         *
         * @param array $data Array of key => values billing address fields.
         */
        public function __construct($data = array())
        {
        }
        // end __construct;
        /**
         * Loops through allowed fields and loads them.
         *
         * @since 2.0.0
         *
         * @param array $data Array of key => values billing address fields.
         * @return void
         */
        public function attributes($data)
        {
        }
        // end attributes;
        /**
         * Checks if this billing address has any content at all.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function exists()
        {
        }
        // end exists;
        /**
         * Checks if a parameter exists.
         *
         * @since 2.0.0
         *
         * @param string $name The parameter to check.
         * @return boolean
         */
        public function __isset($name)
        {
        }
        // end __isset;
        /**
         * Gets a billing address field.
         *
         * @since 2.0.0
         *
         * @param string $name The parameter to return.
         * @return string
         */
        public function __get($name)
        {
        }
        // end __get;
        /**
         * Sets a billing address field.
         *
         * @since 2.0.0
         *
         * @param string $name Field name.
         * @param string $value The field value.
         */
        public function __set($name, $value)
        {
        }
        // end __set;
        /**
         * Returns the validation rules for the billing address fields.
         *
         * @since 2.0.0
         * @return array
         */
        protected function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Validates the fields following the validation rules.
         *
         * @since 2.0.0
         * @return true|\WP_Error
         */
        public function validate()
        {
        }
        // end validate;
        /**
         * Returns a key => value representation of the billing address.
         *
         * @since 2.0.0
         *
         * @param boolean $labels Wether or not to return labels as keys or the actual keys.
         * @return array
         */
        public function to_array($labels = false)
        {
        }
        // end to_array;
        /**
         * Returns a string representation of the billing address.
         *
         * Example:
         *
         * Company Name
         * Tax ID
         * Address 1
         * ...
         *
         * @since 2.0.0
         *
         * @param string $delimiter Delimiter to glue address pieces together.
         * @return string
         */
        public function to_string($delimiter = PHP_EOL)
        {
        }
        // end to_string;
        /**
         * Returns the field array with values added.
         *
         * @since 2.0.0
         * @param bool $zip_only If we only need zip and country.
         * @return array
         */
        public function get_fields($zip_only = false)
        {
        }
        // end get_fields;
        /**
         * Billing Address field definitions.
         *
         * This is used to determine fields allowed on the billing address.
         *
         * @since 2.0.0
         * @param bool $zip_only If we only need zip and country.
         * @return array
         */
        public static function fields($zip_only = false)
        {
        }
        // end fields;
        /**
         * Billing Address fields array for REST API.
         *
         * @since 2.0.0
         * @param bool $zip_only If we only need zip and country.
         * @return array
         */
        public static function fields_for_rest($zip_only = false)
        {
        }
    }
    /**
     * Limitation manager.
     *
     * This class centralizes the limitation modules.
     *
     * @since 2.0.0
     */
    class Limitations
    {
        /**
         * Caches early limitation queries to prevent
         * to many database hits.
         *
         * @since 2.0.0
         * @var array
         */
        static $limitations_cache = array();
        /**
         * Version of the limitation schema.
         *
         * @since 2.0.0
         * @var integer
         */
        protected $version = 2;
        /**
         * Limitation modules.
         *
         * @since 2.0.0
         * @var array
         */
        protected $modules = array();
        /**
         * Constructs the limitation class with module data.
         *
         * @since 2.0.0
         *
         * @param array $modules_data Array of modules data.
         */
        public function __construct($modules_data = array())
        {
        }
        // end __construct;
        /**
         * Returns the module via magic getter.
         *
         * @since 2.0.0
         *
         * @param string $name The module name.
         * @return \WP_Ultimo\Limitations\Limit
         */
        public function __get($name)
        {
        }
        // end __get;
        /**
         * Prepare to serialization.
         *
         * @see requires php 7.3
         * @since 2.0.0
         * @return array
         */
        public function __serialize()
        {
        }
        // end __serialize;
        /**
         * Handles un-serialization.
         *
         * @since 2.0.0
         *
         * @see requires php 7.3
         * @param array $modules_data Array of modules data.
         * @return void
         */
        public function __unserialize($modules_data)
        {
        }
        // end __unserialize;
        /**
         * Builds the module list based on the module data.
         *
         * @since 2.0.0
         *
         * @param array $modules_data Array of modules data.
         * @return self
         */
        public function build_modules($modules_data)
        {
        }
        // end build_modules;
        /**
         * Build a module, based on the data.
         *
         * @since 2.0.0
         *
         * @param array  $data The module data.
         * @param string $module_name The module_name.
         * @return false|\WP_Ultimo\Limitations\Limit
         */
        public static function build($data, $module_name)
        {
        }
        // end build;
        /**
         * Checks if a limitation model exists in this limitations.
         *
         * @since 2.0.0
         *
         * @param string $module The module name.
         * @return bool
         */
        public function exists($module)
        {
        }
        // end exists;
        /**
         * Checks if we have any limitation modules setup at all.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_limitations()
        {
        }
        // end has_limitations;
        /**
         * Checks if a particular module is enabled.
         *
         * @since 2.0.0
         *
         * @param string $module_name Module name.
         * @return boolean
         */
        public function is_module_enabled($module_name)
        {
        }
        // end is_module_enabled;
        /**
         * Merges limitations from other entities.
         *
         * This is what we use to combine different limitations from
         * different sources. For example: we override the limitations
         * of site with restrictions coming from the membership,
         * products, etc.
         *
         * @since 2.0.0
         *
         * @param array ...$limitations Limitation arrays.
         * @return self
         */
        public function merge(...$limitations)
        {
        }
        // end merge;
        /**
         * Converts the limitations list to an array.
         *
         * @since 2.0.0
         * @return array
         */
        public function to_array()
        {
        }
        // end to_array;
        /**
         * Static method to return limitations in very early stages of the WordPress lifecycle.
         *
         * @since 2.0.0
         *
         * @param string $slug Slug of the model.
         * @param int    $id ID of the model.
         * @return \WP_Ultimo\Objects\Limitations
         */
        public static function early_get_limitations($slug, $id)
        {
        }
        // end early_get_limitations;
        /**
         * Delete limitations.
         *
         * @since 2.0.0
         *
         * @param string $slug The slug of the model.
         * @param int    $id The id of the meta id.
         * @return void
         */
        public static function remove_limitations($slug, $id)
        {
        }
        // end remove_limitations;
        /**
         * Returns an empty permission set, with modules.
         *
         * @since 2.0.0
         * @return self
         */
        public static function get_empty()
        {
        }
        // end get_empty;
        /**
         * Repository of the limitation modules.
         *
         * @see wu_register_limit_module()
         *
         * @since 2.0.0
         * @return array
         */
        public static function repository()
        {
        }
    }
    /**
     * Note class
     *
     * @since 2.0.0
     */
    class Note
    {
        /**
         * The Note content.
         *
         * @since 2.0.0
         * @var array
         */
        protected $attributes = array();
        /**
         * Initializes the object.
         *
         * @since 2.0.0
         *
         * @param array $data Array of key => values note fields.
         */
        public function __construct($data = array())
        {
        }
        // end __construct;
        /**
         * Loops through allowed fields and loads them.
         *
         * @since 2.0.0
         *
         * @param array $data Array of key => values note fields.
         * @return void
         */
        public function attributes($data)
        {
        }
        // end attributes;
        /**
         * Checks if this note has any content at all.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function exists()
        {
        }
        // end exists;
        /**
         * Checks if a parameter exists.
         *
         * @since 2.0.0
         *
         * @param string $name The parameter to check.
         * @return boolean
         */
        public function __isset($name)
        {
        }
        // end __isset;
        /**
         * Gets a note field.
         *
         * @since 2.0.0
         *
         * @param string $name The parameter to return.
         * @return string
         */
        public function __get($name)
        {
        }
        // end __get;
        /**
         * Sets a note field.
         *
         * @since 2.0.0
         *
         * @param string $name Field name.
         * @param string $value The field value.
         */
        public function __set($name, $value)
        {
        }
        // end __set;
        /**
         * Returns the validation rules for new notes.
         *
         * @since 2.0.0
         * @return array
         */
        protected function validation_rules()
        {
        }
        // end validation_rules;
        /**
         * Validates the fields following the validation rules.
         *
         * @since 2.0.0
         * @return true|\WP_Error
         */
        public function validate()
        {
        }
        // end validate;
        /**
         * Returns a key => value representation of the notes fields.
         *
         * @since 2.0.0
         *
         * @param boolean $labels Wether or not to return labels as keys or the actual keys.
         * @return array
         */
        public function to_array($labels = false)
        {
        }
        // end to_array;
        /**
         * Returns the contents of the note.
         *
         * @since 2.0.0
         *
         * @param string $delimiter Delimiter to glue address pieces together.
         * @return string
         */
        public function to_string($delimiter = PHP_EOL)
        {
        }
        // end to_string;
        /**
         * Note field definitions.
         *
         * This is used to determine fields allowed on the note.
         *
         * @since 2.0.0
         * @return array
         */
        public static function fields()
        {
        }
    }
    /**
     * Visit manager for sites.
     *
     * @since 2.0.0
     */
    class Visits
    {
        /**
         * Key to save on the database.
         */
        const KEY = 'wu_visits';
        /**
         * The site id.
         *
         * @since 2.0.0
         * @var int
         */
        protected $site_id;
        /**
         * Sets the current site to manage.
         *
         * @since 2.0.0
         *
         * @param int $site_id The current site id.
         */
        public function __construct($site_id)
        {
        }
        // end __construct;
        /**
         * Returns the meta key to save visits.
         *
         * @since 2.0.0
         *
         * @param boolean $day The day in the Ymd format. E.g. 20210211.
         * @return string
         */
        protected function get_meta_key($day)
        {
        }
        // end get_meta_key;
        /**
         * Adds visits to a site count.
         *
         * @since 2.0.0
         *
         * @param integer $count Counts to add.
         * @param boolean $day The day in the Ymd format. E.g. 20210211.
         * @return bool
         */
        public function add_visit($count = 1, $day = false)
        {
        }
        // end add_visit;
        /**
         * Returns an array of the dates and counts by day.
         *
         * @since 2.0.0
         *
         * @param bool|string $start_date The start date. Any strtotime-compatible string works.
         * @param bool|string $end_date The end date. Any strtotime-compatible string works.
         * @return array
         */
        public function get_visits($start_date = false, $end_date = false)
        {
        }
        // end get_visits;
        /**
         * The total visits for the current site.
         *
         * @since 2.0.0
         *
         * @param bool|string $start_date The start date. Any strtotime-compatible string works.
         * @param bool|string $end_date The end date. Any strtotime-compatible string works.
         * @return int
         */
        public function get_visit_total($start_date = false, $end_date = false)
        {
        }
        // end get_visit_total;
        /**
         * Get sites by visit count.
         *
         * @since 2.0.0
         *
         * @param bool|string $start_date The start date. Any strtotime-compatible string works.
         * @param bool|string $end_date The end date. Any strtotime-compatible string works.
         * @param integer     $limit The number of sites to return.
         * @return array
         */
        public static function get_sites_by_visit_count($start_date = false, $end_date = false, $limit = 5)
        {
        }
    }
}
namespace WP_Ultimo\Rollback {
    /**
     * Our own upgrader skin implementation that does not display errors.
     *
     * @since 2.0.0
     */
    class Quiet_Plugin_Upgrader_Skin extends \Plugin_Upgrader_Skin
    {
        /**
         * Silence is golden...
         *
         * @since 2.0.0
         * @return void
         */
        public function header()
        {
        }
        // end header;
        /**
         * Silence is golden...
         *
         * @since 2.0.0
         * @return void
         */
        public function footer()
        {
        }
        // end footer;
        /**
         * Print errors.
         *
         * @since 2.0.0
         *
         * @param string|WP_Error $errors Errors.
         * @return void
         */
        public function error($errors)
        {
        }
        // end error;
        /**
         * Passes messages down to the upgrader class.
         *
         * @since 2.0.0
         *
         * @param string $string The error message.
         * @param mixed  ...$args other arguments.
         * @return void
         */
        public function feedback($string, ...$args)
        {
        }
        // end feedback;
        /**
         * Removes output.
         *
         * @since 2.0.0
         *
         * @param string $type it doesn't matter.
         * @return void
         */
        protected function decrement_update_count($type)
        {
        }
    }
    /**
     * WP Ultimo Rollback Plugin Upgrader
     *
     * @since 2.0.0
     */
    class Rollback_Plugin_Upgrader extends \Plugin_Upgrader
    {
        /**
         * Holds messages.
         *
         * @since 2.0.0
         * @var array
         */
        public $messages = array();
        /**
         * Plugin rollback.
         *
         * @param string $plugin Plugin Slug.
         * @param array  $args Arguments.
         *
         * @return array|bool|\WP_Error
         */
        public function rollback($plugin, $args = array())
        {
        }
    }
    /**
     * WP Ultimo Rollback.
     *
     * @since 2.0.0
     */
    class Rollback
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Holds the URL for serving build files.
         *
         * @since 2.0.0
         *
         * @var string
         */
        public $updates_url = 'https://versions.nextpress.co/updates/?action=get_metadata&slug=wp-ultimo';
        /**
         * Init
         *
         * @since 1.0
         *
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Loads the rollback admin page.
         *
         * @since 2.0.7
         * @return void
         */
        public function load_admin_page()
        {
        }
        // end load_admin_page;
        /**
         * Handle the Rollback action.
         *
         * @since 2.0.0
         *
         * @return mixed
         */
        public function handle_rollback_process()
        {
        }
        // end handle_rollback_process;
        /**
         * Adds the rollback link to the WP Ultimo plugin omn the Plugin list table.
         *
         * @since 2.0.0
         *
         * @param string $actions Current actions.
         * @param string $plugin_file The path of the plugin file.
         * @param array  $plugin_data Data about the plugin.
         * @param string $context Context of the table.
         * @return string New actions list.
         */
        public function plugin_page_action_links($actions, $plugin_file, $plugin_data, $context)
        {
        }
        // end plugin_page_action_links;
        /**
         * Process the Rollback.
         *
         * @since 2.0.0
         *
         * @param array $args Arguments.
         * @return void
         */
        public function process_rollback($args = array())
        {
        }
        // end process_rollback;
        /**
         * Get the URLs we will need to use to rollback.
         *
         * @since 2.0.0
         *
         * @param string $action Action to add to the URL.
         * @param array  $args Parameters to add.
         * @return string
         */
        public function get_versions_url($action = 'download', $args = array())
        {
        }
        // end get_versions_url;
        /**
         * Get the available list of versions.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_available_versions()
        {
        }
    }
}
namespace WP_Ultimo\Site_Templates {
    /**
     * Replaces the content of templates with placeholders.
     *
     * @since 2.0.0
     */
    class Template_Placeholders
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Keeps a copy of the placeholders as saved.
         *
         * @since 2.0.0
         * @var array
         */
        protected $placeholders_as_saved = array();
        /**
         * Keeps an array of placeholder => value.
         *
         * @since 2.0.0
         * @var array
         */
        protected $placeholders = array();
        /**
         * Holds the placeholder tags.
         *
         * @since 2.0.0
         * @var array
         */
        protected $placeholder_keys = array();
        /**
         * Holds the placeholder values.
         *
         * @since 2.0.0
         * @var array
         */
        protected $placeholder_values = array();
        /**
         * Loads the placeholders and adds the hooks.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Loads the placeholders to keep them "cached".
         *
         * @since 2.0.0
         * @return void
         */
        protected function load_placeholders()
        {
        }
        // end load_placeholders;
        /**
         * Adds curly braces to the placeholders.
         *
         * @since 2.0.0
         *
         * @param string $tag The placeholder string.
         * @return string
         */
        protected function add_curly_braces($tag)
        {
        }
        // end add_curly_braces;
        /**
         * Replace the contents with the placeholders.
         *
         * @since 2.0.0
         *
         * @param string $content The content of the post.
         * @return string
         */
        public function placeholder_replacer($content)
        {
        }
        // end placeholder_replacer;
        /**
         * Serve placeholders via ajax.
         *
         * @since 2.0.0
         * @return void
         */
        public function serve_placeholders_via_ajax()
        {
        }
        // end serve_placeholders_via_ajax;
        /**
         * Save the placeholders.
         *
         * @since 2.0.0
         * @return void
         */
        public function save_placeholders()
        {
        }
        // end save_placeholders;
        /**
         * Adds the template placeholders admin page.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_template_placeholders_admin_page()
        {
        }
    }
}
namespace WP_Ultimo\Tax {
    /**
     * WP Ultimo Dashboard Tax Admin Panel
     */
    class Dashboard_Taxes_Tab
    {
        /**
         * Constructor
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Checks if tax support is enabled or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        protected function is_enabled()
        {
        }
        // end is_enabled;
        /**
         * Add_tab to dashboard
         *
         * @since 2.0.0
         *
         * @param array $dashboard_filters Dashboard tabs.
         */
        public function add_tab($dashboard_filters)
        {
        }
        // end add_tab;
        /**
         * Renders the disabled message, if taxes are not enabled.
         *
         * @since 2.0.0
         * @return void
         */
        public function disabled_message()
        {
        }
        // end disabled_message;
        /**
         * Adds a back link to the taxes without tax.
         *
         * @since 2.0.0
         *
         * @param array $links The already existent links.
         * @return array
         */
        public function add_back_link($links)
        {
        }
        // end add_back_link;
        /**
         * Register_widgets
         *
         * @since 2.0.0
         *
         * @param string                                      $tab Name of selected tab.
         * @param \WP_Screen                                  $screen The current screen object.
         * @param \WP_Ultimo\Admin_Pages\Dashboard_Admin_Page $dashboard_page Name of selected tab.
         * @return void
         */
        public function register_widgets($tab, $screen, $dashboard_page)
        {
        }
        // end register_widgets;
        /**
         * Registers the necessary scripts to handle the tax graph.
         *
         * @todo: extract the calculations onto their own function.
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Renders the tax graph.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_widget_taxes()
        {
        }
        // end output_widget_taxes;
        /**
         * Renders the taxes by rate widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_widget_taxes_by_rate()
        {
        }
        // end output_widget_taxes_by_rate;
        /**
         * Renders the taxes by date widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function output_widget_taxes_by_day()
        {
        }
    }
    /**
     * WP Ultimo Tax Class.
     *
     * @since 2.0.0
     */
    class Tax
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Adds hooks to be added at the original instantiations.
         *
         * @since 1.9.0
         */
        public function init()
        {
        }
        // end init;
        /**
         * Register tax settings.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_settings()
        {
        }
        // end add_settings;
        /**
         * Adds the sidebar widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_sidebar_widget()
        {
        }
        // end add_sidebar_widget;
        /**
         * Checks if this functionality is available and should be loaded.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_enabled()
        {
        }
        // end is_enabled;
        /**
         * Adds the Tax Rate edit admin screen.
         *
         * @since 2.0.0
         * @return void
         */
        public function add_admin_page()
        {
        }
        // end add_admin_page;
        /**
         * Loads the EU Vat class that handles European Union Taxes.
         *
         * @since 2.0.0
         * @return void
         */
        public function maybe_load_eu_vat()
        {
        }
        // end maybe_load_eu_vat;
        /**
         * Returns the Tax Rate Types available in the platform; Filterable
         *
         * @since 2.0.0
         * @return array
         */
        public function get_tax_rate_types()
        {
        }
        // end get_tax_rate_types;
        /**
         * Returns the default elements of a tax rate.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_tax_rate_defaults()
        {
        }
        // end get_tax_rate_defaults;
        /**
         * Returns the registered tax rates.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_tax_rates()
        {
        }
        // end get_tax_rates;
        /**
         * Retrieves the tax rates to serve via ajax.
         *
         * @since 2.0.0
         * @return void
         */
        public function serve_taxes_rates_via_ajax()
        {
        }
        // end serve_taxes_rates_via_ajax;
        /**
         * Handles the saving of new tax rates.
         *
         * @since 2.0.0
         * @return void
         */
        public function save_taxes_rates()
        {
        }
        // end save_taxes_rates;
        /**
         * Render the tax side panel.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_taxes_side_panel()
        {
        }
    }
}
namespace WP_Ultimo\UI {
    /**
     * Base class to UI elements that are rendered on the backend and the frontend.
     *
     * @since 2.0.0
     */
    abstract class Base_Element
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        protected $id;
        /**
         * Should this element be hidden by default?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hidden_by_default = false;
        /**
         * Controls whether or not the widget and element should display.
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $display = true;
        /**
         * If the element exists, we pre-load the parameters.
         *
         * @since 2.0.0
         * @var false|array
         */
        protected $pre_loaded_attributes = false;
        /**
         * Only load (run the setup method) once,
         *
         * This is specially true when in the admin context,
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $loaded = false;
        /**
         * Keeps a cached list of metabox ids to shave some time.
         *
         * @since 2.0.0
         * @var array
         */
        protected static $metabox_cache = null;
        /**
         * The icon of the UI element.
         *
         * E.g. return fa fa-search.
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public abstract function get_icon($context = 'block');
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public abstract function get_title();
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public abstract function get_description();
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public abstract function fields();
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Checkout',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public abstract function keywords();
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public abstract function defaults();
        // end defaults;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public abstract function output($atts, $content = null);
        // end output;
        // Boilerplate -----------------------------------
        /**
         * Initializes the singleton.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Sets blocks up for the block editor.
         *
         * @since 2.0.0
         *
         * @param null  $short_circuit The value passed.
         * @param array $block The parsed block data.
         * @return null
         */
        public function setup_for_block_editor($short_circuit, $block)
        {
        }
        // end setup_for_block_editor;
        /**
         * Search for an element id on the list of metaboxes.
         *
         * Builds a cached list of elements on the first run.
         * Then uses the cache to run a simple in_array check.
         *
         * @since 2.0.0
         *
         * @param string $element_id The element ID.
         * @return bool
         */
        protected static function search_in_metaboxes($element_id)
        {
        }
        // end search_in_metaboxes;
        /**
         * Setup element on admin pages.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_for_admin()
        {
        }
        // end setup_for_admin;
        /**
         * Maybe run setup, when the shortcode or block is found.
         *
         * @todo check if this is working only when necessary.
         * @since 2.0.0
         * @return void
         */
        public function maybe_setup()
        {
        }
        // end maybe_setup;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * Checks content to see if the current element is present.
         *
         * This check uses different methods, covering classic shortcodes,
         * blocks. It also adds a generic filter so developers can
         * add additional tests for different builders and so on.
         *
         * @since 2.0.0
         *
         * @param string        $content The content that might contain the element.
         * @param null|\WP_Post $post The WP Post, if it exists.
         * @return bool
         */
        protected function contains_current_element($content, $post = null)
        {
        }
        // end contains_current_element;
        /**
         * Tries to extract element arguments depending on the element type.
         *
         * @since 2.0.0
         *
         * @param string $content The content to parse.
         * @param string $type The element type. Can be one of shortcode, block, and other.
         * @return false|array
         */
        protected function maybe_extract_arguments($content, $type = 'shortcode')
        {
        }
        // end maybe_extract_arguments;
        /**
         * Adds custom CSS to the signup screen.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_element_scripts()
        {
        }
        // end enqueue_element_scripts;
        /**
         * Tries to parse the shortcode content on page load.
         *
         * This allow us to have access to parameters before the shortcode
         * gets actually parsed by the post content functions such as
         * the_content(). It is useful if you need to access that
         * date way earlier in the page lifecycle.
         *
         * @since 2.0.0
         *
         * @param string $name The parameter name.
         * @param mixed  $default The default value.
         * @return mixed
         */
        public function get_pre_loaded_attribute($name, $default = false)
        {
        }
        // end get_pre_loaded_attribute;
        /**
         * Registers the shortcode.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_shortcode()
        {
        }
        // end register_shortcode;
        /**
         * Registers the forms.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_form()
        {
        }
        // end register_form;
        /**
         * Adds the modal to copy the shortcode for this particular element.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_generator_modal()
        {
        }
        // end render_generator_modal;
        /**
         * Adds the modal customize the widget block
         *
         * @since 2.0.0
         * @return void
         */
        public function render_customize_modal()
        {
        }
        // end render_customize_modal;
        /**
         * Saves the customization settings for a given widget.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_customize_modal()
        {
        }
        // end handle_customize_modal;
        /**
         * Registers scripts and styles necessary to render this.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_default_scripts()
        {
        }
        // end register_default_scripts;
        /**
         * Registers scripts and styles necessary to render this.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Loads dependencies that might not be available at render time.
         *
         * @since 2.0.0
         * @return void
         */
        public function dependencies()
        {
        }
        // end dependencies;
        /**
         * Returns the ID of this UI element.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_id()
        {
        }
        // end get_id;
        /**
         * Returns the ID of this UI element.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_shortcode_id()
        {
        }
        // end get_shortcode_id;
        /**
         * Treats the attributes before passing them down to the output method.
         *
         * @since 2.0.0
         *
         * @param array $atts The element attributes.
         * @return string
         */
        public function display($atts)
        {
        }
        // end display;
        /**
         * Retrieves a cleaned up version of the content.
         *
         * This method strips out vue reactivity tags and more.
         *
         * @since 2.0.0
         *
         * @param array $atts The element attributes.
         * @return string
         */
        public function display_template($atts)
        {
        }
        // end display_template;
        /**
         * Checks if we need to display admin management attachments.
         *
         * @since 2.0.0
         *
         * @return bool
         */
        public function should_display_customize_controls()
        {
        }
        // end should_display_customize_controls;
        /**
         * Adds the element as a inline block, without the admin widget frame.
         *
         * @since 2.0.0
         *
         * @param string $screen_id The screen id.
         * @param string $hook The hook to add the content to. Defaults to admin_notices.
         * @param array  $atts Array containing the shortcode attributes.
         * @return void
         */
        public function as_inline_content($screen_id, $hook = 'admin_notices', $atts = array())
        {
        }
        // end as_inline_content;
        /**
         * Save the widget options.
         *
         * @since 2.0.0
         *
         * @param array $settings The settings to save. Key => value array.
         * @return void
         */
        public function save_widget_settings($settings)
        {
        }
        // end save_widget_settings;
        /**
         * Retrieves the settings for a particular widget.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_widget_settings()
        {
        }
        // end get_widget_settings;
        /**
         * Adds the element as a metabox.
         *
         * @since 2.0.0
         *
         * @param string $screen_id The screen id.
         * @param string $position Position on the screen.
         * @param array  $atts Array containing the shortcode attributes.
         * @return void
         */
        public function as_metabox($screen_id, $position = 'normal', $atts = array())
        {
        }
        // end as_metabox;
        /**
         * Adds note for super admins.
         *
         * Adds an admin notice to let the super admin know
         * how to use the widgets.
         *
         * @since 2.0.0
         * @return void
         */
        public function super_admin_notice()
        {
        }
        // end super_admin_notice;
        /**
         * Checks if we are in a preview context.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_preview()
        {
        }
        // end is_preview;
        /**
         * Get controls whether or not the widget and element should display..
         *
         * @since 2.0.0
         * @return boolean
         */
        public function should_display()
        {
        }
        // end should_display;
        /**
         * Set controls whether or not the widget and element should display..
         *
         * @since 2.0.0
         * @param boolean $display Controls whether or not the widget and element should display.
         * @return void
         */
        public function set_display($display)
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Account_Summary_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'account-summary';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Checkout',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
        // end output;
        /**
         * Returns the manage URL for sites, depending on the environment.
         *
         * @since 2.0.0
         *
         * @param int $site_id A Site ID.
         * @return string
         */
        public function get_manage_url($site_id)
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Billing_Info_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'billing-info';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * Overload the init to add site-related forms.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Loads the required scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Billing Information',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
        // end output;
        /**
         * Apply the placeholders to the fields.
         *
         * @since 2.0.0
         *
         * @param array $fields The billing fields.
         * @return array
         */
        protected function apply_placeholders($fields)
        {
        }
        // end apply_placeholders;
        /**
         * Renders the update billing address form.
         *
         * @since 2.0.0
         * @return string
         */
        public function render_update_billing_address()
        {
        }
        // end render_update_billing_address;
        /**
         * Handles the password reset form.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_update_billing_address()
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Checkout_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'checkout';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Checkout',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Checks if we are on a thank you page.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_thank_you_page()
        {
        }
        // end is_thank_you_page;
        /**
         * Triggers the setup event to allow the checkout class to hook in.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Print the Custom CSS added on the checkout.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Models\Checkout_Form $checkout_form The current checkout form.
         * @return void
         */
        public function print_custom_css($checkout_form)
        {
        }
        // end print_custom_css;
        /**
         * Outputs thank you page.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output_thank_you($atts, $content = null)
        {
        }
        // end output_thank_you;
        /**
         * Outputs the registration form.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output_form($atts, $content = null)
        {
        }
        // end output_form;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    // end class Checkout_Element;
    /**
     * Replacement of the old WU_Signup class for templates.
     *
     * @since 2.0.0
     */
    class Mocked_Signup
    {
        /**
         * Holds the list of settings
         *
         * @since 2.0.0
         * @var array
         */
        public $steps = array();
        /**
         * Constructs the class.
         *
         * @since 2.0.0
         *
         * @param string $step Current step.
         * @param array  $steps List of all steps.
         */
        public function __construct($step, $steps)
        {
        }
        // end __construct;
        /**
         * Get the value of steps.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_steps()
        {
        }
        // end get_steps;
        /**
         * Deprecated: returns the prev step link.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_prev_step_link()
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Current_Membership_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'current-membership';
        /**
         * Overload the init to add site-related forms.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Loads the required scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Membership',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
        // end output;
        /**
         * Renders the product details modal window.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_product_details()
        {
        }
        // end render_product_details;
        /**
         * Renders the update billing address form.
         *
         * @since 2.0.0
         * @return string
         */
        public function render_change_plan()
        {
        }
        // end render_change_plan;
        /**
         * Handles the password reset form.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_change_plan()
        {
        }
        // end handle_change_plan;
        /**
         * Get upgrade URL.
         *
         * @since 2.0.0
         *
         * @param string $membership_hash The membership hash to edit.
         * @return string
         */
        public function get_upgrade_form_url($membership_hash)
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Current_Site_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'current-site';
        /**
         * The site being managed.
         *
         * @since 2.0.0
         * @var null|\WP_Ultimo\Models\Site
         */
        public $site;
        /**
         * The membership being managed.
         *
         * @since 2.0.0
         * @var null|\WP_Ultimo\Models\Membership
         */
        public $membership;
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * Overload the init to add site-related forms.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Site',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * Loads the required scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
        // end output;
        /**
         * Renders the edit site modal.
         *
         * @since 2.0.0
         * @return string
         */
        public function render_edit_site()
        {
        }
        // end render_edit_site;
        /**
         * Handles the password reset form.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_edit_site()
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Domain_Mapping_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'domain-mapping';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Checkout',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Initializes the singleton.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Loads the required scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Register ajax forms used to add a new domain.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_forms()
        {
        }
        // end register_forms;
        /**
         * Renders the add new customer modal.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_user_add_new_domain_modal()
        {
        }
        // end render_user_add_new_domain_modal;
        /**
         * Handles creation of a new customer.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_user_add_new_domain_modal()
        {
        }
        // end handle_user_add_new_domain_modal;
        /**
         * Renders the domain delete action.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_user_delete_domain_modal()
        {
        }
        // end render_user_delete_domain_modal;
        /**
         * Handles deletion of the selected domain
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_user_delete_domain_modal()
        {
        }
        // end handle_user_delete_domain_modal;
        /**
         * Renders the domain delete action.
         *
         * @since 2.0.0
         * @return void
         */
        public function render_user_make_domain_primary_modal()
        {
        }
        // end render_user_make_domain_primary_modal;
        /**
         * Handles conversion to primary domain.
         *
         * @since 2.0.0
         * @return void
         */
        public function handle_user_make_domain_primary_modal()
        {
        }
        // end handle_user_make_domain_primary_modal;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    /**
     * Describes a field and contains helper functions for sanitization and validation.
     *
     * @since 2.0.0
     */
    class Field implements \JsonSerializable
    {
        /**
         * Holds the attributes of this field.
         *
         * @since 2.0.0
         * @var array
         */
        protected $atts = array();
        /**
         * Holds the value of the settings represented by this field.
         *
         * @since 2.0.0
         * @var mixed
         */
        protected $value = null;
        /**
         * Set and the attributes passed via the constructor.
         *
         * @since 2.0.0
         *
         * @param string $id Field id. This is going to be used to retrieve the value from the database later.
         * @param array  $atts Field attributes.
         */
        public function __construct($id, $atts)
        {
        }
        // end __construct;
        /**
         * Set and the attributes passed via the constructor.
         *
         * @since 2.0.0
         *
         * @param string $id Field id. This is going to be used to retrieve the value from the database later.
         * @param array  $atts Field attributes.
         * @return void
         */
        public function set_attributes($id, $atts)
        {
        }
        // end set_attributes;
        /**
         * Set a particular attribute.
         *
         * @since 2.0.0
         *
         * @param string $att The attribute name.
         * @param mixed  $value The new attribute value.
         * @return void
         */
        public function set_attribute($att, $value)
        {
        }
        // end set_attribute;
        /**
         * Returns the list of field attributes.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_attributes()
        {
        }
        // end get_attributes;
        /**
         * Makes sure old fields remain compatible.
         *
         * We are making some field type name changes in 2.0.
         * This method lists an array with aliases in the following format:
         *
         * - old_type_name => new_type_name.
         *
         * We throw a deprecation notice to make sure developers update their code appropriately.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_compat_template_name()
        {
        }
        // end get_compat_template_name;
        /**
         * Returns the template name for a field.
         *
         * We use this to go to the views folder and fetch the HTML template.
         * The return here is not an absolute path, as the folder depends on the view the form is using.
         *
         * @see \WP_Ultimo\UI\Forms
         *
         * @since 2.0.0
         * @return string
         */
        public function get_template_name()
        {
        }
        // end get_template_name;
        /**
         * Returns attributes as class properties.
         *
         * @since 2.0.0
         *
         * @param string $att Attribute to retrieve.
         * @return mixed
         */
        public function __get($att)
        {
        }
        // end __get;
        /**
         * Returns the list of sanitization callbacks for each field type
         *
         * @since 2.0.0
         * @return array
         */
        protected function sanitization_rules()
        {
        }
        // end sanitization_rules;
        /**
         * Returns the value of the setting represented by this field.
         *
         * @since 2.0.0
         * @return mixed
         */
        public function get_value()
        {
        }
        // end get_value;
        /**
         * Sets the value of the settings represented by this field.
         *
         * This alone won't save the setting to the database. This method also invokes the
         * sanitization callback, so we can be sure the data is ready for database insertion.
         *
         * @since 2.0.0
         *
         * @param mixed $value Value of the settings being represented by this field.
         * @return WP_Ultimo\UI\Field
         */
        public function set_value($value)
        {
        }
        // end set_value;
        /**
         * Runs the value of the field through the sanitization callback.
         *
         * @since 2.0.0
         * @return void
         */
        public function sanitize()
        {
        }
        // end sanitize;
        /**
         * Sanitization callback for fields of type number.
         *
         * Checks if the new value set is between the min and max boundaries.
         *
         * @since 2.0.0
         *
         * @param int|float $value Value of the settings being represented by this field.
         * @return int|float
         */
        protected function validate_number_field($value)
        {
        }
        // end validate_number_field;
        /**
         * Cleans the value submitted via a textarea or wp_editor field for database insertion.
         *
         * @since 2.0.0
         *
         * @param string $value Value of the settings being represented by this field.
         * @return string
         */
        protected function validate_textarea_field($value)
        {
        }
        // end validate_textarea_field;
        /**
         * Return HTML attributes for the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_html_attributes()
        {
        }
        // end get_html_attributes;
        /**
         * Return HTML attributes for the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_wrapper_html_attributes()
        {
        }
        // end get_wrapper_html_attributes;
        /**
         * Implements our on json_decode version of this object. Useful for use in vue.js
         *
         * @since 2.0.0
         * @return array
         */
        public function jsonSerialize()
        {
        }
    }
    /**
     * Describes a form that can be used in different contexts, with different view files for each field type.
     *
     * @since 2.0.0
     */
    class Form implements \JsonSerializable
    {
        /**
         * Holds the attributes of this field.
         *
         * @since 2.0.0
         * @var array
         */
        protected $atts = array();
        /**
         * Holds the fields we want to display using this form.
         *
         * @since 2.0.0
         * @var array
         */
        protected $fields = array();
        /**
         * Set and the attributes passed via the constructor.
         *
         * @since 2.0.0
         *
         * @param string $id Form id. This is going to be used to retrieve the value from the database later.
         * @param array  $fields List of arrays representing the form fields.
         * @param array  $atts Form attributes.
         */
        public function __construct($id, $fields, $atts = array())
        {
        }
        // end __construct;
        /**
         * Returns attributes as class properties.
         *
         * @since 2.0.0
         *
         * @param string $att Attribute to retrieve.
         * @return mixed
         */
        public function __get($att)
        {
        }
        // end __get;
        /**
         * Returns the list of field attributes.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_attributes()
        {
        }
        // end get_attributes;
        /**
         * Returns the list of fields used by the form.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_fields()
        {
        }
        // end get_fields;
        /**
         * Casts fields to \WP_Ultimo\UI\Fields and stores them on private list.
         *
         * @since 2.0.0
         *
         * @param array $fields List of fields of the form.
         * @return void
         */
        public function set_fields($fields)
        {
        }
        // end set_fields;
        /**
         * Renders the form with its fields.
         *
         * @since 2.0.0
         * @return void
         */
        public function render()
        {
        }
        // end render;
        /**
         * Return HTML attributes for the field.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_html_attributes()
        {
        }
        // end get_html_attributes;
        /**
         * Implements our on json_decode version of this object. Useful for use in vue.js
         *
         * @since 2.0.0
         * @return array
         */
        public function jsonSerialize()
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Invoices_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'invoices';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Invoices',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Loads the required scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Loads dependencies for the render.
         *
         * @since 2.0.0
         * @return void
         */
        public function dependencies()
        {
        }
        // end dependencies;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    /**
     * Adds the Jumper UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Jumper
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * GET slug to force the jumper menu reset/fetching.
         *
         * @since 2.0.0
         * @var string
         */
        protected $reset_slug = 'wu-rebuild-jumper';
        /**
         * Key to save the menu list on the transient database.
         *
         * @since 2.0.0
         * @var string
         */
        protected $transient_key = 'wu-jumper-menu-list';
        /**
         * Element construct.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Checks if we should add the jumper or not.
         *
         * @since 2.0.0
         * @return boolean
         */
        protected function is_jumper_enabled()
        {
        }
        // end is_jumper_enabled;
        /**
         * Adds the Jumper trigger to the admin top pages.
         *
         * @since 2.0.0
         *
         * @param \WP_Ultimo\Admin_Pages\Base_Admin_Page $page The current page.
         * @return void
         */
        public function add_jumper_trigger($page)
        {
        }
        // end add_jumper_trigger;
        /**
         * Loads the necessary elements to display the Jumper.
         *
         * @since 2.0.0
         * @return void
         */
        public function load_jumper()
        {
        }
        // end load_jumper;
        /**
         * Clear the jumper menu cache on settings save
         *
         * We need to do this to make sure that we clear the menu when the admin
         * adds a new custom menu item.
         *
         * @since 2.0.0
         *
         * @param array $settings Settings being saved.
         * @return void
         */
        public function clear_jump_cache_on_save($settings)
        {
        }
        // end clear_jump_cache_on_save;
        /**
         * Rebuilds the jumper menu via a trigger URL.
         *
         * @since 2.0.0
         * @return void
         */
        public function rebuild_menu()
        {
        }
        // end rebuild_menu;
        /**
         * Retrieves the custom links added by the super admin
         *
         * @since 2.0.0
         * @return array
         */
        public function get_user_custom_links()
        {
        }
        // end get_user_custom_links;
        /**
         * Add the custom links to the Jumper menu
         *
         * @since 2.0.0
         *
         * @param array $links Jumper links already saved.
         * @return array
         */
        public function add_user_custom_links($links)
        {
        }
        // end add_user_custom_links;
        /**
         * Add WP Ultimo settings links to the Jumper menu.
         *
         * @since 2.0.0
         *
         * @param array $links WP Ultimo settings array.
         * @return array
         */
        public function add_wp_ultimo_extra_links($links)
        {
        }
        // end add_wp_ultimo_extra_links;
        /**
         * Get the trigger key defined by the user.
         *
         * @since 2.0.0
         * @return string
         */
        function get_defined_trigger_key()
        {
        }
        // end get_defined_trigger_key;
        /**
         * Get the trigger key combination depending on the OS
         *
         * - For Win & Linux: ctrl + alt + key defined by user;
         * - For Mac: command + option + key defined by user.
         *
         * @since 2.0.0
         *
         * @param string $os OS to get the key combination for. Options: win or osx.
         * @return array
         */
        function get_keys($os = 'win')
        {
        }
        // end get_keys;
        /**
         * Changes the helper footer message about the Jumper and its trigger
         *
         * @since 2.0.0
         *
         * @param string $text The default WordPress right footer message.
         * @return string
         */
        public function add_jumper_footer_message($text)
        {
        }
        // end add_jumper_footer_message;
        /**
         * Enqueues the JavaScript files necessary to make the jumper work.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        // end enqueue_scripts;
        /**
         * Enqueues the CSS files necessary to make the jumper work.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_styles()
        {
        }
        // end enqueue_styles;
        /**
         * Outputs the actual HTML markup of the Jumper.
         *
         * @since 2.0.0
         * @return void
         */
        public function output()
        {
        }
        // end output;
        /**
         * Get the full page URL for admin pages.
         *
         * @since 2.0.0
         *
         * @param string $url URL of the menu item.
         * @return string
         */
        public function get_menu_page_url($url)
        {
        }
        // end get_menu_page_url;
        /**
         * Returns the URL of a jumper menu item
         *
         * If the URL is an absolute URL, returns the full-url.
         * If the URL is relative, we return the full URL using WordPress url functions.
         *
         * @since 2.0.0
         *
         * @param string $url URL of the menu item.
         * @return string
         */
        public function get_target_url($url)
        {
        }
        // end get_target_url;
        /**
         * Builds the list of links based on the $menu and $submenu globals.
         *
         * @since 2.0.0
         *
         * @return array
         */
        public function build_link_list()
        {
        }
        // end build_link_list;
        /**
         * Gets the cached menu list saved.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_saved_menu()
        {
        }
        // end get_saved_menu;
        /**
         * Returns the link list.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_link_list()
        {
        }
        // end get_link_list;
        /**
         * Filter the WP Ultimo settings to add Jumper options
         *
         * @since 2.0.0
         *
         * @return void
         */
        public function add_settings()
        {
        }
        // end add_settings;
        /**
         * Helper function to recursively seach an array.
         *
         * @since 2.0.0
         *
         * @param string $needle String to seach recursively.
         * @param array  $haystack Array to search.
         * @return mixed
         */
        public function search_recursive($needle, $haystack)
        {
        }
    }
    /**
     * Adds the Limits and Quotas element as BB, Elementor and Widget.
     *
     * @since 2.0.0
     */
    class Limits_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'limits';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Checkout',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Login_Form_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'login-form';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * Registers scripts and styles necessary to render this.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Billing_Address',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Checks if we are in a lost password form page.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_lost_password_page()
        {
        }
        // end is_lost_password_page;
        /**
         * Checks if we are in the email confirm instruction page of a reset password.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_check_email_confirm()
        {
        }
        // end is_check_email_confirm;
        /**
         * Checks if we are in a reset password page.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_reset_password_page()
        {
        }
        // end is_reset_password_page;
        /**
         * Checks if we are in the the password rest confirmation page.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_reset_confirmation_page()
        {
        }
        // end is_reset_confirmation_page;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * Returns the logout URL for the "not you bar".
         *
         * @since 2.0.0
         * @return string
         */
        public function get_logout_url()
        {
        }
        // end get_logout_url;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class My_Sites_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'my-sites';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Site',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Loads the necessary scripts and styles for this element.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
        // end output;
        /**
         * Returns the manage URL for sites, depending on the environment.
         *
         * @since 2.0.0
         *
         * @param int $site_id A Site ID.
         * @return string
         */
        public function get_manage_url($site_id)
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Payment_Methods_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'payment-methods';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Payment Methods',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Simple_Text_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'simple-text';
        /**
         * Should this element be hidden by default?
         *
         * @since 2.0.0
         * @var boolean
         */
        protected $hidden_by_default = true;
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * Registers scripts and styles necessary to render this.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Billing_Address',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Site_Actions_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'site-actions';
        /**
         * Loads the required scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Actions',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * Returns the actions for the element. These can be filtered.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_actions()
        {
        }
        // end get_actions;
        /**
         * Returns the danger actions actions for the element. These can be filtered.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_danger_zone_actions()
        {
        }
        // end get_danger_zone_actions;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    /**
     * Adds the Checkout Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Site_Maintenance_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'site-maintenance';
        /**
         * Initializes the singleton.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Billing_Address',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * Registers scripts and styles necessary to render this.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    /**
     * Adds the Template_Previewer UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Template_Previewer
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Keeps the settings key for the top-bar.
         */
        const KEY = 'top_bar_settings';
        /**
         * Initializes the class.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Hooks into WordPress to add the template preview.
         *
         * @since 2.0.0
         * @return void
         */
        public function hooks()
        {
        }
        // end hooks;
        /**
         * Send the cross origin headers to allow iframes to be loaded.
         *
         * @since 2.0.9
         * @return void
         */
        public function send_cross_origin_headers()
        {
        }
        // end send_cross_origin_headers;
        /**
         * Register the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Remove the unnecessary styles added by themes and other plugins.
         *
         * @since 2.0.0
         * @return void
         */
        public function remove_unnecessary_styles()
        {
        }
        // end remove_unnecessary_styles;
        /**
         * Append preview parameter.
         *
         * @since 2.0.0
         *
         * @param string      $url The URL.
         * @param string      $path        Path relative to the home URL. Blank string if no path is specified.
         * @param string|null $orig_scheme Scheme to give the home URL context. Accepts 'http', 'https',
         *                                 'relative', 'rest', or null.
         * @param int|null    $blog_id     Site ID, or null for the current site.
         * @return string
         */
        public function append_preview_parameter($url, $path, $orig_scheme, $blog_id)
        {
        }
        // end append_preview_parameter;
        /**
         * Returns the preview URL for the template previewer.
         *
         * @since 2.0.0
         *
         * @param int $site_id The ID of the template site.
         * @return string
         */
        public function get_preview_url($site_id)
        {
        }
        // end get_preview_url;
        /**
         * Template Previewer code
         *
         * @since 1.5.5
         * @return void
         */
        public function template_previewer()
        {
        }
        // end template_previewer;
        /**
         * Returns the preview parameter, so admins can change it.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_preview_parameter()
        {
        }
        // end get_preview_parameter;
        /**
         * Checks if this is a template previewer window.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_template_previewer()
        {
        }
        // end is_template_previewer;
        /**
         * Check if the frame is a preview.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function is_preview()
        {
        }
        // end is_preview;
        /**
         * Returns the settings.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_settings()
        {
        }
        // end get_settings;
        /**
         * Gets a particular setting.
         *
         * @since 2.0.0
         *
         * @param string  $setting The setting key.
         * @param boolean $default Default value, if it is not found.
         * @return mixed
         */
        public function get_setting($setting, $default = false)
        {
        }
        // end get_setting;
        /**
         * Save settings.
         *
         * @since 2.0.0
         *
         * @param array $settings_to_save List of settings to save.
         * @return boolean
         */
        public function save_settings($settings_to_save)
        {
        }
    }
    /**
     * Adds the Template Selection Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Template_Switching_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * @since 2.0.0
         *
         * @var string
         */
        public $id = 'template-switching';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * The title of the UI element.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * Initializes the singleton.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Register element scripts.
         *
         * @since 2.0.4
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * @since 2.0.0
         *
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.4
         *
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * Ajax action to change the template for a given site.
         *
         * @since 2.0.4
         *
         * @return json|WP_Error Switch template response.
         */
        public function switch_template()
        {
        }
        // end switch_template;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
        // end output;
        /**
         * Returns the list of available pricing table templates.
         *
         * @since 2.0.0
         * @return array
         */
        public function get_template_selection_templates()
        {
        }
    }
    /**
     * Adds the Thank You Element UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Thank_You_Element extends \WP_Ultimo\UI\Base_Element
    {
        /**
         * The id of the element.
         *
         * Something simple, without prefixes, like 'checkout', or 'pricing-tables'.
         *
         * This is used to construct shortcodes by prefixing the id with 'wu_'
         * e.g. an id checkout becomes the shortcode 'wu_checkout' and
         * to generate the Gutenberg block by prefixing it with 'wp-ultimo/'
         * e.g. checkout would become the block 'wp-ultimo/checkout'.
         *
         * @since 2.0.0
         * @var string
         */
        public $id = 'thank-you';
        /**
         * The icon of the UI element.
         * e.g. return fa fa-search
         *
         * @since 2.0.0
         * @param string $context One of the values: block, elementor or bb.
         * @return string
         */
        public function get_icon($context = 'block')
        {
        }
        // end get_icon;
        /**
         * Overload the init to add site-related forms.
         *
         * @since 2.0.0
         * @return void
         */
        public function init()
        {
        }
        // end init;
        /**
         * Replace the register page title with the Thank you title.
         *
         * @since 2.0.0
         *
         * @param array $title_parts The title parts.
         * @return array
         */
        public function replace_page_title($title_parts)
        {
        }
        // end replace_page_title;
        /**
         * Maybe clear the title at the content level.
         *
         * @since 2.0.0
         *
         * @param string $title The page title.
         * @param int    $id The post/page id.
         * @return string
         */
        public function maybe_replace_page_title($title, $id)
        {
        }
        // end maybe_replace_page_title;
        /**
         * Register additional scripts for the thank you page.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * The title of the UI element.
         *
         * This is used on the Blocks list of Gutenberg.
         * You should return a string with the localized title.
         * e.g. return __('My Element', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_title()
        {
        }
        // end get_title;
        /**
         * The description of the UI element.
         *
         * This is also used on the Gutenberg block list
         * to explain what this block is about.
         * You should return a string with the localized title.
         * e.g. return __('Adds a checkout form to the page', 'wp-ultimo').
         *
         * @since 2.0.0
         * @return string
         */
        public function get_description()
        {
        }
        // end get_description;
        /**
         * The list of fields to be added to Gutenberg.
         *
         * If you plan to add Gutenberg controls to this block,
         * you'll need to return an array of fields, following
         * our fields interface (@see inc/ui/class-field.php).
         *
         * You can create new Gutenberg panels by adding fields
         * with the type 'header'. See the Checkout Elements for reference.
         *
         * @see inc/ui/class-checkout-element.php
         *
         * Return an empty array if you don't have controls to add.
         *
         * @since 2.0.0
         * @return array
         */
        public function fields()
        {
        }
        // end fields;
        /**
         * The list of keywords for this element.
         *
         * Return an array of strings with keywords describing this
         * element. Gutenberg uses this to help customers find blocks.
         *
         * e.g.:
         * return array(
         *  'WP Ultimo',
         *  'Billing Information',
         *  'Form',
         *  'Cart',
         * );
         *
         * @since 2.0.0
         * @return array
         */
        public function keywords()
        {
        }
        // end keywords;
        /**
         * List of default parameters for the element.
         *
         * If you are planning to add controls using the fields,
         * it might be a good idea to use this method to set defaults
         * for the parameters you are expecting.
         *
         * These defaults will be used inside a 'wp_parse_args' call
         * before passing the parameters down to the block render
         * function and the shortcode render function.
         *
         * @since 2.0.0
         * @return array
         */
        public function defaults()
        {
        }
        // end defaults;
        /**
         * Runs early on the request lifecycle as soon as we detect the shortcode is present.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup()
        {
        }
        // end setup;
        /**
         * Allows the setup in the context of previews.
         *
         * @since 2.0.0
         * @return void
         */
        public function setup_preview()
        {
        }
        // end setup_preview;
        /**
         * The content to be output on the screen.
         *
         * Should return HTML markup to be used to display the block.
         * This method is shared between the block render method and
         * the shortcode implementation.
         *
         * @since 2.0.0
         *
         * @param array       $atts Parameters of the block/shortcode.
         * @param string|null $content The content inside the shortcode.
         * @return string
         */
        public function output($atts, $content = null)
        {
        }
    }
    /**
     * Adds the Toolbox UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Toolbox
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Element construct.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Checks if we should add the toolbox or not.
         *
         * @todo fix the check for license activation.
         * @since 2.0.0
         * @return boolean
         */
        protected function is_toolbox_enabled()
        {
        }
        // end is_toolbox_enabled;
        /**
         * Loads the necessary elements to display the Toolbox.
         *
         * @since 2.0.0
         * @return void
         */
        public function load_toolbox()
        {
        }
        // end load_toolbox;
        /**
         * Adds the admin styles to make sure the tooltip renders.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_styles()
        {
        }
        // end enqueue_styles;
        /**
         * Outputs the actual HTML markup of the Toolbox.
         *
         * @since 2.0.0
         * @return void
         */
        public function output()
        {
        }
    }
    /**
     * Adds the Tours UI to the Admin Panel.
     *
     * @since 2.0.0
     */
    class Tours
    {
        use \WP_Ultimo\Traits\Singleton;
        /**
         * Registered tours.
         *
         * @since 2.0.0
         * @var array
         */
        protected $tours = array();
        /**
         * Element construct.
         *
         * @since 2.0.0
         */
        public function __construct()
        {
        }
        // end __construct;
        /**
         * Mark the tour as finished for a particular user.
         *
         * @since 2.0.0
         * @return void
         */
        public function mark_as_finished()
        {
        }
        // end mark_as_finished;
        /**
         * Register the necessary scripts.
         *
         * @since 2.0.0
         * @return void
         */
        public function register_scripts()
        {
        }
        // end register_scripts;
        /**
         * Enqueues the scripts, if we need to.
         *
         * @since 2.0.0
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        // end enqueue_scripts;
        /**
         * Checks if we have registered tours.
         *
         * @since 2.0.0
         * @return boolean
         */
        public function has_tours()
        {
        }
        // end has_tours;
        /**
         * Register a new tour.
         *
         * @see https://shepherdjs.dev/docs/
         *
         * @since 2.0.0
         *
         * @param string  $id The id of the tour.
         * @param array   $steps The tour definition. Check shepherd.js docs.
         * @param boolean $once Whether or not we will show this more than once.
         * @return void
         */
        public function create_tour($id, $steps = array(), $once = true)
        {
        }
    }
}
namespace {
    /**
     * Deprecated: PluginUpdateChecker_2_0
     *
     * @deprecated 2.0.0
     */
    class PluginUpdateChecker_2_0
    {
        // phpcs:ignore
        /**
         * Deprecated: enable_update_checker
         *
         * @deprecated 2.0.0
         * @return void
         */
        public function enable_update_checker()
        {
        }
    }
    /**
     * Deprecated: PucFactory
     *
     * @deprecated 2.0.0
     */
    class PucFactory
    {
        // phpcs:ignore
        /**
         * Deprecated: buildUpdateChecker
         *
         * @deprecated 2.0.0
         * @return void
         */
        public static function buildUpdateChecker()
        {
        }
    }
}
namespace {
    // end class WU_Mail;
    /**
     * Deprecated: Returns the WU_Mail instance.
     *
     * @deprecated 2.0.0
     * @since 2.0.0
     * @return WU_Mail
     */
    function WU_Mail()
    {
    }
    // end class WU_Transactions;
    /*
     * Functions
     */
    /**
     * Deprecated: Returns a coupon code object based on the code.
     *
     * @deprecated 2.0.0
     * @see wu_get_discount_code_by_code()
     *
     * @param string  $coupon_code Coupon code.
     * @param boolean $return_invalid If we should return the coupon even if it is no longer valid.
     * @return \WP_Ultimo\Models\Discount_Code|false
     */
    function wu_get_coupon($coupon_code, $return_invalid = \false)
    {
    }
    // end wu_get_coupon;
    /**
     * Deprecated: Returns a plan based on the id passed
     *
     * @deprecated 2.0.0
     *
     * @param integer $plan_id The plan id to get.
     * @return \WP_Ultimo\Models\Product|false
     */
    function wu_get_plan($plan_id)
    {
    }
    // end wu_get_plan;
    /**
     * Deprecated: Gets a plan by its slug.
     *
     * @since 1.9.0
     * @deprecated 2.0.0
     *
     * @param string $plan_slug The plan slug.
     * @return \WP_Ultimo\Models\Product|false
     */
    function wu_get_plan_by_slug($plan_slug)
    {
    }
    // end wu_get_plan_by_slug;
    /**
     * Deprecated: Returns a subscription object based on the user.
     *
     * This method is returning the first result of a global search for
     * memberships with this user_id. This needs to be changed on your code as soon as possible,
     * to make use of the current methods to search memberships based on the customer.
     *
     * @deprecated 2.0.0
     *
     * @param  int $user_id User id to get subscription from.
     * @return \WP_Ultimo\Models\Membership|false
     */
    function wu_get_subscription($user_id)
    {
    }
    // end wu_get_subscription;
    /**
     * Deprecated: Returns a subscription object based on the integration key.
     *
     * @deprecated 2.0.0
     *
     * @param string $integration_key The gateway subscription key/id.
     * @return \WP_Ultimo\Models\Membership|false
     */
    function wu_get_subscription_by_integration_key($integration_key)
    {
    }
    // end wu_get_subscription_by_integration_key;
    /**
     * Deprecated: Return a subscription object based on the current user.
     *
     * @since 1.7.3
     * @deprecated 2.0.0
     *
     * @return \WP_Ultimo\Models\Membership|false
     */
    function wu_get_current_subscription()
    {
    }
    // end wu_get_current_subscription;
    /**
     * Deprecated: Checks if the current user is an active subscriber.
     *
     * New APIs will be added to check membership status.
     * Do not use this methods, as they rely on the user id.
     *
     * @since 1.6.2
     * @deprecated 2.0.0
     *
     * @param integer $user_id The user ID.
     * @return boolean
     */
    function wu_is_active_subscriber($user_id = \false)
    {
    }
    // end wu_is_active_subscriber;
    /**
     * Deprecated: Checks if a given user is a customer of a given plan.
     *
     * @since 1.6.2
     * @deprecated 2.0.0
     *
     * @param integer $user_id The user Id.
     * @param integer $plan_id The plan Id.
     * @return boolean
     */
    function wu_has_plan($user_id, $plan_id)
    {
    }
    // end wu_has_plan;
    /**
     * Deprecated: Returns the gateway being used by the current user at the moment.
     *
     * @since  1.1.0
     * @deprecated 1.9.0
     *
     * @return object Gateway class
     */
    function wu_get_active_gateway()
    {
    }
    // end wu_get_active_gateway;
    /**
     * Deprecated: Generates the price description.
     *
     * @since 1.7.0
     * @deprecated 2.0.0
     *
     * @param float   $price Deprecated Argument.
     * @param int     $interval Deprecated Argument.
     * @param boolean $extended Deprecated Argument.
     * @return string
     */
    function wu_get_interval_string($price = \null, $interval = \null, $extended = \null)
    {
    }
    // end wu_get_interval_string;
    /**
     * Deprecated: get_wu_currencies.
     *
     * This was badly named.
     *
     * @since 2.0.0
     * @return array
     */
    function get_wu_currencies()
    {
    }
    // end get_wu_currencies;
    /**
     * Deprecated: get_wu_currency_symbol.
     *
     * This was badly named.
     *
     * @since 2.0.0
     * @param string $currency Currency code.
     * @return string
     */
    function get_wu_currency_symbol($currency = '')
    {
    }
    /**
     * Sets the authentication cookies based on user ID.
     *
     * The $remember parameter increases the time that the cookie will be kept. The
     * default the cookie is kept without remembering is two days. When $remember is
     * set, the cookies will be kept for 14 days or two weeks.
     *
     * @since 2.5.0
     * @since 4.3.0 Added the `$token` parameter.
     *
     * @param int         $user_id  User ID.
     * @param bool        $remember Whether to remember the user.
     * @param bool|string $secure   Whether the auth cookie should only be sent over HTTPS. Default is an empty
     *                              string which means the value of `is_ssl()` will be used.
     * @param string      $token    Optional. User's session token to use for this cookie.
     */
    function wp_set_auth_cookie($user_id, $remember = \false, $secure = '', $token = '')
    {
    }
    // end wp_set_auth_cookie;
    function wu_cookie_args($expires, $path, $domain, $secure)
    {
    }
    /**
     * Returns the HTML markup of a empty state page.
     *
     * @since 2.0.0
     *
     * @param array $args List of the page arguments.
     * @return string
     */
    function wu_render_empty_state($args = array())
    {
    }
    // end wu_render_empty_state;
    /**
     * Checks if should use wrap container or not based on user setting.
     *
     * @since 2.0.0
     */
    function wu_wrap_use_container()
    {
    }
    // end wu_wrap_use_container;
    /**
     * Renders the responsive table single-line.
     *
     * @since 2.0.0
     *
     * @param array $args Main arguments.
     * @param array $first_row The first row of icons + labels.
     * @param array $second_row The second row, on the right.
     * @return string
     */
    function wu_responsive_table_row($args = array(), $first_row = array(), $second_row = array())
    {
    }
    /**
     * Queries broadcast.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Broadcast[]
     */
    function wu_get_broadcasts($query = array())
    {
    }
    // end wu_get_broadcasts;
    /**
     * Returns a single broadcast defined by a particular column and value.
     *
     * @since 2.0.7
     *
     * @param string $column The column name.
     * @param mixed  $value The column value.
     * @return \WP_Ultimo\Models\Broadcast|false
     */
    function wu_get_broadcast_by($column, $value)
    {
    }
    // end wu_get_broadcast_by;
    /**
     * Gets a broadcast on the ID.
     *
     * @since 2.0.0
     *
     * @param integer $broadcast_id ID of the broadcast to retrieve.
     * @return \WP_Ultimo\Models\Broadcast|false
     */
    function wu_get_broadcast($broadcast_id)
    {
    }
    // end wu_get_broadcast;
    /**
     * Gets a broadcast on the ID.
     *
     * @since 2.0.0
     *
     * @param integer $broadcast_id ID of the broadcast to retrieve.
     * @param string  $type Target type (customers or products).
     * @return array All targets, based on the type, from a specific broadcast.
     */
    function wu_get_broadcast_targets($broadcast_id, $type)
    {
    }
    // end wu_get_broadcast_targets;
    /**
     * Creates a new broadcast.
     *
     * Check the wp_parse_args below to see what parameters are necessary.
     *
     * @since 2.0.0
     *
     * @param array $broadcast_data Broadcast attributes.
     * @return \WP_Error|\WP_Ultimo\Models\Broadcast
     */
    function wu_create_broadcast($broadcast_data)
    {
    }
    /**
     * Returns a checkout_form.
     *
     * @since 2.0.0
     *
     * @param int $checkout_form_id The ID of the checkout_form.
     * @return \WP_Ultimo\Models\Checkout_Form|false
     */
    function wu_get_checkout_form($checkout_form_id)
    {
    }
    // end wu_get_checkout_form;
    /**
     * Queries checkout_forms.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Checkout_Form[]
     */
    function wu_get_checkout_forms($query = array())
    {
    }
    // end wu_get_checkout_forms;
    /**
     * Returns a checkout_form based on slug.
     *
     * @since 2.0.0
     *
     * @param string $checkout_form_slug The slug of the checkout_form.
     * @return \WP_Ultimo\Models\Checkout_Form|false
     */
    function wu_get_checkout_form_by_slug($checkout_form_slug)
    {
    }
    // end wu_get_checkout_form_by_slug;
    /**
     * Creates a new checkout form.
     *
     * @since 2.0.0
     *
     * @param array $checkout_form_data Checkout_Form data.
     * @return \WP_Error|\WP_Ultimo\Models\Checkout_Form
     */
    function wu_create_checkout_form($checkout_form_data)
    {
    }
    /**
     * Needs to be removed.
     *
     * @todo Remove this and use our functions instead.
     * @param string $error Error passed by what was log.
     * @since 2.0.0
     * @return void
     */
    function wu_log($error)
    {
    }
    // end wu_log;
    /**
     * Needs to be removed.
     *
     * @todo Remove this and use out functions instead.
     * @since 2.0.0
     * @return \WP_Error
     */
    function wu_errors()
    {
    }
    // end wu_errors;
    /**
     * Generate an idempotency key.
     *
     * @since 2.0.0
     *
     * @param array  $args Arguments used to create or update the current object.
     * @param string $context The context in which the key was generated.
     * @return string
     */
    function wu_stripe_generate_idempotency_key($args, $context = 'new')
    {
    }
    // end wu_stripe_generate_idempotency_key;
    /**
     * Loops through the signup field types to return the checkout fields.
     *
     * @since 2.0.0
     *
     * @param array $fields List of signup field types.
     * @return array
     */
    function wu_create_checkout_fields($fields = array())
    {
    }
    // end wu_create_checkout_fields;
    /**
     * Returns the URL for the registration page.
     *
     * @since 2.0.0
     * @param string|false $path Path to attach to the end of the URL.
     * @return string
     */
    function wu_get_registration_url($path = \false)
    {
    }
    // end wu_get_registration_url;
    /**
     * Returns the URL for the login page.
     *
     * @since 2.0.0
     * @param string|false $path Path to attach to the end of the URL.
     * @return string
     */
    function wu_get_login_url($path = \false)
    {
    }
    // end wu_get_login_url;
    /**
     * Checks if we allow for multiple memberships.
     *
     * @todo: review this.
     * @since 2.0.0
     * @return boolean
     */
    function wu_multiple_memberships_enabled()
    {
    }
    // end wu_multiple_memberships_enabled;
    /**
     * Get the number of days in a billing cycle.
     *
     * Taken from WooCommerce.
     *
     * @since 2.0.0
     * @param string $duration_unit Unit: day, month, or year.
     * @param int    $duration Cycle duration.
     *
     * @return int
     */
    function wu_get_days_in_cycle($duration_unit, $duration)
    {
    }
    // end wu_get_days_in_cycle;
    /**
     * Register a new field type.
     *
     * Field types are types of field (duh!) that can be
     * added to the checkout flow and other forms inside WP Ultimo.
     *
     * @see https://help.wpultimo.com/article/344-add-custom-field-types-to-wp-ultimo
     *
     * @since 2.0.0
     *
     * @param string $field_type_id The field type id. E.g. pricing_table, template_selection.
     * @param string $field_type_class_name The field type class name. The "absolute" path to the class.
     * @return void
     */
    function wu_register_field_type($field_type_id, $field_type_class_name)
    {
    }
    // end wu_register_field_type;
    /**
     * Register a new field template for a field type.
     *
     * Field templates are different layouts that can be added to
     * WP Ultimo to be used as the final representation of a given
     * checkout field.
     *
     * @see https://help.wpultimo.com/article/343-customize-your-checkout-flow-using-field-templates
     *
     * @since 2.0.0
     *
     * @param string $field_type The field type. E.g. pricing_table, template_selection.
     * @param string $field_template_id The field template ID. e.g. clean, minimal.
     * @param string $field_template_class_name The field template class name. The "absolute" path to the class.
     * @return void
     */
    function wu_register_field_template($field_type, $field_template_id, $field_template_class_name)
    {
    }
    /**
     * Returns a Color object.
     *
     * @since 2.0.0
     *
     * @param string $hex Hex code for the color. E.g. #000.
     * @return \WP_Ultimo\Dependencies\Mexitek\PHPColors\Color
     */
    function wu_color($hex)
    {
    }
    // end wu_color;
    /**
     * Gets a random color for the progress bar.
     *
     * @since 2.0.0
     *
     * @param int $index The index number.
     * @return string
     */
    function wu_get_random_color($index)
    {
    }
    /**
     * Returns the list of countries.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_countries()
    {
    }
    // end wu_get_countries;
    /**
     * Returns the list of countries with an additional empty state option.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_countries_as_options()
    {
    }
    // end wu_get_countries_as_options;
    /**
     * Returns the country name for a given country code.
     *
     * @since 2.0.0
     *
     * @param string $country_code Country code.
     * @return string
     */
    function wu_get_country_name($country_code)
    {
    }
    // end wu_get_country_name;
    /**
     * Get the list of countries and counts based on customers.
     *
     * @since 2.0.0
     * @param integer        $count The number of results to return.
     * @param boolean|string $start_date The start date.
     * @param boolean|string $end_date The end date.
     * @return array
     */
    function wu_get_countries_of_customers($count = 10, $start_date = \false, $end_date = \false)
    {
    }
    /**
     * Get all the currencies we use in WP Ultimo
     *
     * @return array Return the currencies array.
     */
    function wu_get_currencies()
    {
    }
    // end wu_get_currencies;
    /**
     * Gets the currency symbol of a currency.
     *
     * @since 0.0.1
     *
     * @param string $currency Currency to get symbol of.
     * @return string
     */
    function wu_get_currency_symbol($currency = '')
    {
    }
    // end wu_get_currency_symbol;
    /**
     * Formats a value into our defined format
     *
     * @param  string      $value Value to be processed.
     * @param  string|null $currency Currency code.
     * @param  string|null $format Format to return the string.
     * @param  string|null $thousands_sep Thousands separator.
     * @param  string|null $decimal_sep Decimal separator.
     * @param  string|null $precision Number of decimal places.
     * @return string Formatted Value.
     */
    function wu_format_currency($value, $currency = \null, $format = \null, $thousands_sep = \null, $decimal_sep = \null, $precision = \null)
    {
    }
    // end wu_format_currency;
    /**
     * Determines if WP Ultimo is using a zero-decimal currency.
     *
     * @param  string $currency The currency code to check.
     *
     * @since  2.0.0
     * @return bool True if currency set to a zero-decimal currency.
     */
    function wu_is_zero_decimal_currency($currency = 'USD')
    {
    }
    // end wu_is_zero_decimal_currency;
    /**
     * Sets the number of decimal places based on the currency.
     *
     * @param int $decimals The number of decimal places. Default is 2.
     *
     * @todo add the missing currency parameter?
     * @since  2.0.0
     * @return int The number of decimal places.
     */
    function wu_currency_decimal_filter($decimals = 2)
    {
    }
    // end wu_currency_decimal_filter;
    /**
     * Returns the multiplier for the currency. Most currencies are multiplied by 100.
     * Zero decimal currencies should not be multiplied so use 1.
     *
     * @since 2.0.0
     *
     * @param string $currency The currency code, all uppercase.
     * @return int
     */
    function wu_stripe_get_currency_multiplier($currency = 'USD')
    {
    }
    /**
     * Returns a customer.
     *
     * @since 2.0.0
     *
     * @param int $customer_id The id of the customer. This is not the user ID.
     * @return \WP_Ultimo\Models\Customer|false
     */
    function wu_get_customer($customer_id)
    {
    }
    // end wu_get_customer;
    /**
     * Returns a single customer defined by a particular column and value.
     *
     * @since 2.0.0
     *
     * @param string $column The column name.
     * @param mixed  $value The column value.
     * @return \WP_Ultimo\Models\Customer|false
     */
    function wu_get_customer_by($column, $value)
    {
    }
    // end wu_get_customer_by;
    /**
     * Gets a customer based on the hash.
     *
     * @since 2.0.0
     *
     * @param mixed $hash The customer hash.
     * @return \WP_Ultimo\Models\Customer|false
     */
    function wu_get_customer_by_hash($hash)
    {
    }
    // end wu_get_customer_by_hash;
    /**
     * Queries customers.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Customer[]
     */
    function wu_get_customers($query = array())
    {
    }
    // end wu_get_customers;
    /**
     * Returns a customer based on user_id.
     *
     * @since 2.0.0
     *
     * @param int $user_id The ID of the WP User associated with that customer.
     * @return \WP_Ultimo\Models\Customer|false
     */
    function wu_get_customer_by_user_id($user_id)
    {
    }
    // end wu_get_customer_by_user_id;
    /**
     * Returns the current customer.
     *
     * @since 2.0.0
     * @return \WP_Ultimo\Models\Customer|false
     */
    function wu_get_current_customer()
    {
    }
    // end wu_get_current_customer;
    /**
     * Creates a new customer.
     *
     * Check the wp_parse_args below to see what parameters are necessary.
     * If the use_id is not passed, we try to create a new WP User.
     *
     * @since 2.0.0
     *
     * @param array $customer_data Customer attributes.
     * @return \WP_Error|\WP_Ultimo\Models\Customer
     */
    function wu_create_customer($customer_data)
    {
    }
    // end wu_create_customer;
    /**
     * Searches for a existing gateway customer among the customer memberships.
     *
     * @since 2.0.0
     *
     * @param int   $customer_id The local (wu) customer id.
     * @param array $allowed_gateways The list of allowed gateways to search.
     * @return string
     */
    function wu_get_customer_gateway_id($customer_id, $allowed_gateways = array())
    {
    }
    // end wu_get_customer_gateway_id;
    /**
     * Create a unique username for a new customer based on the email address passed.
     *
     * This is heavily based on the WooCommerce implementation
     *
     * @see https://github.com/woocommerce/woocommerce/blob/b19500728b4b292562afb65eb3a0c0f50d5859de/includes/wc-user-functions.php#L120
     *
     * @since 2.0.0
     *
     * @param string $email New customer email address.
     * @param array  $new_user_args Array of new user args, maybe including first and last names.
     * @param string $suffix Append string to username to make it unique.
     * @return string Generated username.
     */
    function wu_username_from_email($email, $new_user_args = array(), $suffix = '')
    {
    }
    /**
     * General date functions for WP Ultimo.
     *
     * @author      Arindo Duque
     * @category    Admin
     * @package     WP_Ultimo/Helper
     * @version     2.0.0
     */
    /**
     * Checks if a date is valid in the Gregorian calendar.
     *
     * @since 2.0.0
     *
     * @param string $date Date to check.
     * @param string $format Format to check against.
     * @return bool
     */
    function wu_validate_date($date, $format = 'Y-m-d H:i:s')
    {
    }
    // end wu_validate_date;
    /**
     * Returns a Carbon object to deal with dates in a more compeling way.
     *
     * Note: this function uses the wu_validate function to check
     * if the string passed is a valid date string. If the string
     * is not valid, now is used.
     *
     * @since 2.0.0
     * @see https://carbon.nesbot.com/docs/
     *
     * @param boolean $date Parsable date string.
     * @return \WP_Ultimo\Dependencies\Carbon\Carbon
     */
    function wu_date($date = \false)
    {
    }
    // end wu_date;
    /**
     * Returns how many days ago the first date was in relation to the second date.
     *
     * If second date is empty, now is used.
     *
     * @since 1.7.0
     *
     * @param string       $date_1 First date to compare.
     * @param string|false $date_2 Second date to compare.
     * @return integer Negative if days ago, positive if days in the future.
     */
    function wu_get_days_ago($date_1, $date_2 = \false)
    {
    }
    // end wu_get_days_ago;
    /**
     * Returns the current time from the network
     *
     * @param string $type Type of the return string to return.
     * @param bool   $gmt If the date returned should be GMT or not.
     * @return string
     */
    function wu_get_current_time($type = 'mysql', $gmt = \false)
    {
    }
    // end wu_get_current_time;
    /**
     * Returns a more user friendly version of the duration unit string.
     *
     * @since 2.0.0
     *
     * @param string $unit The duration unit string.
     * @param int    $length The duration.
     * @return string
     */
    function wu_filter_duration_unit($unit, $length)
    {
    }
    // end wu_filter_duration_unit;
    /**
     * Get the human time diff.
     *
     * @since 2.0.0
     *
     * @param string $from  The time to calculate from.
     * @param string $limit The limit to switch back to a normal date representation.
     * @param string $to    The date to compare against.
     * @return string
     */
    function wu_human_time_diff($from, $limit = '-5 days', $to = \false)
    {
    }
    /**
     * Returns a discount code object searching by the code.
     *
     * @since 2.0.0
     *
     * @param string $coupon_code Coupon code to search.
     * @return \WP_Ultimo\Models\Discount_Code|false
     */
    function wu_get_discount_code_by_code($coupon_code)
    {
    }
    // end wu_get_discount_code_by_code;
    /**
     * Gets a discount code based on the ID.
     *
     * @since 2.0.0
     *
     * @param integer $discount_code_id ID of the discount code to retrieve.
     * @return \WP_Ultimo\Models\Discount_Code|false
     */
    function wu_get_discount_code($discount_code_id)
    {
    }
    // end wu_get_discount_code;
    /**
     * Queries discount codes.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Discount_Code[]
     */
    function wu_get_discount_codes($query = array())
    {
    }
    // end wu_get_discount_codes;
    /**
     * Calculates the discounted price after running it through the discount code.
     *
     * @since 2.0.0
     *
     * @param float   $base_price Original price of the product.
     * @param float   $amount Discount amount.
     * @param string  $type Type of the discount, can be percentage or absolute.
     * @param boolean $format If we should format the results or not.
     * @return float|string
     */
    function wu_get_discounted_price($base_price, $amount, $type, $format = \true)
    {
    }
    // end wu_get_discounted_price;
    /**
     * Creates a new discount code.
     *
     * Check the wp_parse_args below to see what parameters are necessary.
     *
     * @since 2.0.0
     *
     * @param array $discount_code_data Discount code attributes.
     * @return \WP_Error|\WP_Ultimo\Models\Discount_Code
     */
    function wu_create_discount_code($discount_code_data)
    {
    }
    /**
     * Returns a domain.
     *
     * @since 2.0.0
     *
     * @param int $domain_id The id of the domain. This is not the user ID.
     * @return \WP_Ultimo\Models\Domain|false
     */
    function wu_get_domain($domain_id)
    {
    }
    // end wu_get_domain;
    /**
     * Queries domains.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Domain[]
     */
    function wu_get_domains($query = array())
    {
    }
    // end wu_get_domains;
    /**
     * Returns a domain based on domain.
     *
     * @since 2.0.0
     *
     * @param string $domain The domain url.
     * @return \WP_Ultimo\Models\Domain|false
     */
    function wu_get_domain_by_domain($domain)
    {
    }
    // end wu_get_domain_by_domain;
    /**
     * Creates a new domain.
     *
     * Check the wp_parse_args below to see what parameters are necessary.
     *
     * @since 2.0.0
     *
     * @param array $domain_data Domain attributes.
     * @return \WP_Error|\WP_Ultimo\Models\Domain
     */
    function wu_create_domain($domain_data)
    {
    }
    // end wu_create_domain;
    /**
     * Restores the original URL for a mapped URL.
     *
     * @since 2.0.0
     *
     * @param string $url URL with mapped domain.
     * @param int    $blog_id The blog ID.
     * @return string
     */
    function wu_restore_original_url($url, $blog_id)
    {
    }
    /**
     * Triggers the setup_preview hooks for all registered elements.
     *
     * @since 2.0.5
     * @return void
     */
    function wu_element_setup_preview()
    {
    }
    /**
     * Returns a email.
     *
     * @since 2.0.0
     *
     * @param int $email_id The id of the email. This is not the user ID.
     * @return \WP_Ultimo\Models\Email|false
     */
    function wu_get_email($email_id)
    {
    }
    // end wu_get_email;
    /**
     * Returns a single email defined by a particular column and value.
     *
     * @since 2.0.0
     *
     * @param string $column The column name.
     * @param mixed  $value The column value.
     * @return \WP_Ultimo\Models\Email|false
     */
    function wu_get_email_by($column, $value)
    {
    }
    // end wu_get_email_by;
    /**
     * Queries emails.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Email[]
     */
    function wu_get_emails($query = array())
    {
    }
    // end wu_get_emails;
    /**
     * Get all saved system email.
     *
     * @since 2.0.0
     *
     * @return array With all system emails.
     */
    function wu_get_all_system_emails()
    {
    }
    // end wu_get_all_system_emails;
    /**
     * Get a single or all default registered system emails.
     *
     * @since 2.0.0
     *
     * @param string $slug Default system email slug.
     * @return array All default system emails.
     */
    function wu_get_default_system_emails($slug = '')
    {
    }
    // end wu_get_default_system_emails;
    /**
     * Create a single default system email.
     *
     * @since 2.0.0
     *
     * @param string $slug Default system email slug to be create.
     * @return array
     */
    function wu_create_default_system_email($slug)
    {
    }
    // end wu_create_default_system_email;
    /**
     * Send an email to one or more users.
     *
     * @since 2.0.0
     *
     * @param array $from From whom will be send this mail.
     * @param mixed $to   To who this email is.
     * @param array $args With content, subject and other arguments, has shortcodes, mail type.
     * @return array
     */
    function wu_send_mail($from = array(), $to = array(), $args = array())
    {
    }
    // end wu_send_mail;
    /**
     * Returns email-like strings.
     *
     * E.g.: Robert Smith <robert@rs.org>
     *
     * @since 2.0.0
     *
     * @param string       $email The email address.
     * @param false|string $name The customer/user display name.
     * @return string
     */
    function wu_format_email_string($email, $name = \false)
    {
    }
    // end wu_format_email_string;
    /**
     * Creates a new email.
     *
     * Check the wp_parse_args below to see what parameters are necessary.
     *
     * @since 2.0.0
     *
     * @param array $email_data Email attributes.
     * @return \WP_Error|\WP_Ultimo\Models\Email
     */
    function wu_create_email($email_data)
    {
    }
    /**
     * Add a new event to the System.
     *
     * @since 2.0.0
     *
     * @param string $slug The slug of the event. Something like payment_received.
     * @param array  $payload defined when the event is registered.
     * @return bool
     */
    function wu_do_event($slug, $payload)
    {
    }
    // end wu_do_event;
    /**
     * Register a new event globally in order to set the params.
     *
     * @since 2.0.0
     *
     * @param string $slug The slug of the event. Something like payment_received.
     * @param array  $args defined when the event is registered.
     * @return bool
     */
    function wu_register_event_type($slug, $args)
    {
    }
    // end wu_register_event_type;
    /**
     * Gets all th events registered in the system
     *
     * @since 2.0.0
     *
     * @return array with all events and parameters
     */
    function wu_get_event_types()
    {
    }
    // end wu_get_event_types;
    /**
     * Get the available event types as a key => label array.
     *
     * @since 2.0.0
     *
     * @return array
     */
    function wu_get_event_types_as_options()
    {
    }
    // end wu_get_event_types_as_options;
    /**
     * Gets all th events registered in the system.
     *
     * @since 2.0.0
     *
     * @param string $slug of the event.
     * @return array with all events and parameters.
     */
    function wu_get_event_type($slug)
    {
    }
    // end wu_get_event_type;
    /**
     * Queries events.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Event[]
     */
    function wu_get_events($query = array())
    {
    }
    // end wu_get_events;
    /**
     * Gets a event on the ID.
     *
     * @since 2.0.0
     *
     * @param integer $event_id ID of the event to retrieve.
     * @return \WP_Ultimo\Models\Event|false
     */
    function wu_get_event($event_id)
    {
    }
    // end wu_get_event;
    /**
     * Returns a event based on slug.
     *
     * @since 2.0.0
     *
     * @param string $event_slug The slug of the event.
     * @return \WP_Ultimo\Models\Event|false
     */
    function wu_get_event_by_slug($event_slug)
    {
    }
    // end wu_get_event_by_slug;
    /**
     * Creates a new event.
     *
     * Check the wp_parse_args below to see what parameters are necessary.
     *
     * @since 2.0.0
     *
     * @param array $event_data Event attributes.
     * @return \WP_Error|\WP_Ultimo\Models\Event
     */
    function wu_create_event($event_data)
    {
    }
    // end wu_create_event;
    /**
     * Generates payload arrays for events.
     *
     * If no model is passed, we mock one to generate example payloads!
     *
     * @since 2.0.0
     *
     * @param string                             $model_name Model name. E.g. membership, site, customer, product, etc.
     * @param false|\WP_Ultimo\Models\Base_Model $model The model object, or false.
     * @return array
     */
    function wu_generate_event_payload($model_name, $model = \false)
    {
    }
    // end wu_generate_event_payload;
    /**
     * Checks if the payload is a callable or if it's ready to use.
     *
     * @since 2.0.8
     *
     * @param mixed $payload The payload.
     * @return array
     */
    function wu_maybe_lazy_load_payload($payload)
    {
    }
    /**
     * Calculates the Monthly Recurring Revenue of the network.
     *
     * @since 2.0.0
     * @return float
     */
    function wu_calculate_mrr()
    {
    }
    // end wu_calculate_mrr;
    /**
     * Converts the duration unit strings such as 'day', 'year' and such into
     * a integer/float representing the amount of monhts.
     *
     * @since 2.0.0
     *
     * @param string $duration_unit The duration unit.
     * @return float
     */
    function wu_convert_duration_unit_to_month($duration_unit)
    {
    }
    // end wu_convert_duration_unit_to_month;
    /**
     * Calculates the Annual Recurring Revenue.
     *
     * It is basically MRR * 12.
     *
     * @since 2.0.0
     * @return float
     */
    function wu_calculate_arr()
    {
    }
    // end wu_calculate_arr;
    /**
     * Calculates the total revenue.
     *
     * @since 2.0.0
     *
     * @param string  $start_date The start date for the stat.
     * @param string  $end_date The end date for the stat.
     * @param boolean $inclusive If true, will include payments on the start and end date.
     * @return float
     */
    function wu_calculate_revenue($start_date = \false, $end_date = \false, $inclusive = \true)
    {
    }
    // end wu_calculate_revenue;
    /**
     * Calculates the total refunds.
     *
     * @since 2.0.0
     *
     * @param string  $start_date The start date for the stat.
     * @param string  $end_date The end date for the stat.
     * @param boolean $inclusive If true, will include payments on the start and end date.
     * @return float
     */
    function wu_calculate_refunds($start_date = \false, $end_date = \false, $inclusive = \true)
    {
    }
    // end wu_calculate_refunds;
    /**
     * Calculates the taxes collected grouped by the rate.
     *
     * @since 2.0.0
     *
     * @param string  $start_date The start date to compile data.
     * @param string  $end_date The end date to compile data.
     * @param boolean $inclusive To include or not the start and end date.
     * @return array
     */
    function wu_calculate_taxes_by_rate($start_date = \false, $end_date = \false, $inclusive = \true)
    {
    }
    // end wu_calculate_taxes_by_rate;
    /**
     * Aggregate financial data on a per product basis.
     *
     * @since 2.0.0
     *
     * @param string  $start_date The start date to compile data.
     * @param string  $end_date The end date to compile data.
     * @param boolean $inclusive To include or not the start and end date.
     * @return array
     */
    function wu_calculate_financial_data_by_product($start_date = \false, $end_date = \false, $inclusive = \true)
    {
    }
    // end wu_calculate_financial_data_by_product;
    /**
     * Calculates the taxes collected grouped by date.
     *
     * @since 2.0.0
     *
     * @param string  $start_date The start date to compile data.
     * @param string  $end_date The end date to compile data.
     * @param boolean $inclusive To include or not the start and end date.
     * @return array
     */
    function wu_calculate_taxes_by_day($start_date = \false, $end_date = \false, $inclusive = \true)
    {
    }
    // end wu_calculate_taxes_by_day;
    /**
     * Calculates the taxes collected this year, segregated by month.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_calculate_taxes_by_month()
    {
    }
    // end wu_calculate_taxes_by_month;
    /**
     * Returns the number of sign-ups by form slug.
     *
     * @since 2.0.0
     *
     * @param string  $start_date The start date to compile data.
     * @param string  $end_date The end date to compile data.
     * @param boolean $inclusive To include or not the start and end date.
     * @return array
     */
    function wu_calculate_signups_by_form($start_date = \false, $end_date = \false, $inclusive = \true)
    {
    }
    /**
     * Registers a new Ajax Form.
     *
     * Ajax forms are forms that get loaded via an ajax call using thickbox.
     * This is useful for displaying inline edit forms that support Vue and our
     * Form/Fields API.
     *
     * @since 2.0.0
     * @see \WP_Ultimo\Managers\Form_Manager::register_form
     *
     * @param string $form_id Form id.
     * @param array  $atts Form attributes, check wp_parse_atts call below.
     * @return mixed
     */
    function wu_register_form($form_id, $atts = array())
    {
    }
    // end wu_register_form;
    /**
     * Returns the ajax URL for a given form.
     *
     * @since 2.0.0
     * @see \WP_Ultimo\Managers\Form_Manager::get_form_url
     *
     * @param string  $form_id The id of the form to return.
     * @param array   $atts List of parameters, check wp_parse_args below.
     * @param boolean $inline If this form is has content.
     * @return string
     */
    function wu_get_form_url($form_id, $atts = array(), $inline = \false)
    {
    }
    // end wu_get_form_url;
    /**
     * Adds our fork of the thickbox script.
     *
     * @since 2.0.0
     * @return void
     */
    function add_wubox()
    {
    }
    /**
     * Adds a new Gateway to the System. Used by gateways to make themselves visible.
     *
     * @since 2.0.0
     *
     * @param string $id ID of the gateway. This is how we will identify the gateway in the system.
     * @param string $title Name of the gateway.
     * @param string $desc A description of the gateway to help super admins understand what services they integrate with.
     * @param string $class_name Gateway class name.
     * @param bool   $hidden If we need to hide this gateway publicly.
     * @return bool
     */
    function wu_register_gateway($id, $title, $desc, $class_name, $hidden = \false)
    {
    }
    // end wu_register_gateway;
    /**
     * Returns the currently registered gateways.
     *
     * @since 2.0.0
     *
     * @return array
     */
    function wu_get_gateways()
    {
    }
    // end wu_get_gateways;
    /**
     * Returns the currently registered and active gateways.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_active_gateways()
    {
    }
    // end wu_get_active_gateways;
    /**
     * Returns a gateway class if it exists.
     *
     * @since 2.0.0
     *
     * @param string $id Gateway ID.
     * @param string $subscription Subscription object to load into the gateway.
     * @return mixed Gateway class.
     */
    function wu_get_gateway($id, $subscription = \null)
    {
    }
    // end wu_get_gateway;
    /**
     * Returns the list of available gateways as key => name.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_gateway_as_options()
    {
    }
    // end wu_get_gateway_as_options;
    /**
     * Get the active gateways.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_active_gateway_as_options()
    {
    }
    // end wu_get_active_gateway_as_options;
    /**
     * Checks if the current post is a registration page.
     *
     * @since 2.0.0
     * @return boolean
     */
    function wu_is_registration_page()
    {
    }
    /**
     * General helper functions for WP Ultimo.
     *
     * @author      Arindo Duque
     * @category    Admin
     * @package     WP_Ultimo/Helper
     * @version     2.0.0
     */
    /**
     * Returns the WP Ultimo version.
     *
     * @since 2.0.0
     * @return string
     */
    function wu_get_version()
    {
    }
    // end wu_get_version;
    /**
     * Checks if WP Ultimo is being loaded as a must-use plugin.
     *
     * @since 2.0.0
     * @return bool
     */
    function wu_is_must_use()
    {
    }
    // end wu_is_must_use;
    /**
     * Wrapper to the network_admin_url function for WP Ultimo admin urls.
     *
     * @since 2.0.0
     *
     * @param string $path WP Ultimo page.
     * @param array  $query URL query parameters.
     * @return string
     */
    function wu_network_admin_url($path, $query = array())
    {
    }
    // end wu_network_admin_url;
    /**
     * Get the light ajax implementation URL.
     *
     * @since 2.0.0
     *
     * @param null|string $when The wu-when parameter to be used, defaults to plugins_loaded.
     * @param array       $query_args List of additional query args to add to the final URL.
     * @param int         $site_id The site to use as a base.
     * @param null|string $scheme URL scheme. Follows the same rules as the scheme param of get_home_url.
     * @return string
     */
    function wu_ajax_url($when = \null, $query_args = array(), $site_id = \false, $scheme = \null)
    {
    }
    // end wu_ajax_url;
    /**
     * Returns the current URL.
     *
     * @since 2.0.0
     * @return string
     */
    function wu_get_current_url()
    {
    }
    // end wu_get_current_url;
    /**
     * Shorthand to retrieving variables from $_GET, $_POST and $_REQUEST;
     *
     * @since 2.0.0
     *
     * @param string  $key Key to retrieve.
     * @param boolean $default Default value, when the variable is not available.
     * @return mixed
     */
    function wu_request($key, $default = \false)
    {
    }
    // end wu_request;
    /**
     * Checks if an array key value is set and returns it.
     *
     * If the key is not set, returns the $default parameter.
     * This function is a helper to serve as a shorthand for the tedious
     * and ugly $var = isset($array['key'])) ? $array['key'] : $default.
     * Using this, that same line becomes wu_get_isset($array, 'key', $default);
     *
     * @since 2.0.0
     *
     * @param array  $array Array to check key.
     * @param string $key Key to check.
     * @param mixed  $default Default value, if the key is not set.
     * @return mixed
     */
    function wu_get_isset($array, $key, $default = \false)
    {
    }
    // end wu_get_isset;
    /**
     * Converts a string (e.g. 'yes' or 'no' or '1' or '0') to a bool.
     *
     * @since 2.0.0
     *
     * @param string $string The string to convert.
     * @return bool
     */
    function wu_string_to_bool($string)
    {
    }
    // end wu_string_to_bool;
    /**
     * Converts formatted values back into floats.
     *
     * @since 2.0.0
     *
     * @param string $num Formatted number string.
     * @param bool   $decimal_separator The decimal separator.
     * @return float
     */
    function wu_to_float($num, $decimal_separator = \false)
    {
    }
    // end wu_to_float;
    /**
     * Adds a tooltip icon.
     *
     * @since 2.0.0
     *
     * @param string $tooltip Message to display.
     * @param string $icon Dashicon to display as the icon.
     * @return string
     */
    function wu_tooltip($tooltip, $icon = 'dashicons-editor-help')
    {
    }
    // end wu_tooltip;
    /**
     * Adds a tooltip to a HTML element. Needs to be echo'ed.
     *
     * @since 2.0.0
     *
     * @param string $tooltip Message to display.
     * @return string
     */
    function wu_tooltip_text($tooltip)
    {
    }
    // end wu_tooltip_text;
    /**
     * Adds a preview tag that displays the image passed on hover.
     *
     * @since 2.0.0
     *
     * @param string  $image_url The image URL.
     * @param boolean $label The label for the preview tag. Defaults to Preview.
     * @return string
     */
    function wu_preview_image($image_url, $label = \false)
    {
    }
    // end wu_preview_image;
    /**
     * Converts a slug to a name.
     *
     * This function turns discount_code into Discount Code, by removing _- and using ucwords.
     *
     * @since 2.0.0
     *
     * @param string $slug The slug to convert.
     * @return string
     */
    function wu_slug_to_name($slug)
    {
    }
    // end wu_slug_to_name;
    /**
     * Converts a list of Model objects to a list of ID => $label_field
     *
     * @since 2.0.0
     *
     * @param array  $models The list of models to convert.
     * @param string $label_field The name of the field to use.
     * @return array
     */
    function wu_models_to_options($models, $label_field = 'name')
    {
    }
    // end wu_models_to_options;
    /**
     * Returns the main site id for the network.
     *
     * @since 2.0.0
     * @return int
     */
    function wu_get_main_site_id()
    {
    }
    // end wu_get_main_site_id;
    /**
     * Generate CSV file
     *
     * @param  string $file_name File name.
     * @param  array  $data Content.
     * @return void
     */
    function wu_generate_csv($file_name, $data = array())
    {
    }
    // end wu_generate_csv;
    /**
     * Render an export CSV button.
     *
     * @since 2.0.0
     *
     * @param array $args Data array to convert to CSV.
     * @return void
     */
    function wu_render_button_csv($args)
    {
    }
    // end wu_render_button_csv;
    /**
     * Returns the content.
     *
     * @since 2.0.0
     *
     * @param  string $slug The slug of the link to be returned.
     * @param  bool   $return_default If we should return a default value.
     * @return string
     */
    function wu_get_documentation_url($slug, $return_default = \true)
    {
    }
    // end wu_get_documentation_url;
    /**
     * Adds the license key to a given URL.
     *
     * @since 2.0.0
     *
     * @param string $url URL to attach the license key to.
     * @return string
     */
    function wu_with_license_key($url)
    {
    }
    // end wu_with_license_key;
    /**
     * Get the customers' IP address.
     *
     * @since 2.0.0
     * @return string
     */
    function wu_get_ip()
    {
    }
    // end wu_get_ip;
    /**
     * Returns the URL for assets inside the assets folder.
     *
     * @since 2.0.0
     *
     * @param string $asset Asset file name with the extention.
     * @param string $assets_dir Assets sub-directory. Defaults to 'img'.
     * @param string $base_dir   Base dir. Defaults to 'assets'.
     * @return string
     */
    function wu_get_asset($asset, $assets_dir = 'img', $base_dir = 'assets')
    {
    }
    // end wu_get_asset;
    /**
     * Add a log entry to chosen file.
     *
     * @since 2.0.0
     *
     * @param string $handle Name of the log file to write to.
     * @param string $message Log message to write.
     * @return void
     */
    function wu_log_add($handle, $message)
    {
    }
    // end wu_log_add;
    /**
     * Clear entries from chosen file.
     *
     * @since 2.0.0
     *
     * @param mixed $handle Name of the log file to clear.
     * @return void
     */
    function wu_log_clear($handle)
    {
    }
    // end wu_log_clear;
    /**
     * Replaces dashes with underscores on strings.
     *
     * @since 2.0.0
     *
     * @param string $str String to replace dashes in.
     * @return string
     */
    function wu_replace_dashes($str)
    {
    }
    // end wu_replace_dashes;
    /**
     * Get the initials for a string.
     *
     * E.g. Brazilian People will return BP.
     *
     * @since 2.0.0
     *
     * @param string  $string String to process.
     * @param integer $max_size Number of initials to return.
     * @return string
     */
    function wu_get_initials($string, $max_size = 2)
    {
    }
    // end wu_get_initials;
    /**
     * Array map implementation to deal with keys.
     *
     * @since 2.0.0
     *
     * @param callable $callable The callback to run.
     * @param array    $array The array to map the keys.
     * @return array
     */
    function wu_array_map_keys($callable, $array)
    {
    }
    // end wu_array_map_keys;
    /**
     * Sort arrays based on a particular column.
     *
     * @since 2.0.0
     *
     * @param array  $a The first array.
     * @param array  $b The second array.
     * @param string $column The column to compare.
     * @return int
     */
    function wu_sort_by_column($a, $b, $column = 'order')
    {
    }
    // end wu_sort_by_column;
    /**
     * Sorts the fields.
     *
     * @param array $a The first array containing a order key.
     * @param array $b The second array containing a order key.
     * @return int
     */
    function wu_sort_by_order($a, $b)
    {
    }
    // end wu_sort_by_order;
    /**
     * Loops through the list items and adds a order key if none is set, based on the index.
     *
     * @since 2.0.7
     *
     * @param array  $list The list of sortable elements.
     * @param string $order_key The order key.
     * @return array
     */
    function wu_set_order_from_index($list, $order_key = 'order')
    {
    }
    // end wu_set_order_from_index;
    /**
     * Get a setting value, when te normal APIs are not available.
     *
     * Should only be used if we're running in sunrise.
     *
     * @since 2.0.0
     *
     * @param string $setting Setting to get.
     * @param mixed  $default Default value.
     * @return mixed
     */
    function wu_get_setting_early($setting, $default = \false)
    {
    }
    // end wu_get_setting_early;
    /**
     * Returns a list of valid selectable roles.
     *
     * @since 2.0.0
     * @param boolean $add_default_option Adds a new default option.
     * @return array
     */
    function wu_get_roles_as_options($add_default_option = \false)
    {
    }
    // end wu_get_roles_as_options;
    /**
     * Converts an array to a vue data-state parameter.
     *
     * @since 2.0.0
     *
     * @param array $state_array The array to convert.
     * @return string
     */
    function wu_convert_to_state($state_array = array())
    {
    }
    // end wu_convert_to_state;
    /**
     * Gets or creates a Session object.
     *
     * @since 2.0.0
     *
     * @param string $session_key The session key.
     * @return \WP_Ultimo\Session
     */
    function wu_get_session($session_key)
    {
    }
    // end wu_get_session;
    /**
     * Picks content to return depending on the environment.
     *
     * This is useful when creating layouts that will be used on the front-end as well as
     * the backend (admin panel). You can use this function to pick the content to return
     * according to the environment. Can be used both for HTML, but is must useful when
     * dealing with CSS classes.
     *
     * E.g. <?php echo wu_env_picker('wu-m-0', 'wu--mx-3 wu--my-2'); ?>
     * In the backend, this will return the classes 'wu--mx-3 wu--my-2',
     * while it will return wu-m-0 omn the frontend.
     *
     * Values can be anything, but will usually be strings.
     *
     * @since 2.0.0
     *
     * @param mixed $frontend_content Content to return on the frontend.
     * @param mixed $backend_content  Content to return on the backend.
     * @param bool  $is_admin You can manually pass the is_admin result, if need be.
     * @return mixed
     */
    function wu_env_picker($frontend_content, $backend_content, $is_admin = \null)
    {
    }
    // end wu_env_picker;
    /**
     * Extracts a int from a string of text.
     *
     * @since 2.0.0
     *
     * @param string $str The string to process.
     * @return int
     */
    function wu_extract_number($str)
    {
    }
    // end wu_extract_number;
    /**
     * Returns the list of available icons. To add more icons you need use the filter
     * wu_icons_list, and new array using the Key as the optgroup label and the value
     * as the array with all the icons you want to make avaiable.
     *
     * Don't forget to add the css as well.
     *
     * @since 2.0.0
     *
     * @return array With all available icons.
     */
    function wu_get_icons_list()
    {
    }
    // end wu_get_icons_list;
    /**
     * Tries to switch to a site to run the callback, before returning.
     *
     * @since 2.0.0
     *
     * @param array|string $callback Callable to run.
     * @param int          $site_id Site to switch to. Defaults to main site.
     * @return mixed
     */
    function wu_switch_blog_and_run($callback, $site_id = \false)
    {
    }
    // end wu_switch_blog_and_run;
    /**
     * Turns a multi-dimensional array into a flat array.
     *
     * @since 2.0.0
     *
     * @param array   $array The array to flatten.
     * @param boolean $indexes If we need to add the indexes as well.
     * @return array
     */
    function wu_array_flatten($array, $indexes = \false)
    {
    }
    // end wu_array_flatten;
    /**
     * Copy from http://www.php.net/manual/en/function.array-merge-recursive.php#92195
     *
     * The array_merge_recursive does indeed merge arrays, but it converts values with duplicate
     * keys to arrays rather than overwriting the value in the first array with the duplicate
     * value in the second array, as array_merge does. I.e., with array_merge_recursive,
     * this happens (documented behavior):
     *
     * array_merge_recursive(array('key' => 'org value'), array('key' => 'new value'));
     *     => array('key' => array('org value', 'new value'));
     *
     * array_merge_recursive_distinct does not change the datatypes of the values in the arrays.
     * Matching keys' values in the second array overwrite those in the first array, as is the
     * case with array_merge, i.e.:
     *
     * array_merge_recursive_distinct(array('key' => 'org value'), array('key' => 'new value'));
     *     => array('key' => array('new value'));
     *
     * Parameters are passed by reference, though only for performance reasons. They're not
     * altered by this function.
     *
     * @author Gabriel Sobrinho <gabriel (dot) sobrinho (at) gmail (dot) com>
     * @author Daniel <daniel (at) danielsmedegaardbuus (dot) dk>
     *
     * @param array $array1 The arrays original.
     * @param array $array2 The array to be merged in.
     * @param bool  $should_sum If we should add up numeric values instead of replacing the original.
     * @return array
     */
    function wu_array_merge_recursive_distinct(array &$array1, array &$array2, $should_sum = \true)
    {
    }
    // end wu_array_merge_recursive_distinct;
    /**
     * Compares two arrays and returns the diff, recursively.
     *
     * This is frequently used to compare Limitation sets so we can have
     * a waterfall of limitations coming from the product, to the
     * membership, down to the site.
     *
     * @since 2.0.0
     *
     * @param array $array1 Array 1.
     * @param array $array2 Array 2.
     * @param array $to_keep List of keys to keep regardless of diff status.
     * @return array
     */
    function wu_array_recursive_diff($array1, $array2, $to_keep = array())
    {
    }
    // end wu_array_recursive_diff;
    /**
     * Checks if we are in debug mode.
     *
     * @since 2.0.0
     * @return bool
     */
    function wu_is_debug()
    {
    }
    // end wu_is_debug;
    /**
     * Returns the PHP input (php://input) as JSON.
     *
     * @since 2.0.0
     *
     * @param boolean $raw Wether to return the raw string or a decoded value.
     * @return object
     */
    function wu_get_input($raw = \false)
    {
    }
    // end wu_get_input;
    /**
     * Maybe log errors to the file.
     *
     * @since 2.0.0
     *
     * @param \Throwable $e The exception object.
     * @return void
     */
    function wu_maybe_log_error($e)
    {
    }
    // end wu_maybe_log_error;
    /**
     * Get the function caller.
     *
     * @since 2.0.0
     *
     * @param integer $depth The depth of the backtrace.
     * @return string|null
     */
    function wu_get_function_caller($depth = 1)
    {
    }
    // end wu_get_function_caller;
    /**
     * Clean up p tags around block elements.
     *
     * @since 2.0.0
     *
     * @param string $content The content.
     * @return string
     */
    function wu_remove_empty_p($content)
    {
    }
    // end wu_remove_empty_p;
    /**
     * Generates a string containing html attributes to be used inside html tags.
     *
     * This function takes an array of attributes => value and returns
     * a string of concatenated html attributes ready to be echoed inside
     * a HTML element.
     *
     * Example input:
     * array(
     *   'id'    => 'my-element-id',
     *   'class' => 'my-class my-class-2',
     * );
     *
     * Output: id="my-element-id" class="my-class my-class-2"
     *
     * @since 2.0.7
     *
     * @param array $attributes The list of attributes.
     * @return string
     */
    function wu_array_to_html_attrs($attributes = array())
    {
    }
    // end wu_array_to_html_attrs;
    /**
     * Replaces or removes the scheme from a URL.
     *
     * @since 2.0.0
     *
     * @param string $url The URL to process.
     * @param string $new_scheme An empty string, https, or http.
     * @return string
     */
    function wu_replace_scheme($url, $new_scheme = '')
    {
    }
    // end wu_replace_scheme;
    /**
     * Returns how much time it takes until the next queue. In seconds.
     *
     * @since 2.0.0
     * @return int
     */
    function wu_get_next_queue_run()
    {
    }
    // end wu_get_next_queue_run;
    /**
     * Cast a list of models to a list of arrays containing the model properties.
     *
     * @since 2.0.0
     *
     * @param \WP_Ultimo\Models\Base_Model $model The model to cast to array.
     * @return array
     */
    function wu_cast_model_to_array($model)
    {
    }
    // end wu_cast_model_to_array;
    /**
     * Prevents the current page from being cached.
     *
     * @since 2.0.0
     * @return void
     */
    function wu_no_cache()
    {
    }
    // end wu_no_cache;
    /**
     * Get the translatable version of a string.
     *
     * @since 2.0.5
     *
     * @param string $string The string to get.
     * @return string
     */
    function wu_get_translatable_string($string)
    {
    }
    // end wu_get_translatable_string;
    /**
     * Maybe sends a WP Ultimo X Header.
     *
     * Useful for debugging purposes.
     * These headers can easily be omitted by
     * running add_filter('wu_should_send_x_headers', '__return_false');
     *
     * @since 2.0.0
     *
     * @param string $header The header to send. Example: X-Ultimo-Caching: prevent-caching.
     * @return void
     */
    function wu_x_header($header)
    {
    }
    /**
     * Invoice Functions
     *
     * Public APIs to load and deal with WP Ultimo invoice.
     *
     * @author      Arindo Duque
     * @category    Admin
     * @package     WP_Ultimo/Invoice_Template
     * @version     2.0.0
     */
    /**
     * Create the invoice template used in the editor customizer.
     *
     * @since 2.0.0
     *
     * @return boolean
     */
    function wu_get_invoice_template()
    {
    }
    // phpcs:disable
    /**
     * Return the instance of the function
     */
    function WU_Signup()
    {
    }
    function validate_blog_form()
    {
    }
    function validate_user_form()
    {
    }
    // end if;
    /**
     * Builds HTML attributes from a PHP array
     *
     * @param array $attributes
     * @return void
     */
    function wu_create_html_attributes_from_array($attributes = array())
    {
    }
    // end wu_create_html_attributes_from_array;
    /**
     * Display one single option
     *
     * @since 1.7.3
     * @param string $option_value
     * @param string $option_label
     * @return void
     */
    function wu_print_signup_field_option($option_value, $option_label, $field = array())
    {
    }
    // end wu_print_signup_field_option;
    /**
     * Displays the option tags of an select field
     *
     * @since 1.7.3
     * @param array $options
     * @return void
     */
    function wu_print_signup_field_options($options, $field = array())
    {
    }
    // end wu_print_signup_field_options;
    /**
     * Print sing-up fields
     *
     * @param string $field_slug
     * @param array  $field
     * @param array  $results
     * @return void
     */
    function wu_print_signup_field($field_slug, $field, $results)
    {
    }
    // end wu_print_signup_field;
    /**
     * Alias function to allow creation of users for WP Ultimo.
     *
     * User Data should contain: user_login, user_email, user_pass;
     * Plan Data should contain: plan_id, plan_freq;
     * User Meta is an associative array containing key => value pairs to be saved as meta fields on that user.
     *
     * @param array $user_data
     * @param array $plan_data
     * @param array $user_meta
     * @return integer|boolean
     */
    function wu_create_user(array $user_data, array $plan_data, array $user_meta = array())
    {
    }
    // end wu_create_user;
    /**
     * Alias function to allow creation of sites for WP Ultimo.
     *
     * Site Data should contain: blog_title, blogname, and role;
     * Site Meta is an associative array containing key => value pairs to be saved as meta fields on that site.
     *
     * @param integer $user_id
     * @param array   $site_data
     * @param boolean $template_id
     * @param array   $site_meta
     * @return void
     */
    function wu_create_site_legacy($user_id, array $site_data, $template_id = \false, $site_meta = array())
    {
    }
    // end wu_create_site_legacy;
    /**
     * Alias function that adds a new Step to the sign-up flow
     *
     * @since 1.4.0
     * @param string  $id
     * @param integer $order
     * @param array   $step
     * @return void
     */
    function wu_add_signup_step($id, $order, array $step)
    {
    }
    // end wu_add_signup_step;
    /**
     * Alias function that adds a new field to a step the sign-up flow
     *
     * @since 1.4.0
     * @param string  $step
     * @param string  $id
     * @param integer $order
     * @param array   $step
     * @return void
     */
    function wu_add_signup_field($step, $id, $order, $field)
    {
    }
    /**
     * Checks if the current site has a certain product associated to it.
     *
     * This is useful for controlling the display of certain info
     * based on the plans and other products attached to a membership -
     * and as a consequence - to a site.
     *
     * For example, to display something only to the customers of the
     * products with the "premium" slug, we'd have something like this:
     *
     * if (wu_has_product('premium')) {
     *
     *    // premium content here.
     *
     * } else {
     *
     *   // Content for non-members.
     *
     * }.
     *
     * One important things to keep in mind is that this function
     * does not check for the status of that site's membership by default.
     * If that's something that you need, pass the second param "blocking" as true.
     * If the blocking flag is set, the function only returns true if the site has
     * the product and if the membership is active.
     *
     * Another important note:
     * This function behaves differently when called in the context of
     * the main site or a regular site. In these cases, we loop through
     * all of the customer's memberships to try to find at least one
     * with the requested product. This makes this function useful
     * to control access to content on the main site, for example.
     *
     * @since 2.0.0
     * @see wu_is_membership_active()
     *
     * @todo Implement search algo for main site and regular site.
     * @param string|array $product_slug Product slug to check. Can also be an array of product slugs.
     *                                   Will return true if ANY slug on the array is present.
     * @param bool         $blocking When set to true, this flag also validates the active status of the membership.
     * @param string       $site_id  The site ID to test.
     * @return boolean
     */
    function wu_has_product($product_slug, $blocking = \false, $site_id = '')
    {
    }
    // end wu_has_product;
    /**
     * Checks if the membership associated with a site is active.
     *
     * @since 2.0.0
     *
     * @param string $site_id The site ID to test.
     * @return bool
     */
    function wu_is_membership_active($site_id = '')
    {
    }
    // end wu_is_membership_active;
    /**
     * Register a new Limitation module.
     *
     * @since 2.0.0
     *
     * @param string $id The id of the limitation module.
     * @param string $class_name The module class name.
     * @return void
     */
    function wu_register_limit_module($id, $class_name)
    {
    }
    // end wu_register_limit_module;
    /**
     * Generate the modal link to search for an upgrade path.
     *
     * @since 2.0.0
     *
     * @param array $args The module and type of limit that needs upgrading.
     * @return string
     */
    function wu_generate_upgrade_to_unlock_url($args)
    {
    }
    // end wu_generate_upgrade_to_unlock_url;
    /**
     * Generates a Unlock to Upgrade button for the upgrade modal.
     *
     * @since 2.0.0
     *
     * @param string $title The title of the modal and label of the button.
     * @param array  $args The module and type of limit that needs upgrading.
     * @return string
     */
    function wu_generate_upgrade_to_unlock_button($title, $args)
    {
    }
    // end wu_generate_upgrade_to_unlock_button;
    /**
     * Activate a plugin(s) via Job Queue.
     *
     * @since 2.0.0
     *
     * @param int          $site_id The site ID.
     * @param string|array $plugins The plugin or list of plugins to activate.
     * @param boolean      $network_wide If we want to activate it network-wide.
     * @param boolean      $silent IF we should do the process silently - true by default.
     * @return void
     */
    function wu_async_activate_plugins($site_id, $plugins, $network_wide = \false, $silent = \true)
    {
    }
    // end wu_async_activate_plugins;
    /**
     * Deactivates a plugin(s) via Job Queue.
     *
     * @since 2.0.0
     *
     * @param int          $site_id The site ID.
     * @param string|array $plugins The plugin or list of plugins to activate.
     * @param boolean      $network_wide If we want to activate it network-wide.
     * @param boolean      $silent IF we should do the process silently - true by default.
     * @return void
     */
    function wu_async_deactivate_plugins($site_id, $plugins, $network_wide = \false, $silent = \true)
    {
    }
    // end wu_async_deactivate_plugins;
    /**
     * Switch themes via Job Queue.
     *
     * @since 2.0.0
     *
     * @param int    $site_id The site ID.
     * @param string $theme_stylesheet The theme stylesheet.
     * @return void
     */
    function wu_async_switch_theme($site_id, $theme_stylesheet)
    {
    }
    /**
     * Returns a membership.
     *
     * @since 2.0.0
     *
     * @param int $membership_id The ID of the membership.
     * @return \WP_Ultimo\Models\Membership|false
     */
    function wu_get_membership($membership_id)
    {
    }
    // end wu_get_membership;
    /**
     * Returns a single membership defined by a particular column and value.
     *
     * @since 2.0.0
     *
     * @param string $column The column name.
     * @param mixed  $value The column value.
     * @return \WP_Ultimo\Models\Membership|false
     */
    function wu_get_membership_by($column, $value)
    {
    }
    // end wu_get_membership_by;
    /**
     * Gets a membership based on the hash.
     *
     * @since 2.0.0
     *
     * @param string $hash The hash for the membership.
     * @return \WP_Ultimo\Models\Membership|false
     */
    function wu_get_membership_by_hash($hash)
    {
    }
    // end wu_get_membership_by_hash;
    /**
     * Queries memberships.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Membership[]
     */
    function wu_get_memberships($query = array())
    {
    }
    // end wu_get_memberships;
    /**
     * Creates a new membership.
     *
     * @since 2.0.0
     *
     * @param array $membership_data Membership data.
     * @return \WP_Error|\WP_Ultimo\Models\Membership
     */
    function wu_create_membership($membership_data)
    {
    }
    // end wu_create_membership;
    /**
     * Get all customers with a specific membership using the product_id as reference.
     *
     * @since 2.0.0
     *
     * @param array $product_id Membership product.
     * @return array    With all users within the membership.
     */
    function wu_get_membership_customers($product_id)
    {
    }
    // end wu_get_membership_customers;
    /**
     * Returns a membership based on the customer gateway ID.
     *
     * This is NOT a very reliable way of retrieving memberships
     * as the same customer can have multiple memberships using
     * the same gateway.
     *
     * As this is only used as a last ditch effort, mostly when
     * trying to process payment-related webhooks,
     * we always get pending memberships, and the last one
     * created (order by ID DESC).
     *
     * @since 2.0.0
     *
     * @param string  $customer_gateway_id The customer gateway id. E.g. cus_***.
     * @param array   $allowed_gateways List of allowed gateways.
     * @param boolean $amount The amount. Increases accuracy.
     * @return \WP_Ultimo\Models\Membership|false
     */
    function wu_get_membership_by_customer_gateway_id($customer_gateway_id, $allowed_gateways = array(), $amount = \false)
    {
    }
    // end wu_get_membership_by_customer_gateway_id;
    /**
     * Creates a new payment for a membership.
     *
     * This is used by gateways to create a new payment when necessary.
     *
     * @since 2.0.0
     *
     * @param \WP_Ultimo\Models\Membership $membership The membership object.
     * @param boolean                      $should_cancel_pending_payments If we should cancel pending payments.
     * @return int|\WP_Error
     */
    function wu_membership_create_new_payment($membership, $should_cancel_pending_payments = \true)
    {
    }
    /**
     * Mock Functions
     *
     * Create mock model objects for testing purposes.
     *
     * @author      Arindo Duque
     * @category    Admin
     * @package     WP_Ultimo/Mock
     * @version     2.0.0
     */
    /**
     * Returns a mock site object.
     *
     * @since 2.0.0
     * @param string|int $seed Number used to return different site names and urls.
     * @return \WP_Ultimo\Models\Site
     */
    function wu_mock_site($seed = \false)
    {
    }
    // end wu_mock_site;
    /**
     * Returns a mock membership object.
     *
     * @since 2.0.0
     * @return \WP_Ultimo\Models\Membership
     */
    function wu_mock_membership()
    {
    }
    // end wu_mock_membership;
    /**
     * Returns a mock product object.
     *
     * @since 2.0.0
     * @return \WP_Ultimo\Models\Product
     */
    function wu_mock_product()
    {
    }
    // end wu_mock_product;
    /**
     * Returns a mock customer object.
     *
     * @since 2.0.0
     * @return \WP_Ultimo\Models\Customer
     */
    function wu_mock_customer()
    {
    }
    // end wu_mock_customer;
    /**
     * Returns a mock payment object.
     *
     * @since 2.0.0
     * @return \WP_Ultimo\Models\Payment
     */
    function wu_mock_payment()
    {
    }
    // end wu_mock_payment;
    /**
     * Returns a mock domain object.
     *
     * @since 2.0.0
     * @return \WP_Ultimo\Models\Payment
     */
    function wu_mock_domain()
    {
    }
    /**
     * Returns a payment.
     *
     * @since 2.0.0
     *
     * @param int $payment_id The ID of the payment.
     * @return \WP_Ultimo\Models\Payment|false
     */
    function wu_get_payment($payment_id)
    {
    }
    // end wu_get_payment;
    /**
     * Queries payments.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Payment[]
     */
    function wu_get_payments($query = array())
    {
    }
    // end wu_get_payments;
    /**
     * Returns a line-item.
     *
     * @since 2.0.0
     *
     * @param int $line_item_id The ID of the line item id.
     * @param int $payment_id The ID of the payment.
     * @return \WP_Ultimo\Checkout\Line_Item|false
     */
    function wu_get_line_item($line_item_id, $payment_id)
    {
    }
    // end wu_get_line_item;
    /**
     * Gets a payment based on the hash.
     *
     * @since 2.0.0
     *
     * @param string $hash The hash for the payment.
     * @return \WP_Ultimo\Models\Payment|false
     */
    function wu_get_payment_by_hash($hash)
    {
    }
    // end wu_get_payment_by_hash;
    /**
     * Returns a single payment defined by a particular column and value.
     *
     * @since 2.0.0
     *
     * @param string $column The column name.
     * @param mixed  $value The column value.
     * @return \WP_Ultimo\Models\Payment|false
     */
    function wu_get_payment_by($column, $value)
    {
    }
    // end wu_get_payment_by;
    /**
     * Creates a new payment.
     *
     * @since 2.0.0
     *
     * @param array $payment_data Payment data.
     * @return \WP_Error|\WP_Ultimo\Models\Payment
     */
    function wu_create_payment($payment_data)
    {
    }
    // end wu_create_payment;
    /**
     * Returns a list of the refundable payment types.
     *
     * Can be filtered if new payment types that
     * can be refunded are added by developers.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_refundable_payment_types()
    {
    }
    // end wu_get_refundable_payment_types;
    /**
     * Returns the icon classes for a payment status.
     *
     * @since 2.0.0
     *
     * @param string $payment_status The payment status.
     * @return string
     */
    function wu_get_payment_icon_classes($payment_status)
    {
    }
    /**
     * Returns a product.
     *
     * @since 2.0.0
     *
     * @param int|string $product_id_or_slug The ID or slug of the product.
     * @return \WP_Ultimo\Models\Product|false
     */
    function wu_get_product($product_id_or_slug)
    {
    }
    // end wu_get_product;
    /**
     * Queries products.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Product[]
     */
    function wu_get_products($query = array())
    {
    }
    // end wu_get_products;
    /**
     * Queries plans.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Product[]
     */
    function wu_get_plans($query = array())
    {
    }
    // end wu_get_plans;
    /**
     * Returns the list of plans as ID -> Name.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_plans_as_options()
    {
    }
    // end wu_get_plans_as_options;
    /**
     * Returns a product based on slug.
     *
     * @since 2.0.0
     *
     * @param string $product_slug The slug of the product.
     * @return \WP_Ultimo\Models\Product|false
     */
    function wu_get_product_by_slug($product_slug)
    {
    }
    // end wu_get_product_by_slug;
    /**
     * Returns a single product defined by a particular column and value.
     *
     * @since 2.0.0
     *
     * @param string $column The column name.
     * @param mixed  $value The column value.
     * @return \WP_Ultimo\Models\Membership|false
     */
    function wu_get_product_by($column, $value)
    {
    }
    // end wu_get_product_by;
    /**
     * Creates a new product.
     *
     * @since 2.0.0
     *
     * @param array $product_data Product data.
     * @return \WP_Error|\WP_Ultimo\Models\Product
     */
    function wu_create_product($product_data)
    {
    }
    // end wu_create_product;
    /**
     * Returns a list of available product groups.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_product_groups()
    {
    }
    // end wu_get_product_groups;
    /**
     * Takes a list of product objects and separates them into plan and addons.
     *
     * @since 2.0.0
     *
     * @param Product[] $products List of products.
     * @return array first element is the first plan found, the second is an array with all the other products.
     */
    function wu_segregate_products($products)
    {
    }
    /**
     * Wrapper around Action Scheduler to make it easier to
     * make changes if needed be in the future.
     *
     * @author      Arindo Duque
     * @category    Admin
     * @package     WP_Ultimo/Scheduler
     * @version     2.0.0
     */
    /**
     * Enqueue an action to run one time, as soon as possible.
     *
     * @see https://actionscheduler.org/api/#function-reference--as_enqueue_async_action
     *
     * @param string $hook The hook to trigger.
     * @param array  $args Arguments to pass when the hook triggers.
     * @param string $group The group to assign this job to.
     * @return int The action ID.
     */
    function wu_enqueue_async_action($hook, $args = array(), $group = '')
    {
    }
    // end wu_enqueue_async_action;
    /**
     * Schedule an action to run one time.
     *
     * @see https://actionscheduler.org/api/#function-reference--as_schedule_single_action
     *
     * @param int    $timestamp When the job will run.
     * @param string $hook The hook to trigger.
     * @param array  $args Arguments to pass when the hook triggers.
     * @param string $group The group to assign this job to.
     *
     * @return int The action ID.
     */
    function wu_schedule_single_action($timestamp, $hook, $args = array(), $group = '')
    {
    }
    // end wu_schedule_single_action;
    /**
     * Schedule a recurring action.
     *
     * @see https://actionscheduler.org/api/#function-reference--as_schedule_recurring_action
     *
     * @param int    $timestamp When the first instance of the job will run.
     * @param int    $interval_in_seconds How long to wait between runs.
     * @param string $hook The hook to trigger.
     * @param array  $args Arguments to pass when the hook triggers.
     * @param string $group The group to assign this job to.
     *
     * @return int The action ID.
     */
    function wu_schedule_recurring_action($timestamp, $interval_in_seconds, $hook, $args = array(), $group = '')
    {
    }
    // end wu_schedule_recurring_action;
    /**
     * Schedule an action that recurs on a cron-like schedule.
     *
     * @see https://actionscheduler.org/api/#function-reference--as_schedule_cron_action
     *
     * @param int    $timestamp The first instance of the action will be scheduled.
     *               to run at a time calculated after this timestamp matching the cron
     *               expression. This can be used to delay the first instance of the action.
     * @param string $schedule A cron-link schedule string.
     * @see http://en.wikipedia.org/wiki/Cron
     *   *    *    *    *    *    *
     *   ┬    ┬    ┬    ┬    ┬    ┬
     *   |    |    |    |    |    |
     *   |    |    |    |    |    + year [optional]
     *   |    |    |    |    +----- day of week (0 - 7) (Sunday=0 or 7)
     *   |    |    |    +---------- month (1 - 12)
     *   |    |    +--------------- day of month (1 - 31)
     *   |    +-------------------- hour (0 - 23)
     *   +------------------------- min (0 - 59)
     * @param string $hook The hook to trigger.
     * @param array  $args Arguments to pass when the hook triggers.
     * @param string $group The group to assign this job to.
     *
     * @return int The action ID.
     */
    function wu_schedule_cron_action($timestamp, $schedule, $hook, $args = array(), $group = '')
    {
    }
    // end wu_schedule_cron_action;
    /**
     * Cancel the next occurrence of a scheduled action.
     *
     * @see https://actionscheduler.org/api/#function-reference--as_unschedule_action
     *
     * @param string $hook The hook that the job will trigger.
     * @param array  $args Args that would have been passed to the job.
     * @param string $group The group the job is assigned to.
     *
     * @return string|null The scheduled action ID if a scheduled action was found, or null if no matching action found.
     */
    function wu_unschedule_action($hook, $args = array(), $group = '')
    {
    }
    // end wu_unschedule_action;
    /**
     * Cancel all occurrences of a scheduled action.
     *
     * @see https://actionscheduler.org/api/#function-reference--as_unschedule_all_actions
     *
     * @param string $hook The hook that the job will trigger.
     * @param array  $args Args that would have been passed to the job.
     * @param string $group The group the job is assigned to.
     */
    function wu_unschedule_all_actions($hook, $args = array(), $group = '')
    {
    }
    // end wu_unschedule_all_actions;
    /**
     * Check if there is an existing action in the queue with a given hook, args and group combination.
     *
     * An action in the queue could be pending, in-progress or async. If the is pending for a time in
     * future, its scheduled date will be returned as a timestamp. If it is currently being run, or an
     * async action sitting in the queue waiting to be processed, in which case boolean true will be
     * returned. Or there may be no async, in-progress or pending action for this hook, in which case,
     * boolean false will be the return value.
     *
     * @see https://actionscheduler.org/api/#function-reference--as_next_scheduled_action
     *
     * @param string $hook The hook that the job will trigger.
     * @param array  $args Args that would have been passed to the job.
     * @param string $group The group the job is assigned to.
     *
     * @return int|bool The timestamp for the next occurrence of a pending scheduled action, true for an async or in-progress action or false if there is no matching action.
     */
    function wu_next_scheduled_action($hook, $args = \null, $group = '')
    {
    }
    // end wu_next_scheduled_action;
    /**
     * Find scheduled actions.
     *
     * @see https://actionscheduler.org/api/#function-reference--as_get_scheduled_actions
     *
     * @param array  $args Possible arguments, with their default values.
     * @param string $return_format OBJECT, ARRAY_A, or ids.
     *
     * @return array
     */
    function wu_get_scheduled_actions($args = array(), $return_format = \OBJECT)
    {
    }
    /**
     * Settings Helper Functions and Public APIs
     *
     * This file register the settings public APIs and functions.
     * Whenever possible, user the functions here instead of directly accessing WP_Ultimo()->setting.
     *
     * @author      Arindo Duque
     * @category    Admin
     * @package     WP_Ultimo/Helper/Settings
     * @version     2.0.0
     */
    /**
     * Returns an array with all the WP Ultimo settings.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_all_settings()
    {
    }
    // end wu_get_all_settings;
    /**
     * Get a specific settings from the plugin.
     *
     * @since 2.0.0
     *
     * @param  string $setting Settings name to return.
     * @param  string $default Default value for the setting if it doesn't exist.
     * @return array The value of that setting
     */
    function wu_get_setting($setting, $default = \false)
    {
    }
    // end wu_get_setting;
    /**
     * Saves a specific setting into the database.
     *
     * @since 2.0.0
     *
     * @param string $setting Option key to save.
     * @param mixed  $value   New value of the option.
     * @return boolean
     */
    function wu_save_setting($setting, $value)
    {
    }
    // end wu_save_setting;
    /**
     * Adds a new settings section.
     *
     * Sections are a way to organize correlated settings into one cohesive unit.
     * Developers should be able to add their own sections, if they need to.
     * This is the purpose of this APIs.
     *
     * @since 2.0.0
     *
     * @param string $section_slug ID of the Section. This is used to register fields to this section later.
     * @param array  $atts Section attributes such as title, description and so on.
     * @return void
     */
    function wu_register_settings_section($section_slug, $atts)
    {
    }
    // end wu_register_settings_section;
    /**
     * Adds a new field to a settings section.
     *
     * Fields are settings that admins can actually change.
     * This API allows developers to add new fields to a given settings section.
     *
     * @since 2.0.0
     *
     * @param string $section_slug Section to which this field will be added to.
     * @param string $field_slug ID of the field. This is used to later retrieve the value saved on this setting.
     * @param array  $atts Field attributes such as title, description, tooltip, default value, etc.
     * @return void
     */
    function wu_register_settings_field($section_slug, $field_slug, $atts)
    {
    }
    // end wu_register_settings_field;
    /**
     * Adds a help side-panel to the settings page.
     *
     * @since 2.0.0
     *
     * @param string $section_slug Section to which this field will be added to.
     * @param array  $atts Side-panel attributes.
     * @return void
     */
    function wu_register_settings_side_panel($section_slug, $atts)
    {
    }
    // end wu_register_settings_side_panel;
    /**
     * Retrieve the network custom logo.
     *
     * @param string $size The size of the logo. It could be Thumbnail, Medium, Large or Full.
     * @return string With the logo's url.
     */
    function wu_get_network_logo($size = 'full')
    {
    }
    // end wu_get_network_logo;
    /**
     * Retrieve the network custom icon.
     *
     * @param string $size The size of the icon in pixels.
     * @return string With the logo's url.
     */
    function wu_get_network_favicon($size = '48')
    {
    }
    /**
     * Site Functions
     *
     * Public APIs to load and deal with WP Ultimo sites.
     *
     * @author      Arindo Duque
     * @category    Admin
     * @package     WP_Ultimo/Site
     * @version     2.0.0
     */
    /**
     * Returns the current site.
     *
     * @since 2.0.0
     * @return \WP_Ultimo\Models\Site
     */
    function wu_get_current_site()
    {
    }
    // end wu_get_current_site;
    /**
     * Returns the site object
     *
     * @since 2.0.0
     *
     * @param int $id The id of the site.
     * @return \WP_Ultimo\Models\Site
     */
    function wu_get_site($id)
    {
    }
    // end wu_get_site;
    /**
     * Gets a site based on the hash.
     *
     * @since 2.0.0
     *
     * @param string $hash The hash for the payment.
     * @return \WP_Ultimo\Models\Site|false
     */
    function wu_get_site_by_hash($hash)
    {
    }
    // end wu_get_site_by_hash;
    /**
     * Queries sites.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Site[]
     */
    function wu_get_sites($query = array())
    {
    }
    // end wu_get_sites;
    /**
     * Returns the list of Site Templates.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return array
     */
    function wu_get_site_templates($query = array())
    {
    }
    // end wu_get_site_templates;
    /**
     * Parses a URL and breaks it into different parts
     *
     * @since 2.0.0
     *
     * @param string $domain The domain to break up.
     * @return object
     */
    function wu_handle_site_domain($domain)
    {
    }
    // end wu_handle_site_domain;
    /**
     * Creates a new site.
     *
     * @since 2.0.0
     *
     * @param array $site_data Site data.
     * @return \WP_Error|\WP_Ultimo\Models\Site
     */
    function wu_create_site($site_data)
    {
    }
    // end wu_create_site;
    /**
     * Returns the correct domain/path combination when creating a new site.
     *
     * @since 2.0.0
     *
     * @param string      $path_or_subdomain The site path.
     * @param string|bool $base_domain The domain selected.
     * @return object Object with a domain and path properties.
     */
    function wu_get_site_domain_and_path($path_or_subdomain = '/', $base_domain = \false)
    {
    }
    /**
     * Checks if WP Ultimo should collect taxes.
     *
     * @since 2.0.0
     * @return bool
     */
    function wu_should_collect_taxes()
    {
    }
    // end wu_should_collect_taxes;
    /**
     * Returns the tax categories.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_tax_categories()
    {
    }
    // end wu_get_tax_categories;
    /**
     * Returns a given tax category
     *
     * @since 2.0.0
     * @param string $tax_category The tax category to retrieve.
     * @return array
     */
    function wu_get_tax_category($tax_category = 'default')
    {
    }
    // end wu_get_tax_category;
    /**
     * Returns the tax categories as a slug => name array.
     *
     * @since 2.0.0
     * @return array
     */
    function wu_get_tax_categories_as_options()
    {
    }
    // end wu_get_tax_categories_as_options;
    /**
     * Calculates the tax value.
     *
     * @since 2.0.0
     *
     * @param float   $base_price Original price to calculate based upon.
     * @param float   $amount Tax amount.
     * @param string  $type Type of the tax, can be percentage or absolute.
     * @param boolean $format If we should format the results or not.
     * @param boolean $inclusive If we should calculate taxes as inclusive.
     * @return float|string
     */
    function wu_get_tax_amount($base_price, $amount, $type, $format = \true, $inclusive = \false)
    {
    }
    // end wu_get_tax_amount;
    /**
     * Searches for applicable tax rates based on the country.
     *
     * @todo This can be greatly improved and should support multiple rates
     * in the future.
     *
     * @since 2.0.0
     *
     * @param string $country The country to search for.
     * @param string $tax_category The tax category of the product.
     * @return array
     */
    function wu_get_applicable_tax_rates($country, $tax_category = 'default')
    {
    }
    /**
     * Helper Functions
     *
     * We will create some helper functions just to make the whole rendering syntax more similar to
     * existing WordPress Plugins, like WooCommerce and etc.
     *
     * @author      Arindo Duque
     * @category    Admin
     * @package     WP_Ultimo/Helper
     * @version     1.4.0
     */
    /**
     * Alias function to be used on the templates
     *
     * @param  string       $view Template to be get.
     * @param  array        $args Arguments to be parsed and made available inside the template file.
     * @param string|false $default_view View to be used if the view passed is not found. Used as fallback.
     * @return void
     */
    function wu_get_template($view, $args = array(), $default_view = \false)
    {
    }
    // end wu_get_template;
    /**
     * Alias function to be used on the templates;
     * Rather than directly including the template, it returns the contents inside a variable
     *
     * @param  string       $view Template to be get.
     * @param  array        $args Arguments to be parsed and made available inside the template file.
     * @param string|false $default_view View to be used if the view passed is not found. Used as fallback.
     * @return string
     */
    function wu_get_template_contents($view, $args = array(), $default_view = \false)
    {
    }
    /**
     * Queries webhook.
     *
     * @since 2.0.0
     *
     * @param array $query Query arguments.
     * @return \WP_Ultimo\Models\Webhook[]
     */
    function wu_get_webhooks($query = array())
    {
    }
    // end wu_get_webhooks;
    /**
     * Gets a webhook on the ID.
     *
     * @since 2.0.0
     *
     * @param integer $webhook_id ID of the webhook to retrieve.
     * @return \WP_Ultimo\Models\Webhook|false
     */
    function wu_get_webhook($webhook_id)
    {
    }
    // end wu_get_webhook;
    /**
     * Creates a new webhook.
     *
     * Check the wp_parse_args below to see what parameters are necessary.
     *
     * @since 2.0.0
     *
     * @param array $webhook_data Webhook attributes.
     * @return \WP_Error|\WP_Ultimo\Models\Webhook
     */
    function wu_create_webhook($webhook_data)
    {
    }
    // end if;
    /**
     * Adds a warning when WP Ultimo is not present but the sunrise file is.
     *
     * @since 2.0.0
     * @return void
     */
    function wu_remove_sunrise_warning()
    {
    }
    /**
     * Initializes the WP Ultimo class
     *
     * This function returns the WP_Ultimo class singleton, and
     * should be used to avoid declaring globals.
     *
     * @since 2.0.0
     * @return WP_Ultimo
     */
    function WP_Ultimo()
    {
    }
}
namespace {
define('WC_VERSION', '0.0.0');
}
